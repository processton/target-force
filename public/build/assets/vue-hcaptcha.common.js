import{g as O}from"./app.js";function j(_,s){for(var i=0;i<s.length;i++){const t=s[i];if(typeof t!="string"&&!Array.isArray(t)){for(const e in t)if(e!=="default"&&!(e in _)){const n=Object.getOwnPropertyDescriptor(t,e);n&&Object.defineProperty(_,e,n.get?n:{enumerable:!0,get:()=>t[e]})}}}return Object.freeze(Object.defineProperty(_,Symbol.toStringTag,{value:"Module"}))}var g={exports:{}};(function(_){_.exports=function(s){var i={};function t(e){if(i[e])return i[e].exports;var n=i[e]={i:e,l:!1,exports:{}};return s[e].call(n.exports,n,n.exports,t),n.l=!0,n.exports}return t.m=s,t.c=i,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){typeof Symbol!="undefined"&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(n&1&&(e=t(e)),n&8||n&4&&typeof e=="object"&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),n&2&&typeof e!="string")for(var a in e)t.d(r,a,function(f){return e[f]}.bind(null,a));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s="1c25")}({"1c25":function(s,i,t){t.r(i),t("e754");var e=t("56d7"),n=t.n(e);for(var r in e)["default"].indexOf(r)<0&&function(a){t.d(i,a,function(){return e[a]})}(r);i.default=n.a},"1e53":function(s,i,t){t.d(i,"a",function(){return e}),t.d(i,"b",function(){return n});var e=function(){var r=this,a=r.$createElement,f=r._self._c||a;return f("div",{attrs:{id:"hcap-script"}})},n=[]},"2be6":function(s,i,t){t.d(i,"a",function(){return e});function e(n,r,a,f,l,p,d,c){var o=typeof n=="function"?n.options:n;r&&(o.render=r,o.staticRenderFns=a,o._compiled=!0),f&&(o.functional=!0),p&&(o._scopeId="data-v-"+p);var u;if(d?(u=function(h){h=h||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext,!h&&typeof __VUE_SSR_CONTEXT__!="undefined"&&(h=__VUE_SSR_CONTEXT__),l&&l.call(this,h),h&&h._registeredComponents&&h._registeredComponents.add(d)},o._ssrRegister=u):l&&(u=c?function(){l.call(this,(o.functional?this.parent:this).$root.$options.shadowRoot)}:l),u)if(o.functional){o._injectStyles=u;var m=o.render;o.render=function(C,y){return u.call(y),m(C,y)}}else{var v=o.beforeCreate;o.beforeCreate=v?[].concat(v,u):[u]}return{exports:n,options:o}}},"407a":function(s,i,t){t.r(i);var e=t("1e53"),n=t("fa1f");for(var r in n)["default"].indexOf(r)<0&&function(l){t.d(i,l,function(){return n[l]})}(r);var a=t("2be6"),f=Object(a.a)(n.default,e.a,e.b,!1,null,null,null);i.default=f.exports},4141:function(s,i){(function(t){var e="currentScript",n=t.getElementsByTagName("script");e in t||Object.defineProperty(t,e,{get:function(){try{throw new Error}catch(f){var r,a=(/.*at [^\(]*\((.*):.+:.+\)$/ig.exec(f.stack)||[!1])[1];for(r in n)if(n[r].src==a||n[r].readyState=="interactive")return n[r];return null}}})})(document)},"56d7":function(s,i,t){(function(e){Object.defineProperty(i,"__esModule",{value:!0}),i.default=void 0,i.install=a;var n=r(t("407a"));function r(d){return d&&d.__esModule?d:{default:d}}function a(d){a.installed||(a.installed=!0,d.component("vuehcaptcha",n.default),d.component("VueHcaptcha",n.default))}var f={install:a},l=null;typeof window!="undefined"?l=window.Vue:typeof e!="undefined"&&(l=e.Vue),l&&l.use(f);var p=n.default;i.default=p}).call(this,t("7d15"))},"7d15":function(s,i){var t;t=function(){return this}();try{t=t||new Function("return this")()}catch(e){typeof window=="object"&&(t=window)}s.exports=t},cada:function(s,i,t){Object.defineProperty(i,"__esModule",{value:!0}),i.default=void 0;var e=t("dfcd"),n={name:"VueHcaptcha",props:{sitekey:{type:String,required:!0},theme:{type:String,default:void 0},size:{type:String,default:void 0},tabindex:{type:String,default:void 0},language:{type:String,default:void 0},reCaptchaCompat:{type:Boolean,default:!0},challengeContainer:{type:String,default:void 0},rqdata:{type:String,default:void 0},sentry:{type:Boolean,default:!0},apiEndpoint:{type:String,default:"https://hcaptcha.com/1/api.js"},endpoint:{type:String,default:void 0},reportapi:{type:String,default:void 0},assethost:{type:String,default:void 0},imghost:{type:String,default:void 0}},data:function(){return{widgetId:null,hcaptcha:null,renderedCb:null}},mounted:function(){return(0,e.loadApiEndpointIfNotAlready)(this.$props).then(this.onApiLoaded).catch(this.onError)},unmounted:function(){this.teardown()},destroyed:function(){this.teardown()},methods:{teardown:function(){this.widgetId&&(this.hcaptcha.reset(this.widgetId),this.hcaptcha.remove(this.widgetId))},onApiLoaded:function(){this.hcaptcha=window.hcaptcha;var a={sitekey:this.sitekey,theme:this.theme,size:this.size,tabindex:this.tabindex,callback:this.onVerify,"expired-callback":this.onExpired,"chalexpired-callback":this.onChallengeExpired,"error-callback":this.onError,"open-callback":this.onOpen,"close-callback":this.onClose};this.challengeContainer&&(a["challenge-container"]=this.challengeContainer),this.widgetId=this.hcaptcha.render(this.$el,a),this.rqdata&&this.hcaptcha.setData(this.widgetId,{rqdata:this.rqdata}),this.onRendered()},execute:function(){var a=this;this.widgetId?(this.hcaptcha.execute(this.widgetId),this.onExecuted()):this.renderedCb=function(){a.renderedCb=null,a.execute()}},reset:function(){this.widgetId?(this.hcaptcha.reset(this.widgetId),this.onReset()):this.$emit("error","Element is not rendered yet and thus cannot reset it. Wait for `rendered` event to safely call reset.")},onRendered:function(){this.$emit("rendered"),this.renderedCb&&this.renderedCb()},onExecuted:function(){this.$emit("executed")},onReset:function(){this.$emit("reset")},onError:function(a){this.$emit("error",a),this.reset()},onVerify:function(){var a=this.hcaptcha.getResponse(this.widgetId),f=this.hcaptcha.getRespKey(this.widgetId);this.$emit("verify",a,f)},onExpired:function(){this.$emit("expired")},onChallengeExpired:function(){this.$emit("challengeExpired")},onOpen:function(){this.$emit("opened")},onClose:function(){this.$emit("closed")}}};i.default=n},dfcd:function(s,i,t){Object.defineProperty(i,"__esModule",{value:!0}),i.SCRIPT_ID=void 0,i.addQueryParamIfDefined=d,i.getScriptSrc=p,i.loadApiEndpointIfNotAlready=l;var e="hcaptcha-api-script-id";i.SCRIPT_ID=e;var n="_hcaptchaOnLoad",r,a,f=new Promise(function(c,o){r=c,a=o});function l(c){if(window.hcaptcha)return r(),f;if(document.getElementById(e))return f;window[n]=r;var o=p(c),u=document.createElement("script");return u.id=e,u.src=o,u.async=!0,u.defer=!0,u.onerror=function(m){console.error("Failed to load api: "+o,m),a("Failed to load api.js")},document.head.appendChild(u),f}function p(c){var o=c.apiEndpoint;return o=d(o,"render","explicit"),o=d(o,"onload",n),o=d(o,"recaptchacompat",c.reCaptchaCompat===!1?"off":null),o=d(o,"hl",c.language),o=d(o,"sentry",c.sentry),o=d(o,"endpoint",c.endpoint),o=d(o,"assethost",c.assethost),o=d(o,"imghost",c.imghost),o=d(o,"reportapi",c.reportapi),o}function d(c,o,u){if(u!=null){var m=c.includes("?")?"&":"?";return c+m+o+"="+encodeURIComponent(u)}return c}},e754:function(s,i,t){if(typeof window!="undefined"){t("4141");var e;(e=window.document.currentScript)&&(e=e.src.match(/(.+\/)[^/]+\.js(\?.*)?$/))&&(t.p=e[1])}},fa1f:function(s,i,t){t.r(i);var e=t("cada"),n=t.n(e);for(var r in e)["default"].indexOf(r)<0&&function(a){t.d(i,a,function(){return e[a]})}(r);i.default=n.a}})})(g);var E=g.exports;const S=O(E),P=j({__proto__:null,default:S},[E]);export{P as v};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
