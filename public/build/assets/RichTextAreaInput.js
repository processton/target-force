import{c as Ne,g as Se,n as Pe,i as Le}from"./app.js";var Ee={exports:{}};/*!
 * Quill Editor v1.3.7
 * https://quilljs.com/
 * Copyright (c) 2014, Jason Chen
 * Copyright (c) 2013, salesforce.com
 */(function(G,z){(function(d,h){G.exports=h()})(typeof self!="undefined"?self:Ne,function(){return function(P){var d={};function h(x){if(d[x])return d[x].exports;var k=d[x]={i:x,l:!1,exports:{}};return P[x].call(k.exports,k,k.exports,h),k.l=!0,k.exports}return h.m=P,h.c=d,h.d=function(x,k,b){h.o(x,k)||Object.defineProperty(x,k,{configurable:!1,enumerable:!0,get:b})},h.n=function(x){var k=x&&x.__esModule?function(){return x.default}:function(){return x};return h.d(k,"a",k),k},h.o=function(x,k){return Object.prototype.hasOwnProperty.call(x,k)},h.p="",h(h.s=109)}([function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0});var x=h(17),k=h(18),b=h(19),y=h(45),p=h(46),s=h(47),i=h(48),e=h(49),t=h(12),u=h(32),o=h(33),a=h(31),r=h(1),l={Scope:r.Scope,create:r.create,find:r.find,query:r.query,register:r.register,Container:x.default,Format:k.default,Leaf:b.default,Embed:i.default,Scroll:y.default,Block:s.default,Inline:p.default,Text:e.default,Attributor:{Attribute:t.default,Class:u.default,Style:o.default,Store:a.default}};d.default=l},function(P,d,h){var x=this&&this.__extends||function(){var a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(r,l){r.__proto__=l}||function(r,l){for(var f in l)l.hasOwnProperty(f)&&(r[f]=l[f])};return function(r,l){a(r,l);function f(){this.constructor=r}r.prototype=l===null?Object.create(l):(f.prototype=l.prototype,new f)}}();Object.defineProperty(d,"__esModule",{value:!0});var k=function(a){x(r,a);function r(l){var f=this;return l="[Parchment] "+l,f=a.call(this,l)||this,f.message=l,f.name=f.constructor.name,f}return r}(Error);d.ParchmentError=k;var b={},y={},p={},s={};d.DATA_KEY="__blot";var i;(function(a){a[a.TYPE=3]="TYPE",a[a.LEVEL=12]="LEVEL",a[a.ATTRIBUTE=13]="ATTRIBUTE",a[a.BLOT=14]="BLOT",a[a.INLINE=7]="INLINE",a[a.BLOCK=11]="BLOCK",a[a.BLOCK_BLOT=10]="BLOCK_BLOT",a[a.INLINE_BLOT=6]="INLINE_BLOT",a[a.BLOCK_ATTRIBUTE=9]="BLOCK_ATTRIBUTE",a[a.INLINE_ATTRIBUTE=5]="INLINE_ATTRIBUTE",a[a.ANY=15]="ANY"})(i=d.Scope||(d.Scope={}));function e(a,r){var l=u(a);if(l==null)throw new k("Unable to create "+a+" blot");var f=l,n=a instanceof Node||a.nodeType===Node.TEXT_NODE?a:f.create(r);return new f(n,r)}d.create=e;function t(a,r){return r===void 0&&(r=!1),a==null?null:a[d.DATA_KEY]!=null?a[d.DATA_KEY].blot:r?t(a.parentNode,r):null}d.find=t;function u(a,r){r===void 0&&(r=i.ANY);var l;if(typeof a=="string")l=s[a]||b[a];else if(a instanceof Text||a.nodeType===Node.TEXT_NODE)l=s.text;else if(typeof a=="number")a&i.LEVEL&i.BLOCK?l=s.block:a&i.LEVEL&i.INLINE&&(l=s.inline);else if(a instanceof HTMLElement){var f=(a.getAttribute("class")||"").split(/\s+/);for(var n in f)if(l=y[f[n]],l)break;l=l||p[a.tagName]}return l==null?null:r&i.LEVEL&l.scope&&r&i.TYPE&l.scope?l:null}d.query=u;function o(){for(var a=[],r=0;r<arguments.length;r++)a[r]=arguments[r];if(a.length>1)return a.map(function(n){return o(n)});var l=a[0];if(typeof l.blotName!="string"&&typeof l.attrName!="string")throw new k("Invalid definition");if(l.blotName==="abstract")throw new k("Cannot register abstract class");if(s[l.blotName||l.attrName]=l,typeof l.keyName=="string")b[l.keyName]=l;else if(l.className!=null&&(y[l.className]=l),l.tagName!=null){Array.isArray(l.tagName)?l.tagName=l.tagName.map(function(n){return n.toUpperCase()}):l.tagName=l.tagName.toUpperCase();var f=Array.isArray(l.tagName)?l.tagName:[l.tagName];f.forEach(function(n){(p[n]==null||l.className==null)&&(p[n]=l)})}return l}d.register=o},function(P,d,h){var x=h(51),k=h(11),b=h(3),y=h(20),p=String.fromCharCode(0),s=function(i){Array.isArray(i)?this.ops=i:i!=null&&Array.isArray(i.ops)?this.ops=i.ops:this.ops=[]};s.prototype.insert=function(i,e){var t={};return i.length===0?this:(t.insert=i,e!=null&&typeof e=="object"&&Object.keys(e).length>0&&(t.attributes=e),this.push(t))},s.prototype.delete=function(i){return i<=0?this:this.push({delete:i})},s.prototype.retain=function(i,e){if(i<=0)return this;var t={retain:i};return e!=null&&typeof e=="object"&&Object.keys(e).length>0&&(t.attributes=e),this.push(t)},s.prototype.push=function(i){var e=this.ops.length,t=this.ops[e-1];if(i=b(!0,{},i),typeof t=="object"){if(typeof i.delete=="number"&&typeof t.delete=="number")return this.ops[e-1]={delete:t.delete+i.delete},this;if(typeof t.delete=="number"&&i.insert!=null&&(e-=1,t=this.ops[e-1],typeof t!="object"))return this.ops.unshift(i),this;if(k(i.attributes,t.attributes)){if(typeof i.insert=="string"&&typeof t.insert=="string")return this.ops[e-1]={insert:t.insert+i.insert},typeof i.attributes=="object"&&(this.ops[e-1].attributes=i.attributes),this;if(typeof i.retain=="number"&&typeof t.retain=="number")return this.ops[e-1]={retain:t.retain+i.retain},typeof i.attributes=="object"&&(this.ops[e-1].attributes=i.attributes),this}}return e===this.ops.length?this.ops.push(i):this.ops.splice(e,0,i),this},s.prototype.chop=function(){var i=this.ops[this.ops.length-1];return i&&i.retain&&!i.attributes&&this.ops.pop(),this},s.prototype.filter=function(i){return this.ops.filter(i)},s.prototype.forEach=function(i){this.ops.forEach(i)},s.prototype.map=function(i){return this.ops.map(i)},s.prototype.partition=function(i){var e=[],t=[];return this.forEach(function(u){var o=i(u)?e:t;o.push(u)}),[e,t]},s.prototype.reduce=function(i,e){return this.ops.reduce(i,e)},s.prototype.changeLength=function(){return this.reduce(function(i,e){return e.insert?i+y.length(e):e.delete?i-e.delete:i},0)},s.prototype.length=function(){return this.reduce(function(i,e){return i+y.length(e)},0)},s.prototype.slice=function(i,e){i=i||0,typeof e!="number"&&(e=1/0);for(var t=[],u=y.iterator(this.ops),o=0;o<e&&u.hasNext();){var a;o<i?a=u.next(i-o):(a=u.next(e-o),t.push(a)),o+=y.length(a)}return new s(t)},s.prototype.compose=function(i){var e=y.iterator(this.ops),t=y.iterator(i.ops),u=[],o=t.peek();if(o!=null&&typeof o.retain=="number"&&o.attributes==null){for(var a=o.retain;e.peekType()==="insert"&&e.peekLength()<=a;)a-=e.peekLength(),u.push(e.next());o.retain-a>0&&t.next(o.retain-a)}for(var r=new s(u);e.hasNext()||t.hasNext();)if(t.peekType()==="insert")r.push(t.next());else if(e.peekType()==="delete")r.push(e.next());else{var l=Math.min(e.peekLength(),t.peekLength()),f=e.next(l),n=t.next(l);if(typeof n.retain=="number"){var c={};typeof f.retain=="number"?c.retain=l:c.insert=f.insert;var E=y.attributes.compose(f.attributes,n.attributes,typeof f.retain=="number");if(E&&(c.attributes=E),r.push(c),!t.hasNext()&&k(r.ops[r.ops.length-1],c)){var q=new s(e.rest());return r.concat(q).chop()}}else typeof n.delete=="number"&&typeof f.retain=="number"&&r.push(n)}return r.chop()},s.prototype.concat=function(i){var e=new s(this.ops.slice());return i.ops.length>0&&(e.push(i.ops[0]),e.ops=e.ops.concat(i.ops.slice(1))),e},s.prototype.diff=function(i,e){if(this.ops===i.ops)return new s;var t=[this,i].map(function(l){return l.map(function(f){if(f.insert!=null)return typeof f.insert=="string"?f.insert:p;var n=l===i?"on":"with";throw new Error("diff() called "+n+" non-document")}).join("")}),u=new s,o=x(t[0],t[1],e),a=y.iterator(this.ops),r=y.iterator(i.ops);return o.forEach(function(l){for(var f=l[1].length;f>0;){var n=0;switch(l[0]){case x.INSERT:n=Math.min(r.peekLength(),f),u.push(r.next(n));break;case x.DELETE:n=Math.min(f,a.peekLength()),a.next(n),u.delete(n);break;case x.EQUAL:n=Math.min(a.peekLength(),r.peekLength(),f);var c=a.next(n),E=r.next(n);k(c.insert,E.insert)?u.retain(n,y.attributes.diff(c.attributes,E.attributes)):u.push(E).delete(n);break}f-=n}}),u.chop()},s.prototype.eachLine=function(i,e){e=e||`
`;for(var t=y.iterator(this.ops),u=new s,o=0;t.hasNext();){if(t.peekType()!=="insert")return;var a=t.peek(),r=y.length(a)-t.peekLength(),l=typeof a.insert=="string"?a.insert.indexOf(e,r)-r:-1;if(l<0)u.push(t.next());else if(l>0)u.push(t.next(l));else{if(i(u,t.next(1).attributes||{},o)===!1)return;o+=1,u=new s}}u.length()>0&&i(u,{},o)},s.prototype.transform=function(i,e){if(e=!!e,typeof i=="number")return this.transformPosition(i,e);for(var t=y.iterator(this.ops),u=y.iterator(i.ops),o=new s;t.hasNext()||u.hasNext();)if(t.peekType()==="insert"&&(e||u.peekType()!=="insert"))o.retain(y.length(t.next()));else if(u.peekType()==="insert")o.push(u.next());else{var a=Math.min(t.peekLength(),u.peekLength()),r=t.next(a),l=u.next(a);if(r.delete)continue;l.delete?o.push(l):o.retain(a,y.attributes.transform(r.attributes,l.attributes,e))}return o.chop()},s.prototype.transformPosition=function(i,e){e=!!e;for(var t=y.iterator(this.ops),u=0;t.hasNext()&&u<=i;){var o=t.peekLength(),a=t.peekType();if(t.next(),a==="delete"){i-=Math.min(o,i-u);continue}else a==="insert"&&(u<i||!e)&&(i+=o);u+=o}return i},P.exports=s},function(P,d){var h=Object.prototype.hasOwnProperty,x=Object.prototype.toString,k=Object.defineProperty,b=Object.getOwnPropertyDescriptor,y=function(t){return typeof Array.isArray=="function"?Array.isArray(t):x.call(t)==="[object Array]"},p=function(t){if(!t||x.call(t)!=="[object Object]")return!1;var u=h.call(t,"constructor"),o=t.constructor&&t.constructor.prototype&&h.call(t.constructor.prototype,"isPrototypeOf");if(t.constructor&&!u&&!o)return!1;var a;for(a in t);return typeof a=="undefined"||h.call(t,a)},s=function(t,u){k&&u.name==="__proto__"?k(t,u.name,{enumerable:!0,configurable:!0,value:u.newValue,writable:!0}):t[u.name]=u.newValue},i=function(t,u){if(u==="__proto__")if(h.call(t,u)){if(b)return b(t,u).value}else return;return t[u]};P.exports=function e(){var t,u,o,a,r,l,f=arguments[0],n=1,c=arguments.length,E=!1;for(typeof f=="boolean"&&(E=f,f=arguments[1]||{},n=2),(f==null||typeof f!="object"&&typeof f!="function")&&(f={});n<c;++n)if(t=arguments[n],t!=null)for(u in t)o=i(f,u),a=i(t,u),f!==a&&(E&&a&&(p(a)||(r=y(a)))?(r?(r=!1,l=o&&y(o)?o:[]):l=o&&p(o)?o:{},s(f,{name:u,newValue:e(E,l,a)})):typeof a!="undefined"&&s(f,{name:u,newValue:a}));return f}},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0}),d.default=d.BlockEmbed=d.bubbleFormats=void 0;var x=function(){function v(m,w){for(var T=0;T<w.length;T++){var R=w[T];R.enumerable=R.enumerable||!1,R.configurable=!0,"value"in R&&(R.writable=!0),Object.defineProperty(m,R.key,R)}}return function(m,w,T){return w&&v(m.prototype,w),T&&v(m,T),m}}(),k=function v(m,w,T){m===null&&(m=Function.prototype);var R=Object.getOwnPropertyDescriptor(m,w);if(R===void 0){var B=Object.getPrototypeOf(m);return B===null?void 0:v(B,w,T)}else{if("value"in R)return R.value;var C=R.get;return C===void 0?void 0:C.call(T)}},b=h(3),y=f(b),p=h(2),s=f(p),i=h(0),e=f(i),t=h(16),u=f(t),o=h(6),a=f(o),r=h(7),l=f(r);function f(v){return v&&v.__esModule?v:{default:v}}function n(v,m){if(!(v instanceof m))throw new TypeError("Cannot call a class as a function")}function c(v,m){if(!v)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return m&&(typeof m=="object"||typeof m=="function")?m:v}function E(v,m){if(typeof m!="function"&&m!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof m);v.prototype=Object.create(m&&m.prototype,{constructor:{value:v,enumerable:!1,writable:!0,configurable:!0}}),m&&(Object.setPrototypeOf?Object.setPrototypeOf(v,m):v.__proto__=m)}var q=1,_=function(v){E(m,v);function m(){return n(this,m),c(this,(m.__proto__||Object.getPrototypeOf(m)).apply(this,arguments))}return x(m,[{key:"attach",value:function(){k(m.prototype.__proto__||Object.getPrototypeOf(m.prototype),"attach",this).call(this),this.attributes=new e.default.Attributor.Store(this.domNode)}},{key:"delta",value:function(){return new s.default().insert(this.value(),(0,y.default)(this.formats(),this.attributes.values()))}},{key:"format",value:function(T,R){var B=e.default.query(T,e.default.Scope.BLOCK_ATTRIBUTE);B!=null&&this.attributes.attribute(B,R)}},{key:"formatAt",value:function(T,R,B,C){this.format(B,C)}},{key:"insertAt",value:function(T,R,B){if(typeof R=="string"&&R.endsWith(`
`)){var C=e.default.create(A.blotName);this.parent.insertBefore(C,T===0?this:this.next),C.insertAt(0,R.slice(0,-1))}else k(m.prototype.__proto__||Object.getPrototypeOf(m.prototype),"insertAt",this).call(this,T,R,B)}}]),m}(e.default.Embed);_.scope=e.default.Scope.BLOCK_BLOT;var A=function(v){E(m,v);function m(w){n(this,m);var T=c(this,(m.__proto__||Object.getPrototypeOf(m)).call(this,w));return T.cache={},T}return x(m,[{key:"delta",value:function(){return this.cache.delta==null&&(this.cache.delta=this.descendants(e.default.Leaf).reduce(function(T,R){return R.length()===0?T:T.insert(R.value(),g(R))},new s.default).insert(`
`,g(this))),this.cache.delta}},{key:"deleteAt",value:function(T,R){k(m.prototype.__proto__||Object.getPrototypeOf(m.prototype),"deleteAt",this).call(this,T,R),this.cache={}}},{key:"formatAt",value:function(T,R,B,C){R<=0||(e.default.query(B,e.default.Scope.BLOCK)?T+R===this.length()&&this.format(B,C):k(m.prototype.__proto__||Object.getPrototypeOf(m.prototype),"formatAt",this).call(this,T,Math.min(R,this.length()-T-1),B,C),this.cache={})}},{key:"insertAt",value:function(T,R,B){if(B!=null)return k(m.prototype.__proto__||Object.getPrototypeOf(m.prototype),"insertAt",this).call(this,T,R,B);if(R.length!==0){var C=R.split(`
`),W=C.shift();W.length>0&&(T<this.length()-1||this.children.tail==null?k(m.prototype.__proto__||Object.getPrototypeOf(m.prototype),"insertAt",this).call(this,Math.min(T,this.length()-1),W):this.children.tail.insertAt(this.children.tail.length(),W),this.cache={});var M=this;C.reduce(function(I,O){return M=M.split(I,!0),M.insertAt(0,O),O.length},T+W.length)}}},{key:"insertBefore",value:function(T,R){var B=this.children.head;k(m.prototype.__proto__||Object.getPrototypeOf(m.prototype),"insertBefore",this).call(this,T,R),B instanceof u.default&&B.remove(),this.cache={}}},{key:"length",value:function(){return this.cache.length==null&&(this.cache.length=k(m.prototype.__proto__||Object.getPrototypeOf(m.prototype),"length",this).call(this)+q),this.cache.length}},{key:"moveChildren",value:function(T,R){k(m.prototype.__proto__||Object.getPrototypeOf(m.prototype),"moveChildren",this).call(this,T,R),this.cache={}}},{key:"optimize",value:function(T){k(m.prototype.__proto__||Object.getPrototypeOf(m.prototype),"optimize",this).call(this,T),this.cache={}}},{key:"path",value:function(T){return k(m.prototype.__proto__||Object.getPrototypeOf(m.prototype),"path",this).call(this,T,!0)}},{key:"removeChild",value:function(T){k(m.prototype.__proto__||Object.getPrototypeOf(m.prototype),"removeChild",this).call(this,T),this.cache={}}},{key:"split",value:function(T){var R=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1;if(R&&(T===0||T>=this.length()-q)){var B=this.clone();return T===0?(this.parent.insertBefore(B,this),this):(this.parent.insertBefore(B,this.next),B)}else{var C=k(m.prototype.__proto__||Object.getPrototypeOf(m.prototype),"split",this).call(this,T,R);return this.cache={},C}}}]),m}(e.default.Block);A.blotName="block",A.tagName="P",A.defaultChild="break",A.allowedChildren=[a.default,e.default.Embed,l.default];function g(v){var m=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};return v==null||(typeof v.formats=="function"&&(m=(0,y.default)(m,v.formats())),v.parent==null||v.parent.blotName=="scroll"||v.parent.statics.scope!==v.statics.scope)?m:g(v.parent,m)}d.bubbleFormats=g,d.BlockEmbed=_,d.default=A},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0}),d.default=d.overload=d.expandConfig=void 0;var x=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(M){return typeof M}:function(M){return M&&typeof Symbol=="function"&&M.constructor===Symbol&&M!==Symbol.prototype?"symbol":typeof M},k=function(){function M(I,O){var S=[],L=!0,F=!1,D=void 0;try{for(var N=I[Symbol.iterator](),j;!(L=(j=N.next()).done)&&(S.push(j.value),!(O&&S.length===O));L=!0);}catch(H){F=!0,D=H}finally{try{!L&&N.return&&N.return()}finally{if(F)throw D}}return S}return function(I,O){if(Array.isArray(I))return I;if(Symbol.iterator in Object(I))return M(I,O);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),b=function(){function M(I,O){for(var S=0;S<O.length;S++){var L=O[S];L.enumerable=L.enumerable||!1,L.configurable=!0,"value"in L&&(L.writable=!0),Object.defineProperty(I,L.key,L)}}return function(I,O,S){return O&&M(I.prototype,O),S&&M(I,S),I}}();h(50);var y=h(2),p=g(y),s=h(14),i=g(s),e=h(8),t=g(e),u=h(9),o=g(u),a=h(0),r=g(a),l=h(15),f=g(l),n=h(3),c=g(n),E=h(10),q=g(E),_=h(34),A=g(_);function g(M){return M&&M.__esModule?M:{default:M}}function v(M,I,O){return I in M?Object.defineProperty(M,I,{value:O,enumerable:!0,configurable:!0,writable:!0}):M[I]=O,M}function m(M,I){if(!(M instanceof I))throw new TypeError("Cannot call a class as a function")}var w=(0,q.default)("quill"),T=function(){b(M,null,[{key:"debug",value:function(O){O===!0&&(O="log"),q.default.level(O)}},{key:"find",value:function(O){return O.__quill||r.default.find(O)}},{key:"import",value:function(O){return this.imports[O]==null&&w.error("Cannot import "+O+". Are you sure it was registered?"),this.imports[O]}},{key:"register",value:function(O,S){var L=this,F=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!1;if(typeof O!="string"){var D=O.attrName||O.blotName;typeof D=="string"?this.register("formats/"+D,O,S):Object.keys(O).forEach(function(N){L.register(N,O[N],S)})}else this.imports[O]!=null&&!F&&w.warn("Overwriting "+O+" with",S),this.imports[O]=S,(O.startsWith("blots/")||O.startsWith("formats/"))&&S.blotName!=="abstract"?r.default.register(S):O.startsWith("modules")&&typeof S.register=="function"&&S.register()}}]);function M(I){var O=this,S=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};if(m(this,M),this.options=R(I,S),this.container=this.options.container,this.container==null)return w.error("Invalid Quill container",I);this.options.debug&&M.debug(this.options.debug);var L=this.container.innerHTML.trim();this.container.classList.add("ql-container"),this.container.innerHTML="",this.container.__quill=this,this.root=this.addContainer("ql-editor"),this.root.classList.add("ql-blank"),this.root.setAttribute("data-gramm",!1),this.scrollingContainer=this.options.scrollingContainer||this.root,this.emitter=new t.default,this.scroll=r.default.create(this.root,{emitter:this.emitter,whitelist:this.options.formats}),this.editor=new i.default(this.scroll),this.selection=new f.default(this.scroll,this.emitter),this.theme=new this.options.theme(this,this.options),this.keyboard=this.theme.addModule("keyboard"),this.clipboard=this.theme.addModule("clipboard"),this.history=this.theme.addModule("history"),this.theme.init(),this.emitter.on(t.default.events.EDITOR_CHANGE,function(D){D===t.default.events.TEXT_CHANGE&&O.root.classList.toggle("ql-blank",O.editor.isBlank())}),this.emitter.on(t.default.events.SCROLL_UPDATE,function(D,N){var j=O.selection.lastRange,H=j&&j.length===0?j.index:void 0;B.call(O,function(){return O.editor.update(null,N,H)},D)});var F=this.clipboard.convert(`<div class='ql-editor' style="white-space: normal;">`+L+"<p><br></p></div>");this.setContents(F),this.history.clear(),this.options.placeholder&&this.root.setAttribute("data-placeholder",this.options.placeholder),this.options.readOnly&&this.disable()}return b(M,[{key:"addContainer",value:function(O){var S=arguments.length>1&&arguments[1]!==void 0?arguments[1]:null;if(typeof O=="string"){var L=O;O=document.createElement("div"),O.classList.add(L)}return this.container.insertBefore(O,S),O}},{key:"blur",value:function(){this.selection.setRange(null)}},{key:"deleteText",value:function(O,S,L){var F=this,D=C(O,S,L),N=k(D,4);return O=N[0],S=N[1],L=N[3],B.call(this,function(){return F.editor.deleteText(O,S)},L,O,-1*S)}},{key:"disable",value:function(){this.enable(!1)}},{key:"enable",value:function(){var O=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!0;this.scroll.enable(O),this.container.classList.toggle("ql-disabled",!O)}},{key:"focus",value:function(){var O=this.scrollingContainer.scrollTop;this.selection.focus(),this.scrollingContainer.scrollTop=O,this.scrollIntoView()}},{key:"format",value:function(O,S){var L=this,F=arguments.length>2&&arguments[2]!==void 0?arguments[2]:t.default.sources.API;return B.call(this,function(){var D=L.getSelection(!0),N=new p.default;if(D==null)return N;if(r.default.query(O,r.default.Scope.BLOCK))N=L.editor.formatLine(D.index,D.length,v({},O,S));else{if(D.length===0)return L.selection.format(O,S),N;N=L.editor.formatText(D.index,D.length,v({},O,S))}return L.setSelection(D,t.default.sources.SILENT),N},F)}},{key:"formatLine",value:function(O,S,L,F,D){var N=this,j=void 0,H=C(O,S,L,F,D),U=k(H,4);return O=U[0],S=U[1],j=U[2],D=U[3],B.call(this,function(){return N.editor.formatLine(O,S,j)},D,O,0)}},{key:"formatText",value:function(O,S,L,F,D){var N=this,j=void 0,H=C(O,S,L,F,D),U=k(H,4);return O=U[0],S=U[1],j=U[2],D=U[3],B.call(this,function(){return N.editor.formatText(O,S,j)},D,O,0)}},{key:"getBounds",value:function(O){var S=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0,L=void 0;typeof O=="number"?L=this.selection.getBounds(O,S):L=this.selection.getBounds(O.index,O.length);var F=this.container.getBoundingClientRect();return{bottom:L.bottom-F.top,height:L.height,left:L.left-F.left,right:L.right-F.left,top:L.top-F.top,width:L.width}}},{key:"getContents",value:function(){var O=arguments.length>0&&arguments[0]!==void 0?arguments[0]:0,S=arguments.length>1&&arguments[1]!==void 0?arguments[1]:this.getLength()-O,L=C(O,S),F=k(L,2);return O=F[0],S=F[1],this.editor.getContents(O,S)}},{key:"getFormat",value:function(){var O=arguments.length>0&&arguments[0]!==void 0?arguments[0]:this.getSelection(!0),S=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0;return typeof O=="number"?this.editor.getFormat(O,S):this.editor.getFormat(O.index,O.length)}},{key:"getIndex",value:function(O){return O.offset(this.scroll)}},{key:"getLength",value:function(){return this.scroll.length()}},{key:"getLeaf",value:function(O){return this.scroll.leaf(O)}},{key:"getLine",value:function(O){return this.scroll.line(O)}},{key:"getLines",value:function(){var O=arguments.length>0&&arguments[0]!==void 0?arguments[0]:0,S=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Number.MAX_VALUE;return typeof O!="number"?this.scroll.lines(O.index,O.length):this.scroll.lines(O,S)}},{key:"getModule",value:function(O){return this.theme.modules[O]}},{key:"getSelection",value:function(){var O=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!1;return O&&this.focus(),this.update(),this.selection.getRange()[0]}},{key:"getText",value:function(){var O=arguments.length>0&&arguments[0]!==void 0?arguments[0]:0,S=arguments.length>1&&arguments[1]!==void 0?arguments[1]:this.getLength()-O,L=C(O,S),F=k(L,2);return O=F[0],S=F[1],this.editor.getText(O,S)}},{key:"hasFocus",value:function(){return this.selection.hasFocus()}},{key:"insertEmbed",value:function(O,S,L){var F=this,D=arguments.length>3&&arguments[3]!==void 0?arguments[3]:M.sources.API;return B.call(this,function(){return F.editor.insertEmbed(O,S,L)},D,O)}},{key:"insertText",value:function(O,S,L,F,D){var N=this,j=void 0,H=C(O,0,L,F,D),U=k(H,4);return O=U[0],j=U[2],D=U[3],B.call(this,function(){return N.editor.insertText(O,S,j)},D,O,S.length)}},{key:"isEnabled",value:function(){return!this.container.classList.contains("ql-disabled")}},{key:"off",value:function(){return this.emitter.off.apply(this.emitter,arguments)}},{key:"on",value:function(){return this.emitter.on.apply(this.emitter,arguments)}},{key:"once",value:function(){return this.emitter.once.apply(this.emitter,arguments)}},{key:"pasteHTML",value:function(O,S,L){this.clipboard.dangerouslyPasteHTML(O,S,L)}},{key:"removeFormat",value:function(O,S,L){var F=this,D=C(O,S,L),N=k(D,4);return O=N[0],S=N[1],L=N[3],B.call(this,function(){return F.editor.removeFormat(O,S)},L,O)}},{key:"scrollIntoView",value:function(){this.selection.scrollIntoView(this.scrollingContainer)}},{key:"setContents",value:function(O){var S=this,L=arguments.length>1&&arguments[1]!==void 0?arguments[1]:t.default.sources.API;return B.call(this,function(){O=new p.default(O);var F=S.getLength(),D=S.editor.deleteText(0,F),N=S.editor.applyDelta(O),j=N.ops[N.ops.length-1];j!=null&&typeof j.insert=="string"&&j.insert[j.insert.length-1]===`
`&&(S.editor.deleteText(S.getLength()-1,1),N.delete(1));var H=D.compose(N);return H},L)}},{key:"setSelection",value:function(O,S,L){if(O==null)this.selection.setRange(null,S||M.sources.API);else{var F=C(O,S,L),D=k(F,4);O=D[0],S=D[1],L=D[3],this.selection.setRange(new l.Range(O,S),L),L!==t.default.sources.SILENT&&this.selection.scrollIntoView(this.scrollingContainer)}}},{key:"setText",value:function(O){var S=arguments.length>1&&arguments[1]!==void 0?arguments[1]:t.default.sources.API,L=new p.default().insert(O);return this.setContents(L,S)}},{key:"update",value:function(){var O=arguments.length>0&&arguments[0]!==void 0?arguments[0]:t.default.sources.USER,S=this.scroll.update(O);return this.selection.update(O),S}},{key:"updateContents",value:function(O){var S=this,L=arguments.length>1&&arguments[1]!==void 0?arguments[1]:t.default.sources.API;return B.call(this,function(){return O=new p.default(O),S.editor.applyDelta(O,L)},L,!0)}}]),M}();T.DEFAULTS={bounds:null,formats:null,modules:{},placeholder:"",readOnly:!1,scrollingContainer:null,strict:!0,theme:"default"},T.events=t.default.events,T.sources=t.default.sources,T.version="1.3.7",T.imports={delta:p.default,parchment:r.default,"core/module":o.default,"core/theme":A.default};function R(M,I){if(I=(0,c.default)(!0,{container:M,modules:{clipboard:!0,keyboard:!0,history:!0}},I),!I.theme||I.theme===T.DEFAULTS.theme)I.theme=A.default;else if(I.theme=T.import("themes/"+I.theme),I.theme==null)throw new Error("Invalid theme "+I.theme+". Did you register it?");var O=(0,c.default)(!0,{},I.theme.DEFAULTS);[O,I].forEach(function(F){F.modules=F.modules||{},Object.keys(F.modules).forEach(function(D){F.modules[D]===!0&&(F.modules[D]={})})});var S=Object.keys(O.modules).concat(Object.keys(I.modules)),L=S.reduce(function(F,D){var N=T.import("modules/"+D);return N==null?w.error("Cannot load "+D+" module. Are you sure you registered it?"):F[D]=N.DEFAULTS||{},F},{});return I.modules!=null&&I.modules.toolbar&&I.modules.toolbar.constructor!==Object&&(I.modules.toolbar={container:I.modules.toolbar}),I=(0,c.default)(!0,{},T.DEFAULTS,{modules:L},O,I),["bounds","container","scrollingContainer"].forEach(function(F){typeof I[F]=="string"&&(I[F]=document.querySelector(I[F]))}),I.modules=Object.keys(I.modules).reduce(function(F,D){return I.modules[D]&&(F[D]=I.modules[D]),F},{}),I}function B(M,I,O,S){if(this.options.strict&&!this.isEnabled()&&I===t.default.sources.USER)return new p.default;var L=O==null?null:this.getSelection(),F=this.editor.delta,D=M();if(L!=null&&(O===!0&&(O=L.index),S==null?L=W(L,D,I):S!==0&&(L=W(L,O,S,I)),this.setSelection(L,t.default.sources.SILENT)),D.length()>0){var N,j=[t.default.events.TEXT_CHANGE,D,F,I];if((N=this.emitter).emit.apply(N,[t.default.events.EDITOR_CHANGE].concat(j)),I!==t.default.sources.SILENT){var H;(H=this.emitter).emit.apply(H,j)}}return D}function C(M,I,O,S,L){var F={};return typeof M.index=="number"&&typeof M.length=="number"?typeof I!="number"?(L=S,S=O,O=I,I=M.length,M=M.index):(I=M.length,M=M.index):typeof I!="number"&&(L=S,S=O,O=I,I=0),(typeof O=="undefined"?"undefined":x(O))==="object"?(F=O,L=S):typeof O=="string"&&(S!=null?F[O]=S:L=O),L=L||t.default.sources.API,[M,I,F,L]}function W(M,I,O,S){if(M==null)return null;var L=void 0,F=void 0;if(I instanceof p.default){var D=[M.index,M.index+M.length].map(function(U){return I.transformPosition(U,S!==t.default.sources.USER)}),N=k(D,2);L=N[0],F=N[1]}else{var j=[M.index,M.index+M.length].map(function(U){return U<I||U===I&&S===t.default.sources.USER?U:O>=0?U+O:Math.max(I,U+O)}),H=k(j,2);L=H[0],F=H[1]}return new l.Range(L,F-L)}d.expandConfig=R,d.overload=C,d.default=T},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0});var x=function(){function a(r,l){for(var f=0;f<l.length;f++){var n=l[f];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(r,n.key,n)}}return function(r,l,f){return l&&a(r.prototype,l),f&&a(r,f),r}}(),k=function a(r,l,f){r===null&&(r=Function.prototype);var n=Object.getOwnPropertyDescriptor(r,l);if(n===void 0){var c=Object.getPrototypeOf(r);return c===null?void 0:a(c,l,f)}else{if("value"in n)return n.value;var E=n.get;return E===void 0?void 0:E.call(f)}},b=h(7),y=i(b),p=h(0),s=i(p);function i(a){return a&&a.__esModule?a:{default:a}}function e(a,r){if(!(a instanceof r))throw new TypeError("Cannot call a class as a function")}function t(a,r){if(!a)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return r&&(typeof r=="object"||typeof r=="function")?r:a}function u(a,r){if(typeof r!="function"&&r!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof r);a.prototype=Object.create(r&&r.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),r&&(Object.setPrototypeOf?Object.setPrototypeOf(a,r):a.__proto__=r)}var o=function(a){u(r,a);function r(){return e(this,r),t(this,(r.__proto__||Object.getPrototypeOf(r)).apply(this,arguments))}return x(r,[{key:"formatAt",value:function(f,n,c,E){if(r.compare(this.statics.blotName,c)<0&&s.default.query(c,s.default.Scope.BLOT)){var q=this.isolate(f,n);E&&q.wrap(c,E)}else k(r.prototype.__proto__||Object.getPrototypeOf(r.prototype),"formatAt",this).call(this,f,n,c,E)}},{key:"optimize",value:function(f){if(k(r.prototype.__proto__||Object.getPrototypeOf(r.prototype),"optimize",this).call(this,f),this.parent instanceof r&&r.compare(this.statics.blotName,this.parent.statics.blotName)>0){var n=this.parent.isolate(this.offset(),this.length());this.moveChildren(n),n.wrap(this)}}}],[{key:"compare",value:function(f,n){var c=r.order.indexOf(f),E=r.order.indexOf(n);return c>=0||E>=0?c-E:f===n?0:f<n?-1:1}}]),r}(s.default.Inline);o.allowedChildren=[o,s.default.Embed,y.default],o.order=["cursor","inline","underline","strike","italic","bold","script","link","code"],d.default=o},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0});var x=h(0),k=b(x);function b(e){return e&&e.__esModule?e:{default:e}}function y(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function p(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t&&(typeof t=="object"||typeof t=="function")?t:e}function s(e,t){if(typeof t!="function"&&t!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i=function(e){s(t,e);function t(){return y(this,t),p(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return t}(k.default.Text);d.default=i},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0});var x=function(){function l(f,n){for(var c=0;c<n.length;c++){var E=n[c];E.enumerable=E.enumerable||!1,E.configurable=!0,"value"in E&&(E.writable=!0),Object.defineProperty(f,E.key,E)}}return function(f,n,c){return n&&l(f.prototype,n),c&&l(f,c),f}}(),k=function l(f,n,c){f===null&&(f=Function.prototype);var E=Object.getOwnPropertyDescriptor(f,n);if(E===void 0){var q=Object.getPrototypeOf(f);return q===null?void 0:l(q,n,c)}else{if("value"in E)return E.value;var _=E.get;return _===void 0?void 0:_.call(c)}},b=h(54),y=i(b),p=h(10),s=i(p);function i(l){return l&&l.__esModule?l:{default:l}}function e(l,f){if(!(l instanceof f))throw new TypeError("Cannot call a class as a function")}function t(l,f){if(!l)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return f&&(typeof f=="object"||typeof f=="function")?f:l}function u(l,f){if(typeof f!="function"&&f!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof f);l.prototype=Object.create(f&&f.prototype,{constructor:{value:l,enumerable:!1,writable:!0,configurable:!0}}),f&&(Object.setPrototypeOf?Object.setPrototypeOf(l,f):l.__proto__=f)}var o=(0,s.default)("quill:events"),a=["selectionchange","mousedown","mouseup","click"];a.forEach(function(l){document.addEventListener(l,function(){for(var f=arguments.length,n=Array(f),c=0;c<f;c++)n[c]=arguments[c];[].slice.call(document.querySelectorAll(".ql-container")).forEach(function(E){if(E.__quill&&E.__quill.emitter){var q;(q=E.__quill.emitter).handleDOM.apply(q,n)}})})});var r=function(l){u(f,l);function f(){e(this,f);var n=t(this,(f.__proto__||Object.getPrototypeOf(f)).call(this));return n.listeners={},n.on("error",o.error),n}return x(f,[{key:"emit",value:function(){o.log.apply(o,arguments),k(f.prototype.__proto__||Object.getPrototypeOf(f.prototype),"emit",this).apply(this,arguments)}},{key:"handleDOM",value:function(c){for(var E=arguments.length,q=Array(E>1?E-1:0),_=1;_<E;_++)q[_-1]=arguments[_];(this.listeners[c.type]||[]).forEach(function(A){var g=A.node,v=A.handler;(c.target===g||g.contains(c.target))&&v.apply(void 0,[c].concat(q))})}},{key:"listenDOM",value:function(c,E,q){this.listeners[c]||(this.listeners[c]=[]),this.listeners[c].push({node:E,handler:q})}}]),f}(y.default);r.events={EDITOR_CHANGE:"editor-change",SCROLL_BEFORE_UPDATE:"scroll-before-update",SCROLL_OPTIMIZE:"scroll-optimize",SCROLL_UPDATE:"scroll-update",SELECTION_CHANGE:"selection-change",TEXT_CHANGE:"text-change"},r.sources={API:"api",SILENT:"silent",USER:"user"},d.default=r},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0});function x(b,y){if(!(b instanceof y))throw new TypeError("Cannot call a class as a function")}var k=function b(y){var p=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};x(this,b),this.quill=y,this.options=p};k.DEFAULTS={},d.default=k},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0});var x=["error","warn","log","info"],k="warn";function b(p){if(x.indexOf(p)<=x.indexOf(k)){for(var s,i=arguments.length,e=Array(i>1?i-1:0),t=1;t<i;t++)e[t-1]=arguments[t];(s=console)[p].apply(s,e)}}function y(p){return x.reduce(function(s,i){return s[i]=b.bind(console,i,p),s},{})}b.level=y.level=function(p){k=p},d.default=y},function(P,d,h){var x=Array.prototype.slice,k=h(52),b=h(53),y=P.exports=function(e,t,u){return u||(u={}),e===t?!0:e instanceof Date&&t instanceof Date?e.getTime()===t.getTime():!e||!t||typeof e!="object"&&typeof t!="object"?u.strict?e===t:e==t:i(e,t,u)};function p(e){return e==null}function s(e){return!(!e||typeof e!="object"||typeof e.length!="number"||typeof e.copy!="function"||typeof e.slice!="function"||e.length>0&&typeof e[0]!="number")}function i(e,t,u){var o,a;if(p(e)||p(t)||e.prototype!==t.prototype)return!1;if(b(e))return b(t)?(e=x.call(e),t=x.call(t),y(e,t,u)):!1;if(s(e)){if(!s(t)||e.length!==t.length)return!1;for(o=0;o<e.length;o++)if(e[o]!==t[o])return!1;return!0}try{var r=k(e),l=k(t)}catch(f){return!1}if(r.length!=l.length)return!1;for(r.sort(),l.sort(),o=r.length-1;o>=0;o--)if(r[o]!=l[o])return!1;for(o=r.length-1;o>=0;o--)if(a=r[o],!y(e[a],t[a],u))return!1;return typeof e==typeof t}},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0});var x=h(1),k=function(){function b(y,p,s){s===void 0&&(s={}),this.attrName=y,this.keyName=p;var i=x.Scope.TYPE&x.Scope.ATTRIBUTE;s.scope!=null?this.scope=s.scope&x.Scope.LEVEL|i:this.scope=x.Scope.ATTRIBUTE,s.whitelist!=null&&(this.whitelist=s.whitelist)}return b.keys=function(y){return[].map.call(y.attributes,function(p){return p.name})},b.prototype.add=function(y,p){return this.canAdd(y,p)?(y.setAttribute(this.keyName,p),!0):!1},b.prototype.canAdd=function(y,p){var s=x.query(y,x.Scope.BLOT&(this.scope|x.Scope.TYPE));return s==null?!1:this.whitelist==null?!0:typeof p=="string"?this.whitelist.indexOf(p.replace(/["']/g,""))>-1:this.whitelist.indexOf(p)>-1},b.prototype.remove=function(y){y.removeAttribute(this.keyName)},b.prototype.value=function(y){var p=y.getAttribute(this.keyName);return this.canAdd(y,p)&&p?p:""},b}();d.default=k},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0}),d.default=d.Code=void 0;var x=function(){function _(A,g){var v=[],m=!0,w=!1,T=void 0;try{for(var R=A[Symbol.iterator](),B;!(m=(B=R.next()).done)&&(v.push(B.value),!(g&&v.length===g));m=!0);}catch(C){w=!0,T=C}finally{try{!m&&R.return&&R.return()}finally{if(w)throw T}}return v}return function(A,g){if(Array.isArray(A))return A;if(Symbol.iterator in Object(A))return _(A,g);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),k=function(){function _(A,g){for(var v=0;v<g.length;v++){var m=g[v];m.enumerable=m.enumerable||!1,m.configurable=!0,"value"in m&&(m.writable=!0),Object.defineProperty(A,m.key,m)}}return function(A,g,v){return g&&_(A.prototype,g),v&&_(A,v),A}}(),b=function _(A,g,v){A===null&&(A=Function.prototype);var m=Object.getOwnPropertyDescriptor(A,g);if(m===void 0){var w=Object.getPrototypeOf(A);return w===null?void 0:_(w,g,v)}else{if("value"in m)return m.value;var T=m.get;return T===void 0?void 0:T.call(v)}},y=h(2),p=l(y),s=h(0),i=l(s),e=h(4),t=l(e),u=h(6),o=l(u),a=h(7),r=l(a);function l(_){return _&&_.__esModule?_:{default:_}}function f(_,A){if(!(_ instanceof A))throw new TypeError("Cannot call a class as a function")}function n(_,A){if(!_)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return A&&(typeof A=="object"||typeof A=="function")?A:_}function c(_,A){if(typeof A!="function"&&A!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof A);_.prototype=Object.create(A&&A.prototype,{constructor:{value:_,enumerable:!1,writable:!0,configurable:!0}}),A&&(Object.setPrototypeOf?Object.setPrototypeOf(_,A):_.__proto__=A)}var E=function(_){c(A,_);function A(){return f(this,A),n(this,(A.__proto__||Object.getPrototypeOf(A)).apply(this,arguments))}return A}(o.default);E.blotName="code",E.tagName="CODE";var q=function(_){c(A,_);function A(){return f(this,A),n(this,(A.__proto__||Object.getPrototypeOf(A)).apply(this,arguments))}return k(A,[{key:"delta",value:function(){var v=this,m=this.domNode.textContent;return m.endsWith(`
`)&&(m=m.slice(0,-1)),m.split(`
`).reduce(function(w,T){return w.insert(T).insert(`
`,v.formats())},new p.default)}},{key:"format",value:function(v,m){if(!(v===this.statics.blotName&&m)){var w=this.descendant(r.default,this.length()-1),T=x(w,1),R=T[0];R!=null&&R.deleteAt(R.length()-1,1),b(A.prototype.__proto__||Object.getPrototypeOf(A.prototype),"format",this).call(this,v,m)}}},{key:"formatAt",value:function(v,m,w,T){if(m!==0&&!(i.default.query(w,i.default.Scope.BLOCK)==null||w===this.statics.blotName&&T===this.statics.formats(this.domNode))){var R=this.newlineIndex(v);if(!(R<0||R>=v+m)){var B=this.newlineIndex(v,!0)+1,C=R-B+1,W=this.isolate(B,C),M=W.next;W.format(w,T),M instanceof A&&M.formatAt(0,v-B+m-C,w,T)}}}},{key:"insertAt",value:function(v,m,w){if(w==null){var T=this.descendant(r.default,v),R=x(T,2),B=R[0],C=R[1];B.insertAt(C,m)}}},{key:"length",value:function(){var v=this.domNode.textContent.length;return this.domNode.textContent.endsWith(`
`)?v:v+1}},{key:"newlineIndex",value:function(v){var m=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1;if(m)return this.domNode.textContent.slice(0,v).lastIndexOf(`
`);var w=this.domNode.textContent.slice(v).indexOf(`
`);return w>-1?v+w:-1}},{key:"optimize",value:function(v){this.domNode.textContent.endsWith(`
`)||this.appendChild(i.default.create("text",`
`)),b(A.prototype.__proto__||Object.getPrototypeOf(A.prototype),"optimize",this).call(this,v);var m=this.next;m!=null&&m.prev===this&&m.statics.blotName===this.statics.blotName&&this.statics.formats(this.domNode)===m.statics.formats(m.domNode)&&(m.optimize(v),m.moveChildren(this),m.remove())}},{key:"replace",value:function(v){b(A.prototype.__proto__||Object.getPrototypeOf(A.prototype),"replace",this).call(this,v),[].slice.call(this.domNode.querySelectorAll("*")).forEach(function(m){var w=i.default.find(m);w==null?m.parentNode.removeChild(m):w instanceof i.default.Embed?w.remove():w.unwrap()})}}],[{key:"create",value:function(v){var m=b(A.__proto__||Object.getPrototypeOf(A),"create",this).call(this,v);return m.setAttribute("spellcheck",!1),m}},{key:"formats",value:function(){return!0}}]),A}(t.default);q.blotName="code-block",q.tagName="PRE",q.TAB="  ",d.Code=E,d.default=q},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0});var x=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(M){return typeof M}:function(M){return M&&typeof Symbol=="function"&&M.constructor===Symbol&&M!==Symbol.prototype?"symbol":typeof M},k=function(){function M(I,O){var S=[],L=!0,F=!1,D=void 0;try{for(var N=I[Symbol.iterator](),j;!(L=(j=N.next()).done)&&(S.push(j.value),!(O&&S.length===O));L=!0);}catch(H){F=!0,D=H}finally{try{!L&&N.return&&N.return()}finally{if(F)throw D}}return S}return function(I,O){if(Array.isArray(I))return I;if(Symbol.iterator in Object(I))return M(I,O);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),b=function(){function M(I,O){for(var S=0;S<O.length;S++){var L=O[S];L.enumerable=L.enumerable||!1,L.configurable=!0,"value"in L&&(L.writable=!0),Object.defineProperty(I,L.key,L)}}return function(I,O,S){return O&&M(I.prototype,O),S&&M(I,S),I}}(),y=h(2),p=m(y),s=h(20),i=m(s),e=h(0),t=m(e),u=h(13),o=m(u),a=h(24),r=m(a),l=h(4),f=m(l),n=h(16),c=m(n),E=h(21),q=m(E),_=h(11),A=m(_),g=h(3),v=m(g);function m(M){return M&&M.__esModule?M:{default:M}}function w(M,I,O){return I in M?Object.defineProperty(M,I,{value:O,enumerable:!0,configurable:!0,writable:!0}):M[I]=O,M}function T(M,I){if(!(M instanceof I))throw new TypeError("Cannot call a class as a function")}var R=/^[ -~]*$/,B=function(){function M(I){T(this,M),this.scroll=I,this.delta=this.getDelta()}return b(M,[{key:"applyDelta",value:function(O){var S=this,L=!1;this.scroll.update();var F=this.scroll.length();return this.scroll.batchStart(),O=W(O),O.reduce(function(D,N){var j=N.retain||N.delete||N.insert.length||1,H=N.attributes||{};if(N.insert!=null){if(typeof N.insert=="string"){var U=N.insert;U.endsWith(`
`)&&L&&(L=!1,U=U.slice(0,-1)),D>=F&&!U.endsWith(`
`)&&(L=!0),S.scroll.insertAt(D,U);var $=S.scroll.line(D),Q=k($,2),J=Q[0],ee=Q[1],ie=(0,v.default)({},(0,l.bubbleFormats)(J));if(J instanceof f.default){var le=J.descendant(t.default.Leaf,ee),se=k(le,1),ue=se[0];ie=(0,v.default)(ie,(0,l.bubbleFormats)(ue))}H=i.default.attributes.diff(ie,H)||{}}else if(x(N.insert)==="object"){var K=Object.keys(N.insert)[0];if(K==null)return D;S.scroll.insertAt(D,K,N.insert[K])}F+=j}return Object.keys(H).forEach(function(V){S.scroll.formatAt(D,j,V,H[V])}),D+j},0),O.reduce(function(D,N){return typeof N.delete=="number"?(S.scroll.deleteAt(D,N.delete),D):D+(N.retain||N.insert.length||1)},0),this.scroll.batchEnd(),this.update(O)}},{key:"deleteText",value:function(O,S){return this.scroll.deleteAt(O,S),this.update(new p.default().retain(O).delete(S))}},{key:"formatLine",value:function(O,S){var L=this,F=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};return this.scroll.update(),Object.keys(F).forEach(function(D){if(!(L.scroll.whitelist!=null&&!L.scroll.whitelist[D])){var N=L.scroll.lines(O,Math.max(S,1)),j=S;N.forEach(function(H){var U=H.length();if(!(H instanceof o.default))H.format(D,F[D]);else{var $=O-H.offset(L.scroll),Q=H.newlineIndex($+j)-$+1;H.formatAt($,Q,D,F[D])}j-=U})}}),this.scroll.optimize(),this.update(new p.default().retain(O).retain(S,(0,q.default)(F)))}},{key:"formatText",value:function(O,S){var L=this,F=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};return Object.keys(F).forEach(function(D){L.scroll.formatAt(O,S,D,F[D])}),this.update(new p.default().retain(O).retain(S,(0,q.default)(F)))}},{key:"getContents",value:function(O,S){return this.delta.slice(O,O+S)}},{key:"getDelta",value:function(){return this.scroll.lines().reduce(function(O,S){return O.concat(S.delta())},new p.default)}},{key:"getFormat",value:function(O){var S=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0,L=[],F=[];S===0?this.scroll.path(O).forEach(function(N){var j=k(N,1),H=j[0];H instanceof f.default?L.push(H):H instanceof t.default.Leaf&&F.push(H)}):(L=this.scroll.lines(O,S),F=this.scroll.descendants(t.default.Leaf,O,S));var D=[L,F].map(function(N){if(N.length===0)return{};for(var j=(0,l.bubbleFormats)(N.shift());Object.keys(j).length>0;){var H=N.shift();if(H==null)return j;j=C((0,l.bubbleFormats)(H),j)}return j});return v.default.apply(v.default,D)}},{key:"getText",value:function(O,S){return this.getContents(O,S).filter(function(L){return typeof L.insert=="string"}).map(function(L){return L.insert}).join("")}},{key:"insertEmbed",value:function(O,S,L){return this.scroll.insertAt(O,S,L),this.update(new p.default().retain(O).insert(w({},S,L)))}},{key:"insertText",value:function(O,S){var L=this,F=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};return S=S.replace(/\r\n/g,`
`).replace(/\r/g,`
`),this.scroll.insertAt(O,S),Object.keys(F).forEach(function(D){L.scroll.formatAt(O,S.length,D,F[D])}),this.update(new p.default().retain(O).insert(S,(0,q.default)(F)))}},{key:"isBlank",value:function(){if(this.scroll.children.length==0)return!0;if(this.scroll.children.length>1)return!1;var O=this.scroll.children.head;return O.statics.blotName!==f.default.blotName||O.children.length>1?!1:O.children.head instanceof c.default}},{key:"removeFormat",value:function(O,S){var L=this.getText(O,S),F=this.scroll.line(O+S),D=k(F,2),N=D[0],j=D[1],H=0,U=new p.default;N!=null&&(N instanceof o.default?H=N.newlineIndex(j)-j+1:H=N.length()-j,U=N.delta().slice(j,j+H-1).insert(`
`));var $=this.getContents(O,S+H),Q=$.diff(new p.default().insert(L).concat(U)),J=new p.default().retain(O).concat(Q);return this.applyDelta(J)}},{key:"update",value:function(O){var S=arguments.length>1&&arguments[1]!==void 0?arguments[1]:[],L=arguments.length>2&&arguments[2]!==void 0?arguments[2]:void 0,F=this.delta;if(S.length===1&&S[0].type==="characterData"&&S[0].target.data.match(R)&&t.default.find(S[0].target)){var D=t.default.find(S[0].target),N=(0,l.bubbleFormats)(D),j=D.offset(this.scroll),H=S[0].oldValue.replace(r.default.CONTENTS,""),U=new p.default().insert(H),$=new p.default().insert(D.value()),Q=new p.default().retain(j).concat(U.diff($,L));O=Q.reduce(function(J,ee){return ee.insert?J.insert(ee.insert,N):J.push(ee)},new p.default),this.delta=F.compose(O)}else this.delta=this.getDelta(),(!O||!(0,A.default)(F.compose(O),this.delta))&&(O=F.diff(this.delta,L));return O}}]),M}();function C(M,I){return Object.keys(I).reduce(function(O,S){return M[S]==null||(I[S]===M[S]?O[S]=I[S]:Array.isArray(I[S])?I[S].indexOf(M[S])<0&&(O[S]=I[S].concat([M[S]])):O[S]=[I[S],M[S]]),O},{})}function W(M){return M.reduce(function(I,O){if(O.insert===1){var S=(0,q.default)(O.attributes);return delete S.image,I.insert({image:O.attributes.image},S)}if(O.attributes!=null&&(O.attributes.list===!0||O.attributes.bullet===!0)&&(O=(0,q.default)(O),O.attributes.list?O.attributes.list="ordered":(O.attributes.list="bullet",delete O.attributes.bullet)),typeof O.insert=="string"){var L=O.insert.replace(/\r\n/g,`
`).replace(/\r/g,`
`);return I.insert(L,O.attributes)}return I.push(O)},new p.default)}d.default=B},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0}),d.default=d.Range=void 0;var x=function(){function _(A,g){var v=[],m=!0,w=!1,T=void 0;try{for(var R=A[Symbol.iterator](),B;!(m=(B=R.next()).done)&&(v.push(B.value),!(g&&v.length===g));m=!0);}catch(C){w=!0,T=C}finally{try{!m&&R.return&&R.return()}finally{if(w)throw T}}return v}return function(A,g){if(Array.isArray(A))return A;if(Symbol.iterator in Object(A))return _(A,g);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),k=function(){function _(A,g){for(var v=0;v<g.length;v++){var m=g[v];m.enumerable=m.enumerable||!1,m.configurable=!0,"value"in m&&(m.writable=!0),Object.defineProperty(A,m.key,m)}}return function(A,g,v){return g&&_(A.prototype,g),v&&_(A,v),A}}(),b=h(0),y=r(b),p=h(21),s=r(p),i=h(11),e=r(i),t=h(8),u=r(t),o=h(10),a=r(o);function r(_){return _&&_.__esModule?_:{default:_}}function l(_){if(Array.isArray(_)){for(var A=0,g=Array(_.length);A<_.length;A++)g[A]=_[A];return g}else return Array.from(_)}function f(_,A){if(!(_ instanceof A))throw new TypeError("Cannot call a class as a function")}var n=(0,a.default)("quill:selection"),c=function _(A){var g=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0;f(this,_),this.index=A,this.length=g},E=function(){function _(A,g){var v=this;f(this,_),this.emitter=g,this.scroll=A,this.composing=!1,this.mouseDown=!1,this.root=this.scroll.domNode,this.cursor=y.default.create("cursor",this),this.lastRange=this.savedRange=new c(0,0),this.handleComposition(),this.handleDragging(),this.emitter.listenDOM("selectionchange",document,function(){v.mouseDown||setTimeout(v.update.bind(v,u.default.sources.USER),1)}),this.emitter.on(u.default.events.EDITOR_CHANGE,function(m,w){m===u.default.events.TEXT_CHANGE&&w.length()>0&&v.update(u.default.sources.SILENT)}),this.emitter.on(u.default.events.SCROLL_BEFORE_UPDATE,function(){if(v.hasFocus()){var m=v.getNativeRange();m!=null&&m.start.node!==v.cursor.textNode&&v.emitter.once(u.default.events.SCROLL_UPDATE,function(){try{v.setNativeRange(m.start.node,m.start.offset,m.end.node,m.end.offset)}catch(w){}})}}),this.emitter.on(u.default.events.SCROLL_OPTIMIZE,function(m,w){if(w.range){var T=w.range,R=T.startNode,B=T.startOffset,C=T.endNode,W=T.endOffset;v.setNativeRange(R,B,C,W)}}),this.update(u.default.sources.SILENT)}return k(_,[{key:"handleComposition",value:function(){var g=this;this.root.addEventListener("compositionstart",function(){g.composing=!0}),this.root.addEventListener("compositionend",function(){if(g.composing=!1,g.cursor.parent){var v=g.cursor.restore();if(!v)return;setTimeout(function(){g.setNativeRange(v.startNode,v.startOffset,v.endNode,v.endOffset)},1)}})}},{key:"handleDragging",value:function(){var g=this;this.emitter.listenDOM("mousedown",document.body,function(){g.mouseDown=!0}),this.emitter.listenDOM("mouseup",document.body,function(){g.mouseDown=!1,g.update(u.default.sources.USER)})}},{key:"focus",value:function(){this.hasFocus()||(this.root.focus(),this.setRange(this.savedRange))}},{key:"format",value:function(g,v){if(!(this.scroll.whitelist!=null&&!this.scroll.whitelist[g])){this.scroll.update();var m=this.getNativeRange();if(!(m==null||!m.native.collapsed||y.default.query(g,y.default.Scope.BLOCK))){if(m.start.node!==this.cursor.textNode){var w=y.default.find(m.start.node,!1);if(w==null)return;if(w instanceof y.default.Leaf){var T=w.split(m.start.offset);w.parent.insertBefore(this.cursor,T)}else w.insertBefore(this.cursor,m.start.node);this.cursor.attach()}this.cursor.format(g,v),this.scroll.optimize(),this.setNativeRange(this.cursor.textNode,this.cursor.textNode.data.length),this.update()}}}},{key:"getBounds",value:function(g){var v=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0,m=this.scroll.length();g=Math.min(g,m-1),v=Math.min(g+v,m-1)-g;var w=void 0,T=this.scroll.leaf(g),R=x(T,2),B=R[0],C=R[1];if(B==null)return null;var W=B.position(C,!0),M=x(W,2);w=M[0],C=M[1];var I=document.createRange();if(v>0){I.setStart(w,C);var O=this.scroll.leaf(g+v),S=x(O,2);if(B=S[0],C=S[1],B==null)return null;var L=B.position(C,!0),F=x(L,2);return w=F[0],C=F[1],I.setEnd(w,C),I.getBoundingClientRect()}else{var D="left",N=void 0;return w instanceof Text?(C<w.data.length?(I.setStart(w,C),I.setEnd(w,C+1)):(I.setStart(w,C-1),I.setEnd(w,C),D="right"),N=I.getBoundingClientRect()):(N=B.domNode.getBoundingClientRect(),C>0&&(D="right")),{bottom:N.top+N.height,height:N.height,left:N[D],right:N[D],top:N.top,width:0}}}},{key:"getNativeRange",value:function(){var g=document.getSelection();if(g==null||g.rangeCount<=0)return null;var v=g.getRangeAt(0);if(v==null)return null;var m=this.normalizeNative(v);return n.info("getNativeRange",m),m}},{key:"getRange",value:function(){var g=this.getNativeRange();if(g==null)return[null,null];var v=this.normalizedToRange(g);return[v,g]}},{key:"hasFocus",value:function(){return document.activeElement===this.root}},{key:"normalizedToRange",value:function(g){var v=this,m=[[g.start.node,g.start.offset]];g.native.collapsed||m.push([g.end.node,g.end.offset]);var w=m.map(function(B){var C=x(B,2),W=C[0],M=C[1],I=y.default.find(W,!0),O=I.offset(v.scroll);return M===0?O:I instanceof y.default.Container?O+I.length():O+I.index(W,M)}),T=Math.min(Math.max.apply(Math,l(w)),this.scroll.length()-1),R=Math.min.apply(Math,[T].concat(l(w)));return new c(R,T-R)}},{key:"normalizeNative",value:function(g){if(!q(this.root,g.startContainer)||!g.collapsed&&!q(this.root,g.endContainer))return null;var v={start:{node:g.startContainer,offset:g.startOffset},end:{node:g.endContainer,offset:g.endOffset},native:g};return[v.start,v.end].forEach(function(m){for(var w=m.node,T=m.offset;!(w instanceof Text)&&w.childNodes.length>0;)if(w.childNodes.length>T)w=w.childNodes[T],T=0;else if(w.childNodes.length===T)w=w.lastChild,T=w instanceof Text?w.data.length:w.childNodes.length+1;else break;m.node=w,m.offset=T}),v}},{key:"rangeToNative",value:function(g){var v=this,m=g.collapsed?[g.index]:[g.index,g.index+g.length],w=[],T=this.scroll.length();return m.forEach(function(R,B){R=Math.min(T-1,R);var C=void 0,W=v.scroll.leaf(R),M=x(W,2),I=M[0],O=M[1],S=I.position(O,B!==0),L=x(S,2);C=L[0],O=L[1],w.push(C,O)}),w.length<2&&(w=w.concat(w)),w}},{key:"scrollIntoView",value:function(g){var v=this.lastRange;if(v!=null){var m=this.getBounds(v.index,v.length);if(m!=null){var w=this.scroll.length()-1,T=this.scroll.line(Math.min(v.index,w)),R=x(T,1),B=R[0],C=B;if(v.length>0){var W=this.scroll.line(Math.min(v.index+v.length,w)),M=x(W,1);C=M[0]}if(!(B==null||C==null)){var I=g.getBoundingClientRect();m.top<I.top?g.scrollTop-=I.top-m.top:m.bottom>I.bottom&&(g.scrollTop+=m.bottom-I.bottom)}}}}},{key:"setNativeRange",value:function(g,v){var m=arguments.length>2&&arguments[2]!==void 0?arguments[2]:g,w=arguments.length>3&&arguments[3]!==void 0?arguments[3]:v,T=arguments.length>4&&arguments[4]!==void 0?arguments[4]:!1;if(n.info("setNativeRange",g,v,m,w),!(g!=null&&(this.root.parentNode==null||g.parentNode==null||m.parentNode==null))){var R=document.getSelection();if(R!=null)if(g!=null){this.hasFocus()||this.root.focus();var B=(this.getNativeRange()||{}).native;if(B==null||T||g!==B.startContainer||v!==B.startOffset||m!==B.endContainer||w!==B.endOffset){g.tagName=="BR"&&(v=[].indexOf.call(g.parentNode.childNodes,g),g=g.parentNode),m.tagName=="BR"&&(w=[].indexOf.call(m.parentNode.childNodes,m),m=m.parentNode);var C=document.createRange();C.setStart(g,v),C.setEnd(m,w),R.removeAllRanges(),R.addRange(C)}}else R.removeAllRanges(),this.root.blur(),document.body.focus()}}},{key:"setRange",value:function(g){var v=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1,m=arguments.length>2&&arguments[2]!==void 0?arguments[2]:u.default.sources.API;if(typeof v=="string"&&(m=v,v=!1),n.info("setRange",g),g!=null){var w=this.rangeToNative(g);this.setNativeRange.apply(this,l(w).concat([v]))}else this.setNativeRange(null);this.update(m)}},{key:"update",value:function(){var g=arguments.length>0&&arguments[0]!==void 0?arguments[0]:u.default.sources.USER,v=this.lastRange,m=this.getRange(),w=x(m,2),T=w[0],R=w[1];if(this.lastRange=T,this.lastRange!=null&&(this.savedRange=this.lastRange),!(0,e.default)(v,this.lastRange)){var B;!this.composing&&R!=null&&R.native.collapsed&&R.start.node!==this.cursor.textNode&&this.cursor.restore();var C=[u.default.events.SELECTION_CHANGE,(0,s.default)(this.lastRange),(0,s.default)(v),g];if((B=this.emitter).emit.apply(B,[u.default.events.EDITOR_CHANGE].concat(C)),g!==u.default.sources.SILENT){var W;(W=this.emitter).emit.apply(W,C)}}}}]),_}();function q(_,A){try{A.parentNode}catch(g){return!1}return A instanceof Text&&(A=A.parentNode),_.contains(A)}d.Range=c,d.default=E},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0});var x=function(){function u(o,a){for(var r=0;r<a.length;r++){var l=a[r];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(o,l.key,l)}}return function(o,a,r){return a&&u(o.prototype,a),r&&u(o,r),o}}(),k=function u(o,a,r){o===null&&(o=Function.prototype);var l=Object.getOwnPropertyDescriptor(o,a);if(l===void 0){var f=Object.getPrototypeOf(o);return f===null?void 0:u(f,a,r)}else{if("value"in l)return l.value;var n=l.get;return n===void 0?void 0:n.call(r)}},b=h(0),y=p(b);function p(u){return u&&u.__esModule?u:{default:u}}function s(u,o){if(!(u instanceof o))throw new TypeError("Cannot call a class as a function")}function i(u,o){if(!u)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return o&&(typeof o=="object"||typeof o=="function")?o:u}function e(u,o){if(typeof o!="function"&&o!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof o);u.prototype=Object.create(o&&o.prototype,{constructor:{value:u,enumerable:!1,writable:!0,configurable:!0}}),o&&(Object.setPrototypeOf?Object.setPrototypeOf(u,o):u.__proto__=o)}var t=function(u){e(o,u);function o(){return s(this,o),i(this,(o.__proto__||Object.getPrototypeOf(o)).apply(this,arguments))}return x(o,[{key:"insertInto",value:function(r,l){r.children.length===0?k(o.prototype.__proto__||Object.getPrototypeOf(o.prototype),"insertInto",this).call(this,r,l):this.remove()}},{key:"length",value:function(){return 0}},{key:"value",value:function(){return""}}],[{key:"value",value:function(){}}]),o}(y.default.Embed);t.blotName="break",t.tagName="BR",d.default=t},function(P,d,h){var x=this&&this.__extends||function(){var i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var u in t)t.hasOwnProperty(u)&&(e[u]=t[u])};return function(e,t){i(e,t);function u(){this.constructor=e}e.prototype=t===null?Object.create(t):(u.prototype=t.prototype,new u)}}();Object.defineProperty(d,"__esModule",{value:!0});var k=h(44),b=h(30),y=h(1),p=function(i){x(e,i);function e(t){var u=i.call(this,t)||this;return u.build(),u}return e.prototype.appendChild=function(t){this.insertBefore(t)},e.prototype.attach=function(){i.prototype.attach.call(this),this.children.forEach(function(t){t.attach()})},e.prototype.build=function(){var t=this;this.children=new k.default,[].slice.call(this.domNode.childNodes).reverse().forEach(function(u){try{var o=s(u);t.insertBefore(o,t.children.head||void 0)}catch(a){if(a instanceof y.ParchmentError)return;throw a}})},e.prototype.deleteAt=function(t,u){if(t===0&&u===this.length())return this.remove();this.children.forEachAt(t,u,function(o,a,r){o.deleteAt(a,r)})},e.prototype.descendant=function(t,u){var o=this.children.find(u),a=o[0],r=o[1];return t.blotName==null&&t(a)||t.blotName!=null&&a instanceof t?[a,r]:a instanceof e?a.descendant(t,r):[null,-1]},e.prototype.descendants=function(t,u,o){u===void 0&&(u=0),o===void 0&&(o=Number.MAX_VALUE);var a=[],r=o;return this.children.forEachAt(u,o,function(l,f,n){(t.blotName==null&&t(l)||t.blotName!=null&&l instanceof t)&&a.push(l),l instanceof e&&(a=a.concat(l.descendants(t,f,r))),r-=n}),a},e.prototype.detach=function(){this.children.forEach(function(t){t.detach()}),i.prototype.detach.call(this)},e.prototype.formatAt=function(t,u,o,a){this.children.forEachAt(t,u,function(r,l,f){r.formatAt(l,f,o,a)})},e.prototype.insertAt=function(t,u,o){var a=this.children.find(t),r=a[0],l=a[1];if(r)r.insertAt(l,u,o);else{var f=o==null?y.create("text",u):y.create(u,o);this.appendChild(f)}},e.prototype.insertBefore=function(t,u){if(this.statics.allowedChildren!=null&&!this.statics.allowedChildren.some(function(o){return t instanceof o}))throw new y.ParchmentError("Cannot insert "+t.statics.blotName+" into "+this.statics.blotName);t.insertInto(this,u)},e.prototype.length=function(){return this.children.reduce(function(t,u){return t+u.length()},0)},e.prototype.moveChildren=function(t,u){this.children.forEach(function(o){t.insertBefore(o,u)})},e.prototype.optimize=function(t){if(i.prototype.optimize.call(this,t),this.children.length===0)if(this.statics.defaultChild!=null){var u=y.create(this.statics.defaultChild);this.appendChild(u),u.optimize(t)}else this.remove()},e.prototype.path=function(t,u){u===void 0&&(u=!1);var o=this.children.find(t,u),a=o[0],r=o[1],l=[[this,t]];return a instanceof e?l.concat(a.path(r,u)):(a!=null&&l.push([a,r]),l)},e.prototype.removeChild=function(t){this.children.remove(t)},e.prototype.replace=function(t){t instanceof e&&t.moveChildren(this),i.prototype.replace.call(this,t)},e.prototype.split=function(t,u){if(u===void 0&&(u=!1),!u){if(t===0)return this;if(t===this.length())return this.next}var o=this.clone();return this.parent.insertBefore(o,this.next),this.children.forEachAt(t,this.length(),function(a,r,l){a=a.split(r,u),o.appendChild(a)}),o},e.prototype.unwrap=function(){this.moveChildren(this.parent,this.next),this.remove()},e.prototype.update=function(t,u){var o=this,a=[],r=[];t.forEach(function(l){l.target===o.domNode&&l.type==="childList"&&(a.push.apply(a,l.addedNodes),r.push.apply(r,l.removedNodes))}),r.forEach(function(l){if(!(l.parentNode!=null&&l.tagName!=="IFRAME"&&document.body.compareDocumentPosition(l)&Node.DOCUMENT_POSITION_CONTAINED_BY)){var f=y.find(l);f!=null&&(f.domNode.parentNode==null||f.domNode.parentNode===o.domNode)&&f.detach()}}),a.filter(function(l){return l.parentNode==o.domNode}).sort(function(l,f){return l===f?0:l.compareDocumentPosition(f)&Node.DOCUMENT_POSITION_FOLLOWING?1:-1}).forEach(function(l){var f=null;l.nextSibling!=null&&(f=y.find(l.nextSibling));var n=s(l);(n.next!=f||n.next==null)&&(n.parent!=null&&n.parent.removeChild(o),o.insertBefore(n,f||void 0))})},e}(b.default);function s(i){var e=y.find(i);if(e==null)try{e=y.create(i)}catch(t){e=y.create(y.Scope.INLINE),[].slice.call(i.childNodes).forEach(function(u){e.domNode.appendChild(u)}),i.parentNode&&i.parentNode.replaceChild(e.domNode,i),e.attach()}return e}d.default=p},function(P,d,h){var x=this&&this.__extends||function(){var i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var u in t)t.hasOwnProperty(u)&&(e[u]=t[u])};return function(e,t){i(e,t);function u(){this.constructor=e}e.prototype=t===null?Object.create(t):(u.prototype=t.prototype,new u)}}();Object.defineProperty(d,"__esModule",{value:!0});var k=h(12),b=h(31),y=h(17),p=h(1),s=function(i){x(e,i);function e(t){var u=i.call(this,t)||this;return u.attributes=new b.default(u.domNode),u}return e.formats=function(t){if(typeof this.tagName=="string")return!0;if(Array.isArray(this.tagName))return t.tagName.toLowerCase()},e.prototype.format=function(t,u){var o=p.query(t);o instanceof k.default?this.attributes.attribute(o,u):u&&o!=null&&(t!==this.statics.blotName||this.formats()[t]!==u)&&this.replaceWith(t,u)},e.prototype.formats=function(){var t=this.attributes.values(),u=this.statics.formats(this.domNode);return u!=null&&(t[this.statics.blotName]=u),t},e.prototype.replaceWith=function(t,u){var o=i.prototype.replaceWith.call(this,t,u);return this.attributes.copy(o),o},e.prototype.update=function(t,u){var o=this;i.prototype.update.call(this,t,u),t.some(function(a){return a.target===o.domNode&&a.type==="attributes"})&&this.attributes.build()},e.prototype.wrap=function(t,u){var o=i.prototype.wrap.call(this,t,u);return o instanceof e&&o.statics.scope===this.statics.scope&&this.attributes.move(o),o},e}(y.default);d.default=s},function(P,d,h){var x=this&&this.__extends||function(){var p=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(s,i){s.__proto__=i}||function(s,i){for(var e in i)i.hasOwnProperty(e)&&(s[e]=i[e])};return function(s,i){p(s,i);function e(){this.constructor=s}s.prototype=i===null?Object.create(i):(e.prototype=i.prototype,new e)}}();Object.defineProperty(d,"__esModule",{value:!0});var k=h(30),b=h(1),y=function(p){x(s,p);function s(){return p!==null&&p.apply(this,arguments)||this}return s.value=function(i){return!0},s.prototype.index=function(i,e){return this.domNode===i||this.domNode.compareDocumentPosition(i)&Node.DOCUMENT_POSITION_CONTAINED_BY?Math.min(e,1):-1},s.prototype.position=function(i,e){var t=[].indexOf.call(this.parent.domNode.childNodes,this.domNode);return i>0&&(t+=1),[this.parent.domNode,t]},s.prototype.value=function(){var i;return i={},i[this.statics.blotName]=this.statics.value(this.domNode)||!0,i},s.scope=b.Scope.INLINE_BLOT,s}(k.default);d.default=y},function(P,d,h){var x=h(11),k=h(3),b={attributes:{compose:function(p,s,i){typeof p!="object"&&(p={}),typeof s!="object"&&(s={});var e=k(!0,{},s);i||(e=Object.keys(e).reduce(function(u,o){return e[o]!=null&&(u[o]=e[o]),u},{}));for(var t in p)p[t]!==void 0&&s[t]===void 0&&(e[t]=p[t]);return Object.keys(e).length>0?e:void 0},diff:function(p,s){typeof p!="object"&&(p={}),typeof s!="object"&&(s={});var i=Object.keys(p).concat(Object.keys(s)).reduce(function(e,t){return x(p[t],s[t])||(e[t]=s[t]===void 0?null:s[t]),e},{});return Object.keys(i).length>0?i:void 0},transform:function(p,s,i){if(typeof p!="object")return s;if(typeof s=="object"){if(!i)return s;var e=Object.keys(s).reduce(function(t,u){return p[u]===void 0&&(t[u]=s[u]),t},{});return Object.keys(e).length>0?e:void 0}}},iterator:function(p){return new y(p)},length:function(p){return typeof p.delete=="number"?p.delete:typeof p.retain=="number"?p.retain:typeof p.insert=="string"?p.insert.length:1}};function y(p){this.ops=p,this.index=0,this.offset=0}y.prototype.hasNext=function(){return this.peekLength()<1/0},y.prototype.next=function(p){p||(p=1/0);var s=this.ops[this.index];if(s){var i=this.offset,e=b.length(s);if(p>=e-i?(p=e-i,this.index+=1,this.offset=0):this.offset+=p,typeof s.delete=="number")return{delete:p};var t={};return s.attributes&&(t.attributes=s.attributes),typeof s.retain=="number"?t.retain=p:typeof s.insert=="string"?t.insert=s.insert.substr(i,p):t.insert=s.insert,t}else return{retain:1/0}},y.prototype.peek=function(){return this.ops[this.index]},y.prototype.peekLength=function(){return this.ops[this.index]?b.length(this.ops[this.index])-this.offset:1/0},y.prototype.peekType=function(){return this.ops[this.index]?typeof this.ops[this.index].delete=="number"?"delete":typeof this.ops[this.index].retain=="number"?"retain":"insert":"retain"},y.prototype.rest=function(){if(this.hasNext()){if(this.offset===0)return this.ops.slice(this.index);var p=this.offset,s=this.index,i=this.next(),e=this.ops.slice(this.index);return this.offset=p,this.index=s,[i].concat(e)}else return[]},P.exports=b},function(P,d){var h=function(){function x(o,a){return a!=null&&o instanceof a}var k;try{k=Map}catch(o){k=function(){}}var b;try{b=Set}catch(o){b=function(){}}var y;try{y=Promise}catch(o){y=function(){}}function p(o,a,r,l,f){typeof a=="object"&&(r=a.depth,l=a.prototype,f=a.includeNonEnumerable,a=a.circular);var n=[],c=[],E=typeof Buffer!="undefined";typeof a=="undefined"&&(a=!0),typeof r=="undefined"&&(r=1/0);function q(_,A){if(_===null)return null;if(A===0)return _;var g,v;if(typeof _!="object")return _;if(x(_,k))g=new k;else if(x(_,b))g=new b;else if(x(_,y))g=new y(function(I,O){_.then(function(S){I(q(S,A-1))},function(S){O(q(S,A-1))})});else if(p.__isArray(_))g=[];else if(p.__isRegExp(_))g=new RegExp(_.source,u(_)),_.lastIndex&&(g.lastIndex=_.lastIndex);else if(p.__isDate(_))g=new Date(_.getTime());else{if(E&&Buffer.isBuffer(_))return Buffer.allocUnsafe?g=Buffer.allocUnsafe(_.length):g=new Buffer(_.length),_.copy(g),g;x(_,Error)?g=Object.create(_):typeof l=="undefined"?(v=Object.getPrototypeOf(_),g=Object.create(v)):(g=Object.create(l),v=l)}if(a){var m=n.indexOf(_);if(m!=-1)return c[m];n.push(_),c.push(g)}x(_,k)&&_.forEach(function(I,O){var S=q(O,A-1),L=q(I,A-1);g.set(S,L)}),x(_,b)&&_.forEach(function(I){var O=q(I,A-1);g.add(O)});for(var w in _){var T;v&&(T=Object.getOwnPropertyDescriptor(v,w)),!(T&&T.set==null)&&(g[w]=q(_[w],A-1))}if(Object.getOwnPropertySymbols)for(var R=Object.getOwnPropertySymbols(_),w=0;w<R.length;w++){var B=R[w],C=Object.getOwnPropertyDescriptor(_,B);C&&!C.enumerable&&!f||(g[B]=q(_[B],A-1),C.enumerable||Object.defineProperty(g,B,{enumerable:!1}))}if(f)for(var W=Object.getOwnPropertyNames(_),w=0;w<W.length;w++){var M=W[w],C=Object.getOwnPropertyDescriptor(_,M);C&&C.enumerable||(g[M]=q(_[M],A-1),Object.defineProperty(g,M,{enumerable:!1}))}return g}return q(o,r)}p.clonePrototype=function(a){if(a===null)return null;var r=function(){};return r.prototype=a,new r};function s(o){return Object.prototype.toString.call(o)}p.__objToStr=s;function i(o){return typeof o=="object"&&s(o)==="[object Date]"}p.__isDate=i;function e(o){return typeof o=="object"&&s(o)==="[object Array]"}p.__isArray=e;function t(o){return typeof o=="object"&&s(o)==="[object RegExp]"}p.__isRegExp=t;function u(o){var a="";return o.global&&(a+="g"),o.ignoreCase&&(a+="i"),o.multiline&&(a+="m"),a}return p.__getRegExpFlags=u,p}();typeof P=="object"&&P.exports&&(P.exports=h)},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0});var x=function(){function g(v,m){var w=[],T=!0,R=!1,B=void 0;try{for(var C=v[Symbol.iterator](),W;!(T=(W=C.next()).done)&&(w.push(W.value),!(m&&w.length===m));T=!0);}catch(M){R=!0,B=M}finally{try{!T&&C.return&&C.return()}finally{if(R)throw B}}return w}return function(v,m){if(Array.isArray(v))return v;if(Symbol.iterator in Object(v))return g(v,m);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),k=function(){function g(v,m){for(var w=0;w<m.length;w++){var T=m[w];T.enumerable=T.enumerable||!1,T.configurable=!0,"value"in T&&(T.writable=!0),Object.defineProperty(v,T.key,T)}}return function(v,m,w){return m&&g(v.prototype,m),w&&g(v,w),v}}(),b=function g(v,m,w){v===null&&(v=Function.prototype);var T=Object.getOwnPropertyDescriptor(v,m);if(T===void 0){var R=Object.getPrototypeOf(v);return R===null?void 0:g(R,m,w)}else{if("value"in T)return T.value;var B=T.get;return B===void 0?void 0:B.call(w)}},y=h(0),p=n(y),s=h(8),i=n(s),e=h(4),t=n(e),u=h(16),o=n(u),a=h(13),r=n(a),l=h(25),f=n(l);function n(g){return g&&g.__esModule?g:{default:g}}function c(g,v){if(!(g instanceof v))throw new TypeError("Cannot call a class as a function")}function E(g,v){if(!g)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return v&&(typeof v=="object"||typeof v=="function")?v:g}function q(g,v){if(typeof v!="function"&&v!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof v);g.prototype=Object.create(v&&v.prototype,{constructor:{value:g,enumerable:!1,writable:!0,configurable:!0}}),v&&(Object.setPrototypeOf?Object.setPrototypeOf(g,v):g.__proto__=v)}function _(g){return g instanceof t.default||g instanceof e.BlockEmbed}var A=function(g){q(v,g);function v(m,w){c(this,v);var T=E(this,(v.__proto__||Object.getPrototypeOf(v)).call(this,m));return T.emitter=w.emitter,Array.isArray(w.whitelist)&&(T.whitelist=w.whitelist.reduce(function(R,B){return R[B]=!0,R},{})),T.domNode.addEventListener("DOMNodeInserted",function(){}),T.optimize(),T.enable(),T}return k(v,[{key:"batchStart",value:function(){this.batch=!0}},{key:"batchEnd",value:function(){this.batch=!1,this.optimize()}},{key:"deleteAt",value:function(w,T){var R=this.line(w),B=x(R,2),C=B[0],W=B[1],M=this.line(w+T),I=x(M,1),O=I[0];if(b(v.prototype.__proto__||Object.getPrototypeOf(v.prototype),"deleteAt",this).call(this,w,T),O!=null&&C!==O&&W>0){if(C instanceof e.BlockEmbed||O instanceof e.BlockEmbed){this.optimize();return}if(C instanceof r.default){var S=C.newlineIndex(C.length(),!0);if(S>-1&&(C=C.split(S+1),C===O)){this.optimize();return}}else if(O instanceof r.default){var L=O.newlineIndex(0);L>-1&&O.split(L+1)}var F=O.children.head instanceof o.default?null:O.children.head;C.moveChildren(O,F),C.remove()}this.optimize()}},{key:"enable",value:function(){var w=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!0;this.domNode.setAttribute("contenteditable",w)}},{key:"formatAt",value:function(w,T,R,B){this.whitelist!=null&&!this.whitelist[R]||(b(v.prototype.__proto__||Object.getPrototypeOf(v.prototype),"formatAt",this).call(this,w,T,R,B),this.optimize())}},{key:"insertAt",value:function(w,T,R){if(!(R!=null&&this.whitelist!=null&&!this.whitelist[T])){if(w>=this.length())if(R==null||p.default.query(T,p.default.Scope.BLOCK)==null){var B=p.default.create(this.statics.defaultChild);this.appendChild(B),R==null&&T.endsWith(`
`)&&(T=T.slice(0,-1)),B.insertAt(0,T,R)}else{var C=p.default.create(T,R);this.appendChild(C)}else b(v.prototype.__proto__||Object.getPrototypeOf(v.prototype),"insertAt",this).call(this,w,T,R);this.optimize()}}},{key:"insertBefore",value:function(w,T){if(w.statics.scope===p.default.Scope.INLINE_BLOT){var R=p.default.create(this.statics.defaultChild);R.appendChild(w),w=R}b(v.prototype.__proto__||Object.getPrototypeOf(v.prototype),"insertBefore",this).call(this,w,T)}},{key:"leaf",value:function(w){return this.path(w).pop()||[null,-1]}},{key:"line",value:function(w){return w===this.length()?this.line(w-1):this.descendant(_,w)}},{key:"lines",value:function(){var w=arguments.length>0&&arguments[0]!==void 0?arguments[0]:0,T=arguments.length>1&&arguments[1]!==void 0?arguments[1]:Number.MAX_VALUE,R=function B(C,W,M){var I=[],O=M;return C.children.forEachAt(W,M,function(S,L,F){_(S)?I.push(S):S instanceof p.default.Container&&(I=I.concat(B(S,L,O))),O-=F}),I};return R(this,w,T)}},{key:"optimize",value:function(){var w=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],T=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};this.batch!==!0&&(b(v.prototype.__proto__||Object.getPrototypeOf(v.prototype),"optimize",this).call(this,w,T),w.length>0&&this.emitter.emit(i.default.events.SCROLL_OPTIMIZE,w,T))}},{key:"path",value:function(w){return b(v.prototype.__proto__||Object.getPrototypeOf(v.prototype),"path",this).call(this,w).slice(1)}},{key:"update",value:function(w){if(this.batch!==!0){var T=i.default.sources.USER;typeof w=="string"&&(T=w),Array.isArray(w)||(w=this.observer.takeRecords()),w.length>0&&this.emitter.emit(i.default.events.SCROLL_BEFORE_UPDATE,T,w),b(v.prototype.__proto__||Object.getPrototypeOf(v.prototype),"update",this).call(this,w.concat([])),w.length>0&&this.emitter.emit(i.default.events.SCROLL_UPDATE,T,w)}}}]),v}(p.default.Scroll);A.blotName="scroll",A.className="ql-editor",A.tagName="DIV",A.defaultChild="block",A.allowedChildren=[t.default,e.BlockEmbed,f.default],d.default=A},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0}),d.SHORTKEY=d.default=void 0;var x=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(N){return typeof N}:function(N){return N&&typeof Symbol=="function"&&N.constructor===Symbol&&N!==Symbol.prototype?"symbol":typeof N},k=function(){function N(j,H){var U=[],$=!0,Q=!1,J=void 0;try{for(var ee=j[Symbol.iterator](),ie;!($=(ie=ee.next()).done)&&(U.push(ie.value),!(H&&U.length===H));$=!0);}catch(le){Q=!0,J=le}finally{try{!$&&ee.return&&ee.return()}finally{if(Q)throw J}}return U}return function(j,H){if(Array.isArray(j))return j;if(Symbol.iterator in Object(j))return N(j,H);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),b=function(){function N(j,H){for(var U=0;U<H.length;U++){var $=H[U];$.enumerable=$.enumerable||!1,$.configurable=!0,"value"in $&&($.writable=!0),Object.defineProperty(j,$.key,$)}}return function(j,H,U){return H&&N(j.prototype,H),U&&N(j,U),j}}(),y=h(21),p=g(y),s=h(11),i=g(s),e=h(3),t=g(e),u=h(2),o=g(u),a=h(20),r=g(a),l=h(0),f=g(l),n=h(5),c=g(n),E=h(10),q=g(E),_=h(9),A=g(_);function g(N){return N&&N.__esModule?N:{default:N}}function v(N,j,H){return j in N?Object.defineProperty(N,j,{value:H,enumerable:!0,configurable:!0,writable:!0}):N[j]=H,N}function m(N,j){if(!(N instanceof j))throw new TypeError("Cannot call a class as a function")}function w(N,j){if(!N)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return j&&(typeof j=="object"||typeof j=="function")?j:N}function T(N,j){if(typeof j!="function"&&j!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof j);N.prototype=Object.create(j&&j.prototype,{constructor:{value:N,enumerable:!1,writable:!0,configurable:!0}}),j&&(Object.setPrototypeOf?Object.setPrototypeOf(N,j):N.__proto__=j)}var R=(0,q.default)("quill:keyboard"),B=/Mac/i.test(navigator.platform)?"metaKey":"ctrlKey",C=function(N){T(j,N),b(j,null,[{key:"match",value:function(U,$){return $=D($),["altKey","ctrlKey","metaKey","shiftKey"].some(function(Q){return!!$[Q]!==U[Q]&&$[Q]!==null})?!1:$.key===(U.which||U.keyCode)}}]);function j(H,U){m(this,j);var $=w(this,(j.__proto__||Object.getPrototypeOf(j)).call(this,H,U));return $.bindings={},Object.keys($.options.bindings).forEach(function(Q){Q==="list autofill"&&H.scroll.whitelist!=null&&!H.scroll.whitelist.list||$.options.bindings[Q]&&$.addBinding($.options.bindings[Q])}),$.addBinding({key:j.keys.ENTER,shiftKey:null},S),$.addBinding({key:j.keys.ENTER,metaKey:null,ctrlKey:null,altKey:null},function(){}),/Firefox/i.test(navigator.userAgent)?($.addBinding({key:j.keys.BACKSPACE},{collapsed:!0},M),$.addBinding({key:j.keys.DELETE},{collapsed:!0},I)):($.addBinding({key:j.keys.BACKSPACE},{collapsed:!0,prefix:/^.?$/},M),$.addBinding({key:j.keys.DELETE},{collapsed:!0,suffix:/^.?$/},I)),$.addBinding({key:j.keys.BACKSPACE},{collapsed:!1},O),$.addBinding({key:j.keys.DELETE},{collapsed:!1},O),$.addBinding({key:j.keys.BACKSPACE,altKey:null,ctrlKey:null,metaKey:null,shiftKey:null},{collapsed:!0,offset:0},M),$.listen(),$}return b(j,[{key:"addBinding",value:function(U){var $=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},Q=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},J=D(U);if(J==null||J.key==null)return R.warn("Attempted to add invalid keyboard binding",J);typeof $=="function"&&($={handler:$}),typeof Q=="function"&&(Q={handler:Q}),J=(0,t.default)(J,$,Q),this.bindings[J.key]=this.bindings[J.key]||[],this.bindings[J.key].push(J)}},{key:"listen",value:function(){var U=this;this.quill.root.addEventListener("keydown",function($){if(!$.defaultPrevented){var Q=$.which||$.keyCode,J=(U.bindings[Q]||[]).filter(function(ae){return j.match($,ae)});if(J.length!==0){var ee=U.quill.getSelection();if(!(ee==null||!U.quill.hasFocus())){var ie=U.quill.getLine(ee.index),le=k(ie,2),se=le[0],ue=le[1],K=U.quill.getLeaf(ee.index),V=k(K,2),Y=V[0],X=V[1],Z=ee.length===0?[Y,X]:U.quill.getLeaf(ee.index+ee.length),te=k(Z,2),ne=te[0],re=te[1],fe=Y instanceof f.default.Text?Y.value().slice(0,X):"",de=ne instanceof f.default.Text?ne.value().slice(re):"",oe={collapsed:ee.length===0,empty:ee.length===0&&se.length()<=1,format:U.quill.getFormat(ee),offset:ue,prefix:fe,suffix:de},Te=J.some(function(ae){if(ae.collapsed!=null&&ae.collapsed!==oe.collapsed||ae.empty!=null&&ae.empty!==oe.empty||ae.offset!=null&&ae.offset!==oe.offset)return!1;if(Array.isArray(ae.format)){if(ae.format.every(function(he){return oe.format[he]==null}))return!1}else if(x(ae.format)==="object"&&!Object.keys(ae.format).every(function(he){return ae.format[he]===!0?oe.format[he]!=null:ae.format[he]===!1?oe.format[he]==null:(0,i.default)(ae.format[he],oe.format[he])}))return!1;return ae.prefix!=null&&!ae.prefix.test(oe.prefix)||ae.suffix!=null&&!ae.suffix.test(oe.suffix)?!1:ae.handler.call(U,ee,oe)!==!0});Te&&$.preventDefault()}}}})}}]),j}(A.default);C.keys={BACKSPACE:8,TAB:9,ENTER:13,ESCAPE:27,LEFT:37,UP:38,RIGHT:39,DOWN:40,DELETE:46},C.DEFAULTS={bindings:{bold:F("bold"),italic:F("italic"),underline:F("underline"),indent:{key:C.keys.TAB,format:["blockquote","indent","list"],handler:function(j,H){if(H.collapsed&&H.offset!==0)return!0;this.quill.format("indent","+1",c.default.sources.USER)}},outdent:{key:C.keys.TAB,shiftKey:!0,format:["blockquote","indent","list"],handler:function(j,H){if(H.collapsed&&H.offset!==0)return!0;this.quill.format("indent","-1",c.default.sources.USER)}},"outdent backspace":{key:C.keys.BACKSPACE,collapsed:!0,shiftKey:null,metaKey:null,ctrlKey:null,altKey:null,format:["indent","list"],offset:0,handler:function(j,H){H.format.indent!=null?this.quill.format("indent","-1",c.default.sources.USER):H.format.list!=null&&this.quill.format("list",!1,c.default.sources.USER)}},"indent code-block":L(!0),"outdent code-block":L(!1),"remove tab":{key:C.keys.TAB,shiftKey:!0,collapsed:!0,prefix:/\t$/,handler:function(j){this.quill.deleteText(j.index-1,1,c.default.sources.USER)}},tab:{key:C.keys.TAB,handler:function(j){this.quill.history.cutoff();var H=new o.default().retain(j.index).delete(j.length).insert("	");this.quill.updateContents(H,c.default.sources.USER),this.quill.history.cutoff(),this.quill.setSelection(j.index+1,c.default.sources.SILENT)}},"list empty enter":{key:C.keys.ENTER,collapsed:!0,format:["list"],empty:!0,handler:function(j,H){this.quill.format("list",!1,c.default.sources.USER),H.format.indent&&this.quill.format("indent",!1,c.default.sources.USER)}},"checklist enter":{key:C.keys.ENTER,collapsed:!0,format:{list:"checked"},handler:function(j){var H=this.quill.getLine(j.index),U=k(H,2),$=U[0],Q=U[1],J=(0,t.default)({},$.formats(),{list:"checked"}),ee=new o.default().retain(j.index).insert(`
`,J).retain($.length()-Q-1).retain(1,{list:"unchecked"});this.quill.updateContents(ee,c.default.sources.USER),this.quill.setSelection(j.index+1,c.default.sources.SILENT),this.quill.scrollIntoView()}},"header enter":{key:C.keys.ENTER,collapsed:!0,format:["header"],suffix:/^$/,handler:function(j,H){var U=this.quill.getLine(j.index),$=k(U,2),Q=$[0],J=$[1],ee=new o.default().retain(j.index).insert(`
`,H.format).retain(Q.length()-J-1).retain(1,{header:null});this.quill.updateContents(ee,c.default.sources.USER),this.quill.setSelection(j.index+1,c.default.sources.SILENT),this.quill.scrollIntoView()}},"list autofill":{key:" ",collapsed:!0,format:{list:!1},prefix:/^\s*?(\d+\.|-|\*|\[ ?\]|\[x\])$/,handler:function(j,H){var U=H.prefix.length,$=this.quill.getLine(j.index),Q=k($,2),J=Q[0],ee=Q[1];if(ee>U)return!0;var ie=void 0;switch(H.prefix.trim()){case"[]":case"[ ]":ie="unchecked";break;case"[x]":ie="checked";break;case"-":case"*":ie="bullet";break;default:ie="ordered"}this.quill.insertText(j.index," ",c.default.sources.USER),this.quill.history.cutoff();var le=new o.default().retain(j.index-ee).delete(U+1).retain(J.length()-2-ee).retain(1,{list:ie});this.quill.updateContents(le,c.default.sources.USER),this.quill.history.cutoff(),this.quill.setSelection(j.index-U,c.default.sources.SILENT)}},"code exit":{key:C.keys.ENTER,collapsed:!0,format:["code-block"],prefix:/\n\n$/,suffix:/^\s+$/,handler:function(j){var H=this.quill.getLine(j.index),U=k(H,2),$=U[0],Q=U[1],J=new o.default().retain(j.index+$.length()-Q-2).retain(1,{"code-block":null}).delete(1);this.quill.updateContents(J,c.default.sources.USER)}},"embed left":W(C.keys.LEFT,!1),"embed left shift":W(C.keys.LEFT,!0),"embed right":W(C.keys.RIGHT,!1),"embed right shift":W(C.keys.RIGHT,!0)}};function W(N,j){var H,U=N===C.keys.LEFT?"prefix":"suffix";return H={key:N,shiftKey:j,altKey:null},v(H,U,/^$/),v(H,"handler",function(Q){var J=Q.index;N===C.keys.RIGHT&&(J+=Q.length+1);var ee=this.quill.getLeaf(J),ie=k(ee,1),le=ie[0];return le instanceof f.default.Embed?(N===C.keys.LEFT?j?this.quill.setSelection(Q.index-1,Q.length+1,c.default.sources.USER):this.quill.setSelection(Q.index-1,c.default.sources.USER):j?this.quill.setSelection(Q.index,Q.length+1,c.default.sources.USER):this.quill.setSelection(Q.index+Q.length+1,c.default.sources.USER),!1):!0}),H}function M(N,j){if(!(N.index===0||this.quill.getLength()<=1)){var H=this.quill.getLine(N.index),U=k(H,1),$=U[0],Q={};if(j.offset===0){var J=this.quill.getLine(N.index-1),ee=k(J,1),ie=ee[0];if(ie!=null&&ie.length()>1){var le=$.formats(),se=this.quill.getFormat(N.index-1,1);Q=r.default.attributes.diff(le,se)||{}}}var ue=/[\uD800-\uDBFF][\uDC00-\uDFFF]$/.test(j.prefix)?2:1;this.quill.deleteText(N.index-ue,ue,c.default.sources.USER),Object.keys(Q).length>0&&this.quill.formatLine(N.index-ue,ue,Q,c.default.sources.USER),this.quill.focus()}}function I(N,j){var H=/^[\uD800-\uDBFF][\uDC00-\uDFFF]/.test(j.suffix)?2:1;if(!(N.index>=this.quill.getLength()-H)){var U={},$=0,Q=this.quill.getLine(N.index),J=k(Q,1),ee=J[0];if(j.offset>=ee.length()-1){var ie=this.quill.getLine(N.index+1),le=k(ie,1),se=le[0];if(se){var ue=ee.formats(),K=this.quill.getFormat(N.index,1);U=r.default.attributes.diff(ue,K)||{},$=se.length()}}this.quill.deleteText(N.index,H,c.default.sources.USER),Object.keys(U).length>0&&this.quill.formatLine(N.index+$-1,H,U,c.default.sources.USER)}}function O(N){var j=this.quill.getLines(N),H={};if(j.length>1){var U=j[0].formats(),$=j[j.length-1].formats();H=r.default.attributes.diff($,U)||{}}this.quill.deleteText(N,c.default.sources.USER),Object.keys(H).length>0&&this.quill.formatLine(N.index,1,H,c.default.sources.USER),this.quill.setSelection(N.index,c.default.sources.SILENT),this.quill.focus()}function S(N,j){var H=this;N.length>0&&this.quill.scroll.deleteAt(N.index,N.length);var U=Object.keys(j.format).reduce(function($,Q){return f.default.query(Q,f.default.Scope.BLOCK)&&!Array.isArray(j.format[Q])&&($[Q]=j.format[Q]),$},{});this.quill.insertText(N.index,`
`,U,c.default.sources.USER),this.quill.setSelection(N.index+1,c.default.sources.SILENT),this.quill.focus(),Object.keys(j.format).forEach(function($){U[$]==null&&(Array.isArray(j.format[$])||$!=="link"&&H.quill.format($,j.format[$],c.default.sources.USER))})}function L(N){return{key:C.keys.TAB,shiftKey:!N,format:{"code-block":!0},handler:function(H){var U=f.default.query("code-block"),$=H.index,Q=H.length,J=this.quill.scroll.descendant(U,$),ee=k(J,2),ie=ee[0],le=ee[1];if(ie!=null){var se=this.quill.getIndex(ie),ue=ie.newlineIndex(le,!0)+1,K=ie.newlineIndex(se+le+Q),V=ie.domNode.textContent.slice(ue,K).split(`
`);le=0,V.forEach(function(Y,X){N?(ie.insertAt(ue+le,U.TAB),le+=U.TAB.length,X===0?$+=U.TAB.length:Q+=U.TAB.length):Y.startsWith(U.TAB)&&(ie.deleteAt(ue+le,U.TAB.length),le-=U.TAB.length,X===0?$-=U.TAB.length:Q-=U.TAB.length),le+=Y.length+1}),this.quill.update(c.default.sources.USER),this.quill.setSelection($,Q,c.default.sources.SILENT)}}}}function F(N){return{key:N[0].toUpperCase(),shortKey:!0,handler:function(H,U){this.quill.format(N,!U.format[N],c.default.sources.USER)}}}function D(N){if(typeof N=="string"||typeof N=="number")return D({key:N});if((typeof N=="undefined"?"undefined":x(N))==="object"&&(N=(0,p.default)(N,!1)),typeof N.key=="string")if(C.keys[N.key.toUpperCase()]!=null)N.key=C.keys[N.key.toUpperCase()];else if(N.key.length===1)N.key=N.key.toUpperCase().charCodeAt(0);else return null;return N.shortKey&&(N[B]=N.shortKey,delete N.shortKey),N}d.default=C,d.SHORTKEY=B},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0});var x=function(){function r(l,f){var n=[],c=!0,E=!1,q=void 0;try{for(var _=l[Symbol.iterator](),A;!(c=(A=_.next()).done)&&(n.push(A.value),!(f&&n.length===f));c=!0);}catch(g){E=!0,q=g}finally{try{!c&&_.return&&_.return()}finally{if(E)throw q}}return n}return function(l,f){if(Array.isArray(l))return l;if(Symbol.iterator in Object(l))return r(l,f);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),k=function r(l,f,n){l===null&&(l=Function.prototype);var c=Object.getOwnPropertyDescriptor(l,f);if(c===void 0){var E=Object.getPrototypeOf(l);return E===null?void 0:r(E,f,n)}else{if("value"in c)return c.value;var q=c.get;return q===void 0?void 0:q.call(n)}},b=function(){function r(l,f){for(var n=0;n<f.length;n++){var c=f[n];c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(l,c.key,c)}}return function(l,f,n){return f&&r(l.prototype,f),n&&r(l,n),l}}(),y=h(0),p=e(y),s=h(7),i=e(s);function e(r){return r&&r.__esModule?r:{default:r}}function t(r,l){if(!(r instanceof l))throw new TypeError("Cannot call a class as a function")}function u(r,l){if(!r)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return l&&(typeof l=="object"||typeof l=="function")?l:r}function o(r,l){if(typeof l!="function"&&l!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof l);r.prototype=Object.create(l&&l.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),l&&(Object.setPrototypeOf?Object.setPrototypeOf(r,l):r.__proto__=l)}var a=function(r){o(l,r),b(l,null,[{key:"value",value:function(){}}]);function l(f,n){t(this,l);var c=u(this,(l.__proto__||Object.getPrototypeOf(l)).call(this,f));return c.selection=n,c.textNode=document.createTextNode(l.CONTENTS),c.domNode.appendChild(c.textNode),c._length=0,c}return b(l,[{key:"detach",value:function(){this.parent!=null&&this.parent.removeChild(this)}},{key:"format",value:function(n,c){if(this._length!==0)return k(l.prototype.__proto__||Object.getPrototypeOf(l.prototype),"format",this).call(this,n,c);for(var E=this,q=0;E!=null&&E.statics.scope!==p.default.Scope.BLOCK_BLOT;)q+=E.offset(E.parent),E=E.parent;E!=null&&(this._length=l.CONTENTS.length,E.optimize(),E.formatAt(q,l.CONTENTS.length,n,c),this._length=0)}},{key:"index",value:function(n,c){return n===this.textNode?0:k(l.prototype.__proto__||Object.getPrototypeOf(l.prototype),"index",this).call(this,n,c)}},{key:"length",value:function(){return this._length}},{key:"position",value:function(){return[this.textNode,this.textNode.data.length]}},{key:"remove",value:function(){k(l.prototype.__proto__||Object.getPrototypeOf(l.prototype),"remove",this).call(this),this.parent=null}},{key:"restore",value:function(){if(!(this.selection.composing||this.parent==null)){var n=this.textNode,c=this.selection.getNativeRange(),E=void 0,q=void 0,_=void 0;if(c!=null&&c.start.node===n&&c.end.node===n){var A=[n,c.start.offset,c.end.offset];E=A[0],q=A[1],_=A[2]}for(;this.domNode.lastChild!=null&&this.domNode.lastChild!==this.textNode;)this.domNode.parentNode.insertBefore(this.domNode.lastChild,this.domNode);if(this.textNode.data!==l.CONTENTS){var g=this.textNode.data.split(l.CONTENTS).join("");this.next instanceof i.default?(E=this.next.domNode,this.next.insertAt(0,g),this.textNode.data=l.CONTENTS):(this.textNode.data=g,this.parent.insertBefore(p.default.create(this.textNode),this),this.textNode=document.createTextNode(l.CONTENTS),this.domNode.appendChild(this.textNode))}if(this.remove(),q!=null){var v=[q,_].map(function(w){return Math.max(0,Math.min(E.data.length,w-1))}),m=x(v,2);return q=m[0],_=m[1],{startNode:E,startOffset:q,endNode:E,endOffset:_}}}}},{key:"update",value:function(n,c){var E=this;if(n.some(function(_){return _.type==="characterData"&&_.target===E.textNode})){var q=this.restore();q&&(c.range=q)}}},{key:"value",value:function(){return""}}]),l}(p.default.Embed);a.blotName="cursor",a.className="ql-cursor",a.tagName="span",a.CONTENTS="\uFEFF",d.default=a},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0});var x=h(0),k=p(x),b=h(4),y=p(b);function p(u){return u&&u.__esModule?u:{default:u}}function s(u,o){if(!(u instanceof o))throw new TypeError("Cannot call a class as a function")}function i(u,o){if(!u)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return o&&(typeof o=="object"||typeof o=="function")?o:u}function e(u,o){if(typeof o!="function"&&o!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof o);u.prototype=Object.create(o&&o.prototype,{constructor:{value:u,enumerable:!1,writable:!0,configurable:!0}}),o&&(Object.setPrototypeOf?Object.setPrototypeOf(u,o):u.__proto__=o)}var t=function(u){e(o,u);function o(){return s(this,o),i(this,(o.__proto__||Object.getPrototypeOf(o)).apply(this,arguments))}return o}(k.default.Container);t.allowedChildren=[y.default,b.BlockEmbed,t],d.default=t},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0}),d.ColorStyle=d.ColorClass=d.ColorAttributor=void 0;var x=function(){function a(r,l){for(var f=0;f<l.length;f++){var n=l[f];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(r,n.key,n)}}return function(r,l,f){return l&&a(r.prototype,l),f&&a(r,f),r}}(),k=function a(r,l,f){r===null&&(r=Function.prototype);var n=Object.getOwnPropertyDescriptor(r,l);if(n===void 0){var c=Object.getPrototypeOf(r);return c===null?void 0:a(c,l,f)}else{if("value"in n)return n.value;var E=n.get;return E===void 0?void 0:E.call(f)}},b=h(0),y=p(b);function p(a){return a&&a.__esModule?a:{default:a}}function s(a,r){if(!(a instanceof r))throw new TypeError("Cannot call a class as a function")}function i(a,r){if(!a)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return r&&(typeof r=="object"||typeof r=="function")?r:a}function e(a,r){if(typeof r!="function"&&r!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof r);a.prototype=Object.create(r&&r.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),r&&(Object.setPrototypeOf?Object.setPrototypeOf(a,r):a.__proto__=r)}var t=function(a){e(r,a);function r(){return s(this,r),i(this,(r.__proto__||Object.getPrototypeOf(r)).apply(this,arguments))}return x(r,[{key:"value",value:function(f){var n=k(r.prototype.__proto__||Object.getPrototypeOf(r.prototype),"value",this).call(this,f);return n.startsWith("rgb(")?(n=n.replace(/^[^\d]+/,"").replace(/[^\d]+$/,""),"#"+n.split(",").map(function(c){return("00"+parseInt(c).toString(16)).slice(-2)}).join("")):n}}]),r}(y.default.Attributor.Style),u=new y.default.Attributor.Class("color","ql-color",{scope:y.default.Scope.INLINE}),o=new t("color","color",{scope:y.default.Scope.INLINE});d.ColorAttributor=t,d.ColorClass=u,d.ColorStyle=o},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0}),d.sanitize=d.default=void 0;var x=function(){function o(a,r){for(var l=0;l<r.length;l++){var f=r[l];f.enumerable=f.enumerable||!1,f.configurable=!0,"value"in f&&(f.writable=!0),Object.defineProperty(a,f.key,f)}}return function(a,r,l){return r&&o(a.prototype,r),l&&o(a,l),a}}(),k=function o(a,r,l){a===null&&(a=Function.prototype);var f=Object.getOwnPropertyDescriptor(a,r);if(f===void 0){var n=Object.getPrototypeOf(a);return n===null?void 0:o(n,r,l)}else{if("value"in f)return f.value;var c=f.get;return c===void 0?void 0:c.call(l)}},b=h(6),y=p(b);function p(o){return o&&o.__esModule?o:{default:o}}function s(o,a){if(!(o instanceof a))throw new TypeError("Cannot call a class as a function")}function i(o,a){if(!o)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return a&&(typeof a=="object"||typeof a=="function")?a:o}function e(o,a){if(typeof a!="function"&&a!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof a);o.prototype=Object.create(a&&a.prototype,{constructor:{value:o,enumerable:!1,writable:!0,configurable:!0}}),a&&(Object.setPrototypeOf?Object.setPrototypeOf(o,a):o.__proto__=a)}var t=function(o){e(a,o);function a(){return s(this,a),i(this,(a.__proto__||Object.getPrototypeOf(a)).apply(this,arguments))}return x(a,[{key:"format",value:function(l,f){if(l!==this.statics.blotName||!f)return k(a.prototype.__proto__||Object.getPrototypeOf(a.prototype),"format",this).call(this,l,f);f=this.constructor.sanitize(f),this.domNode.setAttribute("href",f)}}],[{key:"create",value:function(l){var f=k(a.__proto__||Object.getPrototypeOf(a),"create",this).call(this,l);return l=this.sanitize(l),f.setAttribute("href",l),f.setAttribute("rel","noopener noreferrer"),f.setAttribute("target","_blank"),f}},{key:"formats",value:function(l){return l.getAttribute("href")}},{key:"sanitize",value:function(l){return u(l,this.PROTOCOL_WHITELIST)?l:this.SANITIZED_URL}}]),a}(y.default);t.blotName="link",t.tagName="A",t.SANITIZED_URL="about:blank",t.PROTOCOL_WHITELIST=["http","https","mailto","tel"];function u(o,a){var r=document.createElement("a");r.href=o;var l=r.href.slice(0,r.href.indexOf(":"));return a.indexOf(l)>-1}d.default=t,d.sanitize=u},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0});var x=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(a){return typeof a}:function(a){return a&&typeof Symbol=="function"&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},k=function(){function a(r,l){for(var f=0;f<l.length;f++){var n=l[f];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(r,n.key,n)}}return function(r,l,f){return l&&a(r.prototype,l),f&&a(r,f),r}}(),b=h(23),y=i(b),p=h(107),s=i(p);function i(a){return a&&a.__esModule?a:{default:a}}function e(a,r){if(!(a instanceof r))throw new TypeError("Cannot call a class as a function")}var t=0;function u(a,r){a.setAttribute(r,a.getAttribute(r)!=="true")}var o=function(){function a(r){var l=this;e(this,a),this.select=r,this.container=document.createElement("span"),this.buildPicker(),this.select.style.display="none",this.select.parentNode.insertBefore(this.container,this.select),this.label.addEventListener("mousedown",function(){l.togglePicker()}),this.label.addEventListener("keydown",function(f){switch(f.keyCode){case y.default.keys.ENTER:l.togglePicker();break;case y.default.keys.ESCAPE:l.escape(),f.preventDefault();break}}),this.select.addEventListener("change",this.update.bind(this))}return k(a,[{key:"togglePicker",value:function(){this.container.classList.toggle("ql-expanded"),u(this.label,"aria-expanded"),u(this.options,"aria-hidden")}},{key:"buildItem",value:function(l){var f=this,n=document.createElement("span");return n.tabIndex="0",n.setAttribute("role","button"),n.classList.add("ql-picker-item"),l.hasAttribute("value")&&n.setAttribute("data-value",l.getAttribute("value")),l.textContent&&n.setAttribute("data-label",l.textContent),n.addEventListener("click",function(){f.selectItem(n,!0)}),n.addEventListener("keydown",function(c){switch(c.keyCode){case y.default.keys.ENTER:f.selectItem(n,!0),c.preventDefault();break;case y.default.keys.ESCAPE:f.escape(),c.preventDefault();break}}),n}},{key:"buildLabel",value:function(){var l=document.createElement("span");return l.classList.add("ql-picker-label"),l.innerHTML=s.default,l.tabIndex="0",l.setAttribute("role","button"),l.setAttribute("aria-expanded","false"),this.container.appendChild(l),l}},{key:"buildOptions",value:function(){var l=this,f=document.createElement("span");f.classList.add("ql-picker-options"),f.setAttribute("aria-hidden","true"),f.tabIndex="-1",f.id="ql-picker-options-"+t,t+=1,this.label.setAttribute("aria-controls",f.id),this.options=f,[].slice.call(this.select.options).forEach(function(n){var c=l.buildItem(n);f.appendChild(c),n.selected===!0&&l.selectItem(c)}),this.container.appendChild(f)}},{key:"buildPicker",value:function(){var l=this;[].slice.call(this.select.attributes).forEach(function(f){l.container.setAttribute(f.name,f.value)}),this.container.classList.add("ql-picker"),this.label=this.buildLabel(),this.buildOptions()}},{key:"escape",value:function(){var l=this;this.close(),setTimeout(function(){return l.label.focus()},1)}},{key:"close",value:function(){this.container.classList.remove("ql-expanded"),this.label.setAttribute("aria-expanded","false"),this.options.setAttribute("aria-hidden","true")}},{key:"selectItem",value:function(l){var f=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!1,n=this.container.querySelector(".ql-selected");if(l!==n&&(n!=null&&n.classList.remove("ql-selected"),l!=null&&(l.classList.add("ql-selected"),this.select.selectedIndex=[].indexOf.call(l.parentNode.children,l),l.hasAttribute("data-value")?this.label.setAttribute("data-value",l.getAttribute("data-value")):this.label.removeAttribute("data-value"),l.hasAttribute("data-label")?this.label.setAttribute("data-label",l.getAttribute("data-label")):this.label.removeAttribute("data-label"),f))){if(typeof Event=="function")this.select.dispatchEvent(new Event("change"));else if((typeof Event=="undefined"?"undefined":x(Event))==="object"){var c=document.createEvent("Event");c.initEvent("change",!0,!0),this.select.dispatchEvent(c)}this.close()}}},{key:"update",value:function(){var l=void 0;if(this.select.selectedIndex>-1){var f=this.container.querySelector(".ql-picker-options").children[this.select.selectedIndex];l=this.select.options[this.select.selectedIndex],this.selectItem(f)}else this.selectItem(null);var n=l!=null&&l!==this.select.querySelector("option[selected]");this.label.classList.toggle("ql-active",n)}}]),a}();d.default=o},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0});var x=h(0),k=R(x),b=h(5),y=R(b),p=h(4),s=R(p),i=h(16),e=R(i),t=h(25),u=R(t),o=h(24),a=R(o),r=h(35),l=R(r),f=h(6),n=R(f),c=h(22),E=R(c),q=h(7),_=R(q),A=h(55),g=R(A),v=h(42),m=R(v),w=h(23),T=R(w);function R(B){return B&&B.__esModule?B:{default:B}}y.default.register({"blots/block":s.default,"blots/block/embed":p.BlockEmbed,"blots/break":e.default,"blots/container":u.default,"blots/cursor":a.default,"blots/embed":l.default,"blots/inline":n.default,"blots/scroll":E.default,"blots/text":_.default,"modules/clipboard":g.default,"modules/history":m.default,"modules/keyboard":T.default}),k.default.register(s.default,e.default,a.default,n.default,E.default,_.default),d.default=y.default},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0});var x=h(1),k=function(){function b(y){this.domNode=y,this.domNode[x.DATA_KEY]={blot:this}}return Object.defineProperty(b.prototype,"statics",{get:function(){return this.constructor},enumerable:!0,configurable:!0}),b.create=function(y){if(this.tagName==null)throw new x.ParchmentError("Blot definition missing tagName");var p;return Array.isArray(this.tagName)?(typeof y=="string"&&(y=y.toUpperCase(),parseInt(y).toString()===y&&(y=parseInt(y))),typeof y=="number"?p=document.createElement(this.tagName[y-1]):this.tagName.indexOf(y)>-1?p=document.createElement(y):p=document.createElement(this.tagName[0])):p=document.createElement(this.tagName),this.className&&p.classList.add(this.className),p},b.prototype.attach=function(){this.parent!=null&&(this.scroll=this.parent.scroll)},b.prototype.clone=function(){var y=this.domNode.cloneNode(!1);return x.create(y)},b.prototype.detach=function(){this.parent!=null&&this.parent.removeChild(this),delete this.domNode[x.DATA_KEY]},b.prototype.deleteAt=function(y,p){var s=this.isolate(y,p);s.remove()},b.prototype.formatAt=function(y,p,s,i){var e=this.isolate(y,p);if(x.query(s,x.Scope.BLOT)!=null&&i)e.wrap(s,i);else if(x.query(s,x.Scope.ATTRIBUTE)!=null){var t=x.create(this.statics.scope);e.wrap(t),t.format(s,i)}},b.prototype.insertAt=function(y,p,s){var i=s==null?x.create("text",p):x.create(p,s),e=this.split(y);this.parent.insertBefore(i,e)},b.prototype.insertInto=function(y,p){p===void 0&&(p=null),this.parent!=null&&this.parent.children.remove(this);var s=null;y.children.insertBefore(this,p),p!=null&&(s=p.domNode),(this.domNode.parentNode!=y.domNode||this.domNode.nextSibling!=s)&&y.domNode.insertBefore(this.domNode,s),this.parent=y,this.attach()},b.prototype.isolate=function(y,p){var s=this.split(y);return s.split(p),s},b.prototype.length=function(){return 1},b.prototype.offset=function(y){return y===void 0&&(y=this.parent),this.parent==null||this==y?0:this.parent.children.offset(this)+this.parent.offset(y)},b.prototype.optimize=function(y){this.domNode[x.DATA_KEY]!=null&&delete this.domNode[x.DATA_KEY].mutations},b.prototype.remove=function(){this.domNode.parentNode!=null&&this.domNode.parentNode.removeChild(this.domNode),this.detach()},b.prototype.replace=function(y){y.parent!=null&&(y.parent.insertBefore(this,y.next),y.remove())},b.prototype.replaceWith=function(y,p){var s=typeof y=="string"?x.create(y,p):y;return s.replace(this),s},b.prototype.split=function(y,p){return y===0?this:this.next},b.prototype.update=function(y,p){},b.prototype.wrap=function(y,p){var s=typeof y=="string"?x.create(y,p):y;return this.parent!=null&&this.parent.insertBefore(s,this.next),s.appendChild(this),s},b.blotName="abstract",b}();d.default=k},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0});var x=h(12),k=h(32),b=h(33),y=h(1),p=function(){function s(i){this.attributes={},this.domNode=i,this.build()}return s.prototype.attribute=function(i,e){e?i.add(this.domNode,e)&&(i.value(this.domNode)!=null?this.attributes[i.attrName]=i:delete this.attributes[i.attrName]):(i.remove(this.domNode),delete this.attributes[i.attrName])},s.prototype.build=function(){var i=this;this.attributes={};var e=x.default.keys(this.domNode),t=k.default.keys(this.domNode),u=b.default.keys(this.domNode);e.concat(t).concat(u).forEach(function(o){var a=y.query(o,y.Scope.ATTRIBUTE);a instanceof x.default&&(i.attributes[a.attrName]=a)})},s.prototype.copy=function(i){var e=this;Object.keys(this.attributes).forEach(function(t){var u=e.attributes[t].value(e.domNode);i.format(t,u)})},s.prototype.move=function(i){var e=this;this.copy(i),Object.keys(this.attributes).forEach(function(t){e.attributes[t].remove(e.domNode)}),this.attributes={}},s.prototype.values=function(){var i=this;return Object.keys(this.attributes).reduce(function(e,t){return e[t]=i.attributes[t].value(i.domNode),e},{})},s}();d.default=p},function(P,d,h){var x=this&&this.__extends||function(){var p=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(s,i){s.__proto__=i}||function(s,i){for(var e in i)i.hasOwnProperty(e)&&(s[e]=i[e])};return function(s,i){p(s,i);function e(){this.constructor=s}s.prototype=i===null?Object.create(i):(e.prototype=i.prototype,new e)}}();Object.defineProperty(d,"__esModule",{value:!0});var k=h(12);function b(p,s){var i=p.getAttribute("class")||"";return i.split(/\s+/).filter(function(e){return e.indexOf(s+"-")===0})}var y=function(p){x(s,p);function s(){return p!==null&&p.apply(this,arguments)||this}return s.keys=function(i){return(i.getAttribute("class")||"").split(/\s+/).map(function(e){return e.split("-").slice(0,-1).join("-")})},s.prototype.add=function(i,e){return this.canAdd(i,e)?(this.remove(i),i.classList.add(this.keyName+"-"+e),!0):!1},s.prototype.remove=function(i){var e=b(i,this.keyName);e.forEach(function(t){i.classList.remove(t)}),i.classList.length===0&&i.removeAttribute("class")},s.prototype.value=function(i){var e=b(i,this.keyName)[0]||"",t=e.slice(this.keyName.length+1);return this.canAdd(i,t)?t:""},s}(k.default);d.default=y},function(P,d,h){var x=this&&this.__extends||function(){var p=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(s,i){s.__proto__=i}||function(s,i){for(var e in i)i.hasOwnProperty(e)&&(s[e]=i[e])};return function(s,i){p(s,i);function e(){this.constructor=s}s.prototype=i===null?Object.create(i):(e.prototype=i.prototype,new e)}}();Object.defineProperty(d,"__esModule",{value:!0});var k=h(12);function b(p){var s=p.split("-"),i=s.slice(1).map(function(e){return e[0].toUpperCase()+e.slice(1)}).join("");return s[0]+i}var y=function(p){x(s,p);function s(){return p!==null&&p.apply(this,arguments)||this}return s.keys=function(i){return(i.getAttribute("style")||"").split(";").map(function(e){var t=e.split(":");return t[0].trim()})},s.prototype.add=function(i,e){return this.canAdd(i,e)?(i.style[b(this.keyName)]=e,!0):!1},s.prototype.remove=function(i){i.style[b(this.keyName)]="",i.getAttribute("style")||i.removeAttribute("style")},s.prototype.value=function(i){var e=i.style[b(this.keyName)];return this.canAdd(i,e)?e:""},s}(k.default);d.default=y},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0});var x=function(){function y(p,s){for(var i=0;i<s.length;i++){var e=s[i];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(p,e.key,e)}}return function(p,s,i){return s&&y(p.prototype,s),i&&y(p,i),p}}();function k(y,p){if(!(y instanceof p))throw new TypeError("Cannot call a class as a function")}var b=function(){function y(p,s){k(this,y),this.quill=p,this.options=s,this.modules={}}return x(y,[{key:"init",value:function(){var s=this;Object.keys(this.options.modules).forEach(function(i){s.modules[i]==null&&s.addModule(i)})}},{key:"addModule",value:function(s){var i=this.quill.constructor.import("modules/"+s);return this.modules[s]=new i(this.quill,this.options.modules[s]||{}),this.modules[s]}}]),y}();b.DEFAULTS={modules:{}},b.themes={default:b},d.default=b},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0});var x=function(){function r(l,f){for(var n=0;n<f.length;n++){var c=f[n];c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(l,c.key,c)}}return function(l,f,n){return f&&r(l.prototype,f),n&&r(l,n),l}}(),k=function r(l,f,n){l===null&&(l=Function.prototype);var c=Object.getOwnPropertyDescriptor(l,f);if(c===void 0){var E=Object.getPrototypeOf(l);return E===null?void 0:r(E,f,n)}else{if("value"in c)return c.value;var q=c.get;return q===void 0?void 0:q.call(n)}},b=h(0),y=i(b),p=h(7),s=i(p);function i(r){return r&&r.__esModule?r:{default:r}}function e(r,l){if(!(r instanceof l))throw new TypeError("Cannot call a class as a function")}function t(r,l){if(!r)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return l&&(typeof l=="object"||typeof l=="function")?l:r}function u(r,l){if(typeof l!="function"&&l!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof l);r.prototype=Object.create(l&&l.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),l&&(Object.setPrototypeOf?Object.setPrototypeOf(r,l):r.__proto__=l)}var o="\uFEFF",a=function(r){u(l,r);function l(f){e(this,l);var n=t(this,(l.__proto__||Object.getPrototypeOf(l)).call(this,f));return n.contentNode=document.createElement("span"),n.contentNode.setAttribute("contenteditable",!1),[].slice.call(n.domNode.childNodes).forEach(function(c){n.contentNode.appendChild(c)}),n.leftGuard=document.createTextNode(o),n.rightGuard=document.createTextNode(o),n.domNode.appendChild(n.leftGuard),n.domNode.appendChild(n.contentNode),n.domNode.appendChild(n.rightGuard),n}return x(l,[{key:"index",value:function(n,c){return n===this.leftGuard?0:n===this.rightGuard?1:k(l.prototype.__proto__||Object.getPrototypeOf(l.prototype),"index",this).call(this,n,c)}},{key:"restore",value:function(n){var c=void 0,E=void 0,q=n.data.split(o).join("");if(n===this.leftGuard)if(this.prev instanceof s.default){var _=this.prev.length();this.prev.insertAt(_,q),c={startNode:this.prev.domNode,startOffset:_+q.length}}else E=document.createTextNode(q),this.parent.insertBefore(y.default.create(E),this),c={startNode:E,startOffset:q.length};else n===this.rightGuard&&(this.next instanceof s.default?(this.next.insertAt(0,q),c={startNode:this.next.domNode,startOffset:q.length}):(E=document.createTextNode(q),this.parent.insertBefore(y.default.create(E),this.next),c={startNode:E,startOffset:q.length}));return n.data=o,c}},{key:"update",value:function(n,c){var E=this;n.forEach(function(q){if(q.type==="characterData"&&(q.target===E.leftGuard||q.target===E.rightGuard)){var _=E.restore(q.target);_&&(c.range=_)}})}}]),l}(y.default.Embed);d.default=a},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0}),d.AlignStyle=d.AlignClass=d.AlignAttribute=void 0;var x=h(0),k=b(x);function b(e){return e&&e.__esModule?e:{default:e}}var y={scope:k.default.Scope.BLOCK,whitelist:["right","center","justify"]},p=new k.default.Attributor.Attribute("align","align",y),s=new k.default.Attributor.Class("align","ql-align",y),i=new k.default.Attributor.Style("align","text-align",y);d.AlignAttribute=p,d.AlignClass=s,d.AlignStyle=i},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0}),d.BackgroundStyle=d.BackgroundClass=void 0;var x=h(0),k=y(x),b=h(26);function y(i){return i&&i.__esModule?i:{default:i}}var p=new k.default.Attributor.Class("background","ql-bg",{scope:k.default.Scope.INLINE}),s=new b.ColorAttributor("background","background-color",{scope:k.default.Scope.INLINE});d.BackgroundClass=p,d.BackgroundStyle=s},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0}),d.DirectionStyle=d.DirectionClass=d.DirectionAttribute=void 0;var x=h(0),k=b(x);function b(e){return e&&e.__esModule?e:{default:e}}var y={scope:k.default.Scope.BLOCK,whitelist:["rtl"]},p=new k.default.Attributor.Attribute("direction","dir",y),s=new k.default.Attributor.Class("direction","ql-direction",y),i=new k.default.Attributor.Style("direction","direction",y);d.DirectionAttribute=p,d.DirectionClass=s,d.DirectionStyle=i},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0}),d.FontClass=d.FontStyle=void 0;var x=function(){function r(l,f){for(var n=0;n<f.length;n++){var c=f[n];c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(l,c.key,c)}}return function(l,f,n){return f&&r(l.prototype,f),n&&r(l,n),l}}(),k=function r(l,f,n){l===null&&(l=Function.prototype);var c=Object.getOwnPropertyDescriptor(l,f);if(c===void 0){var E=Object.getPrototypeOf(l);return E===null?void 0:r(E,f,n)}else{if("value"in c)return c.value;var q=c.get;return q===void 0?void 0:q.call(n)}},b=h(0),y=p(b);function p(r){return r&&r.__esModule?r:{default:r}}function s(r,l){if(!(r instanceof l))throw new TypeError("Cannot call a class as a function")}function i(r,l){if(!r)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return l&&(typeof l=="object"||typeof l=="function")?l:r}function e(r,l){if(typeof l!="function"&&l!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof l);r.prototype=Object.create(l&&l.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),l&&(Object.setPrototypeOf?Object.setPrototypeOf(r,l):r.__proto__=l)}var t={scope:y.default.Scope.INLINE,whitelist:["serif","monospace"]},u=new y.default.Attributor.Class("font","ql-font",t),o=function(r){e(l,r);function l(){return s(this,l),i(this,(l.__proto__||Object.getPrototypeOf(l)).apply(this,arguments))}return x(l,[{key:"value",value:function(n){return k(l.prototype.__proto__||Object.getPrototypeOf(l.prototype),"value",this).call(this,n).replace(/["']/g,"")}}]),l}(y.default.Attributor.Style),a=new o("font","font-family",t);d.FontStyle=a,d.FontClass=u},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0}),d.SizeStyle=d.SizeClass=void 0;var x=h(0),k=b(x);function b(s){return s&&s.__esModule?s:{default:s}}var y=new k.default.Attributor.Class("size","ql-size",{scope:k.default.Scope.INLINE,whitelist:["small","large","huge"]}),p=new k.default.Attributor.Style("size","font-size",{scope:k.default.Scope.INLINE,whitelist:["10px","18px","32px"]});d.SizeClass=y,d.SizeStyle=p},function(P,d,h){P.exports={align:{"":h(76),center:h(77),right:h(78),justify:h(79)},background:h(80),blockquote:h(81),bold:h(82),clean:h(83),code:h(58),"code-block":h(58),color:h(84),direction:{"":h(85),rtl:h(86)},float:{center:h(87),full:h(88),left:h(89),right:h(90)},formula:h(91),header:{1:h(92),2:h(93)},italic:h(94),image:h(95),indent:{"+1":h(96),"-1":h(97)},link:h(98),list:{ordered:h(99),bullet:h(100),check:h(101)},script:{sub:h(102),super:h(103)},strike:h(104),underline:h(105),video:h(106)}},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0}),d.getLastChangeIndex=d.default=void 0;var x=function(){function f(n,c){for(var E=0;E<c.length;E++){var q=c[E];q.enumerable=q.enumerable||!1,q.configurable=!0,"value"in q&&(q.writable=!0),Object.defineProperty(n,q.key,q)}}return function(n,c,E){return c&&f(n.prototype,c),E&&f(n,E),n}}(),k=h(0),b=e(k),y=h(5),p=e(y),s=h(9),i=e(s);function e(f){return f&&f.__esModule?f:{default:f}}function t(f,n){if(!(f instanceof n))throw new TypeError("Cannot call a class as a function")}function u(f,n){if(!f)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n&&(typeof n=="object"||typeof n=="function")?n:f}function o(f,n){if(typeof n!="function"&&n!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof n);f.prototype=Object.create(n&&n.prototype,{constructor:{value:f,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(f,n):f.__proto__=n)}var a=function(f){o(n,f);function n(c,E){t(this,n);var q=u(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,c,E));return q.lastRecorded=0,q.ignoreChange=!1,q.clear(),q.quill.on(p.default.events.EDITOR_CHANGE,function(_,A,g,v){_!==p.default.events.TEXT_CHANGE||q.ignoreChange||(!q.options.userOnly||v===p.default.sources.USER?q.record(A,g):q.transform(A))}),q.quill.keyboard.addBinding({key:"Z",shortKey:!0},q.undo.bind(q)),q.quill.keyboard.addBinding({key:"Z",shortKey:!0,shiftKey:!0},q.redo.bind(q)),/Win/i.test(navigator.platform)&&q.quill.keyboard.addBinding({key:"Y",shortKey:!0},q.redo.bind(q)),q}return x(n,[{key:"change",value:function(E,q){if(this.stack[E].length!==0){var _=this.stack[E].pop();this.stack[q].push(_),this.lastRecorded=0,this.ignoreChange=!0,this.quill.updateContents(_[E],p.default.sources.USER),this.ignoreChange=!1;var A=l(_[E]);this.quill.setSelection(A)}}},{key:"clear",value:function(){this.stack={undo:[],redo:[]}}},{key:"cutoff",value:function(){this.lastRecorded=0}},{key:"record",value:function(E,q){if(E.ops.length!==0){this.stack.redo=[];var _=this.quill.getContents().diff(q),A=Date.now();if(this.lastRecorded+this.options.delay>A&&this.stack.undo.length>0){var g=this.stack.undo.pop();_=_.compose(g.undo),E=g.redo.compose(E)}else this.lastRecorded=A;this.stack.undo.push({redo:E,undo:_}),this.stack.undo.length>this.options.maxStack&&this.stack.undo.shift()}}},{key:"redo",value:function(){this.change("redo","undo")}},{key:"transform",value:function(E){this.stack.undo.forEach(function(q){q.undo=E.transform(q.undo,!0),q.redo=E.transform(q.redo,!0)}),this.stack.redo.forEach(function(q){q.undo=E.transform(q.undo,!0),q.redo=E.transform(q.redo,!0)})}},{key:"undo",value:function(){this.change("undo","redo")}}]),n}(i.default);a.DEFAULTS={delay:1e3,maxStack:100,userOnly:!1};function r(f){var n=f.ops[f.ops.length-1];return n==null?!1:n.insert!=null?typeof n.insert=="string"&&n.insert.endsWith(`
`):n.attributes!=null?Object.keys(n.attributes).some(function(c){return b.default.query(c,b.default.Scope.BLOCK)!=null}):!1}function l(f){var n=f.reduce(function(E,q){return E+=q.delete||0,E},0),c=f.length()-n;return r(f)&&(c-=1),c}d.default=a,d.getLastChangeIndex=l},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0}),d.default=d.BaseTooltip=void 0;var x=function(){function S(L,F){for(var D=0;D<F.length;D++){var N=F[D];N.enumerable=N.enumerable||!1,N.configurable=!0,"value"in N&&(N.writable=!0),Object.defineProperty(L,N.key,N)}}return function(L,F,D){return F&&S(L.prototype,F),D&&S(L,D),L}}(),k=function S(L,F,D){L===null&&(L=Function.prototype);var N=Object.getOwnPropertyDescriptor(L,F);if(N===void 0){var j=Object.getPrototypeOf(L);return j===null?void 0:S(j,F,D)}else{if("value"in N)return N.value;var H=N.get;return H===void 0?void 0:H.call(D)}},b=h(3),y=A(b),p=h(2),s=A(p),i=h(8),e=A(i),t=h(23),u=A(t),o=h(34),a=A(o),r=h(59),l=A(r),f=h(60),n=A(f),c=h(28),E=A(c),q=h(61),_=A(q);function A(S){return S&&S.__esModule?S:{default:S}}function g(S,L){if(!(S instanceof L))throw new TypeError("Cannot call a class as a function")}function v(S,L){if(!S)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return L&&(typeof L=="object"||typeof L=="function")?L:S}function m(S,L){if(typeof L!="function"&&L!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof L);S.prototype=Object.create(L&&L.prototype,{constructor:{value:S,enumerable:!1,writable:!0,configurable:!0}}),L&&(Object.setPrototypeOf?Object.setPrototypeOf(S,L):S.__proto__=L)}var w=[!1,"center","right","justify"],T=["#000000","#e60000","#ff9900","#ffff00","#008a00","#0066cc","#9933ff","#ffffff","#facccc","#ffebcc","#ffffcc","#cce8cc","#cce0f5","#ebd6ff","#bbbbbb","#f06666","#ffc266","#ffff66","#66b966","#66a3e0","#c285ff","#888888","#a10000","#b26b00","#b2b200","#006100","#0047b2","#6b24b2","#444444","#5c0000","#663d00","#666600","#003700","#002966","#3d1466"],R=[!1,"serif","monospace"],B=["1","2","3",!1],C=["small",!1,"large","huge"],W=function(S){m(L,S);function L(F,D){g(this,L);var N=v(this,(L.__proto__||Object.getPrototypeOf(L)).call(this,F,D)),j=function H(U){if(!document.body.contains(F.root))return document.body.removeEventListener("click",H);N.tooltip!=null&&!N.tooltip.root.contains(U.target)&&document.activeElement!==N.tooltip.textbox&&!N.quill.hasFocus()&&N.tooltip.hide(),N.pickers!=null&&N.pickers.forEach(function($){$.container.contains(U.target)||$.close()})};return F.emitter.listenDOM("click",document.body,j),N}return x(L,[{key:"addModule",value:function(D){var N=k(L.prototype.__proto__||Object.getPrototypeOf(L.prototype),"addModule",this).call(this,D);return D==="toolbar"&&this.extendToolbar(N),N}},{key:"buildButtons",value:function(D,N){D.forEach(function(j){var H=j.getAttribute("class")||"";H.split(/\s+/).forEach(function(U){if(U.startsWith("ql-")&&(U=U.slice(3),N[U]!=null))if(U==="direction")j.innerHTML=N[U][""]+N[U].rtl;else if(typeof N[U]=="string")j.innerHTML=N[U];else{var $=j.value||"";$!=null&&N[U][$]&&(j.innerHTML=N[U][$])}})})}},{key:"buildPickers",value:function(D,N){var j=this;this.pickers=D.map(function(U){if(U.classList.contains("ql-align"))return U.querySelector("option")==null&&O(U,w),new n.default(U,N.align);if(U.classList.contains("ql-background")||U.classList.contains("ql-color")){var $=U.classList.contains("ql-background")?"background":"color";return U.querySelector("option")==null&&O(U,T,$==="background"?"#ffffff":"#000000"),new l.default(U,N[$])}else return U.querySelector("option")==null&&(U.classList.contains("ql-font")?O(U,R):U.classList.contains("ql-header")?O(U,B):U.classList.contains("ql-size")&&O(U,C)),new E.default(U)});var H=function(){j.pickers.forEach(function($){$.update()})};this.quill.on(e.default.events.EDITOR_CHANGE,H)}}]),L}(a.default);W.DEFAULTS=(0,y.default)(!0,{},a.default.DEFAULTS,{modules:{toolbar:{handlers:{formula:function(){this.quill.theme.tooltip.edit("formula")},image:function(){var L=this,F=this.container.querySelector("input.ql-image[type=file]");F==null&&(F=document.createElement("input"),F.setAttribute("type","file"),F.setAttribute("accept","image/png, image/gif, image/jpeg, image/bmp, image/x-icon"),F.classList.add("ql-image"),F.addEventListener("change",function(){if(F.files!=null&&F.files[0]!=null){var D=new FileReader;D.onload=function(N){var j=L.quill.getSelection(!0);L.quill.updateContents(new s.default().retain(j.index).delete(j.length).insert({image:N.target.result}),e.default.sources.USER),L.quill.setSelection(j.index+1,e.default.sources.SILENT),F.value=""},D.readAsDataURL(F.files[0])}}),this.container.appendChild(F)),F.click()},video:function(){this.quill.theme.tooltip.edit("video")}}}}});var M=function(S){m(L,S);function L(F,D){g(this,L);var N=v(this,(L.__proto__||Object.getPrototypeOf(L)).call(this,F,D));return N.textbox=N.root.querySelector('input[type="text"]'),N.listen(),N}return x(L,[{key:"listen",value:function(){var D=this;this.textbox.addEventListener("keydown",function(N){u.default.match(N,"enter")?(D.save(),N.preventDefault()):u.default.match(N,"escape")&&(D.cancel(),N.preventDefault())})}},{key:"cancel",value:function(){this.hide()}},{key:"edit",value:function(){var D=arguments.length>0&&arguments[0]!==void 0?arguments[0]:"link",N=arguments.length>1&&arguments[1]!==void 0?arguments[1]:null;this.root.classList.remove("ql-hidden"),this.root.classList.add("ql-editing"),N!=null?this.textbox.value=N:D!==this.root.getAttribute("data-mode")&&(this.textbox.value=""),this.position(this.quill.getBounds(this.quill.selection.savedRange)),this.textbox.select(),this.textbox.setAttribute("placeholder",this.textbox.getAttribute("data-"+D)||""),this.root.setAttribute("data-mode",D)}},{key:"restoreFocus",value:function(){var D=this.quill.scrollingContainer.scrollTop;this.quill.focus(),this.quill.scrollingContainer.scrollTop=D}},{key:"save",value:function(){var D=this.textbox.value;switch(this.root.getAttribute("data-mode")){case"link":{var N=this.quill.root.scrollTop;this.linkRange?(this.quill.formatText(this.linkRange,"link",D,e.default.sources.USER),delete this.linkRange):(this.restoreFocus(),this.quill.format("link",D,e.default.sources.USER)),this.quill.root.scrollTop=N;break}case"video":D=I(D);case"formula":{if(!D)break;var j=this.quill.getSelection(!0);if(j!=null){var H=j.index+j.length;this.quill.insertEmbed(H,this.root.getAttribute("data-mode"),D,e.default.sources.USER),this.root.getAttribute("data-mode")==="formula"&&this.quill.insertText(H+1," ",e.default.sources.USER),this.quill.setSelection(H+2,e.default.sources.USER)}break}}this.textbox.value="",this.hide()}}]),L}(_.default);function I(S){var L=S.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtube\.com\/watch.*v=([a-zA-Z0-9_-]+)/)||S.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtu\.be\/([a-zA-Z0-9_-]+)/);return L?(L[1]||"https")+"://www.youtube.com/embed/"+L[2]+"?showinfo=0":(L=S.match(/^(?:(https?):\/\/)?(?:www\.)?vimeo\.com\/(\d+)/))?(L[1]||"https")+"://player.vimeo.com/video/"+L[2]+"/":S}function O(S,L){var F=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!1;L.forEach(function(D){var N=document.createElement("option");D===F?N.setAttribute("selected","selected"):N.setAttribute("value",D),S.appendChild(N)})}d.BaseTooltip=M,d.default=W},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0});var x=function(){function k(){this.head=this.tail=null,this.length=0}return k.prototype.append=function(){for(var b=[],y=0;y<arguments.length;y++)b[y]=arguments[y];this.insertBefore(b[0],null),b.length>1&&this.append.apply(this,b.slice(1))},k.prototype.contains=function(b){for(var y,p=this.iterator();y=p();)if(y===b)return!0;return!1},k.prototype.insertBefore=function(b,y){b&&(b.next=y,y!=null?(b.prev=y.prev,y.prev!=null&&(y.prev.next=b),y.prev=b,y===this.head&&(this.head=b)):this.tail!=null?(this.tail.next=b,b.prev=this.tail,this.tail=b):(b.prev=null,this.head=this.tail=b),this.length+=1)},k.prototype.offset=function(b){for(var y=0,p=this.head;p!=null;){if(p===b)return y;y+=p.length(),p=p.next}return-1},k.prototype.remove=function(b){this.contains(b)&&(b.prev!=null&&(b.prev.next=b.next),b.next!=null&&(b.next.prev=b.prev),b===this.head&&(this.head=b.next),b===this.tail&&(this.tail=b.prev),this.length-=1)},k.prototype.iterator=function(b){return b===void 0&&(b=this.head),function(){var y=b;return b!=null&&(b=b.next),y}},k.prototype.find=function(b,y){y===void 0&&(y=!1);for(var p,s=this.iterator();p=s();){var i=p.length();if(b<i||y&&b===i&&(p.next==null||p.next.length()!==0))return[p,b];b-=i}return[null,0]},k.prototype.forEach=function(b){for(var y,p=this.iterator();y=p();)b(y)},k.prototype.forEachAt=function(b,y,p){if(!(y<=0))for(var s=this.find(b),i=s[0],e=s[1],t,u=b-e,o=this.iterator(i);(t=o())&&u<b+y;){var a=t.length();b>u?p(t,b-u,Math.min(y,u+a-b)):p(t,0,Math.min(a,b+y-u)),u+=a}},k.prototype.map=function(b){return this.reduce(function(y,p){return y.push(b(p)),y},[])},k.prototype.reduce=function(b,y){for(var p,s=this.iterator();p=s();)y=b(y,p);return y},k}();d.default=x},function(P,d,h){var x=this&&this.__extends||function(){var i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var u in t)t.hasOwnProperty(u)&&(e[u]=t[u])};return function(e,t){i(e,t);function u(){this.constructor=e}e.prototype=t===null?Object.create(t):(u.prototype=t.prototype,new u)}}();Object.defineProperty(d,"__esModule",{value:!0});var k=h(17),b=h(1),y={attributes:!0,characterData:!0,characterDataOldValue:!0,childList:!0,subtree:!0},p=100,s=function(i){x(e,i);function e(t){var u=i.call(this,t)||this;return u.scroll=u,u.observer=new MutationObserver(function(o){u.update(o)}),u.observer.observe(u.domNode,y),u.attach(),u}return e.prototype.detach=function(){i.prototype.detach.call(this),this.observer.disconnect()},e.prototype.deleteAt=function(t,u){this.update(),t===0&&u===this.length()?this.children.forEach(function(o){o.remove()}):i.prototype.deleteAt.call(this,t,u)},e.prototype.formatAt=function(t,u,o,a){this.update(),i.prototype.formatAt.call(this,t,u,o,a)},e.prototype.insertAt=function(t,u,o){this.update(),i.prototype.insertAt.call(this,t,u,o)},e.prototype.optimize=function(t,u){var o=this;t===void 0&&(t=[]),u===void 0&&(u={}),i.prototype.optimize.call(this,u);for(var a=[].slice.call(this.observer.takeRecords());a.length>0;)t.push(a.pop());for(var r=function(c,E){E===void 0&&(E=!0),!(c==null||c===o)&&c.domNode.parentNode!=null&&(c.domNode[b.DATA_KEY].mutations==null&&(c.domNode[b.DATA_KEY].mutations=[]),E&&r(c.parent))},l=function(c){c.domNode[b.DATA_KEY]==null||c.domNode[b.DATA_KEY].mutations==null||(c instanceof k.default&&c.children.forEach(l),c.optimize(u))},f=t,n=0;f.length>0;n+=1){if(n>=p)throw new Error("[Parchment] Maximum optimize iterations reached");for(f.forEach(function(c){var E=b.find(c.target,!0);E!=null&&(E.domNode===c.target&&(c.type==="childList"?(r(b.find(c.previousSibling,!1)),[].forEach.call(c.addedNodes,function(q){var _=b.find(q,!1);r(_,!1),_ instanceof k.default&&_.children.forEach(function(A){r(A,!1)})})):c.type==="attributes"&&r(E.prev)),r(E))}),this.children.forEach(l),f=[].slice.call(this.observer.takeRecords()),a=f.slice();a.length>0;)t.push(a.pop())}},e.prototype.update=function(t,u){var o=this;u===void 0&&(u={}),t=t||this.observer.takeRecords(),t.map(function(a){var r=b.find(a.target,!0);return r==null?null:r.domNode[b.DATA_KEY].mutations==null?(r.domNode[b.DATA_KEY].mutations=[a],r):(r.domNode[b.DATA_KEY].mutations.push(a),null)}).forEach(function(a){a==null||a===o||a.domNode[b.DATA_KEY]==null||a.update(a.domNode[b.DATA_KEY].mutations||[],u)}),this.domNode[b.DATA_KEY].mutations!=null&&i.prototype.update.call(this,this.domNode[b.DATA_KEY].mutations,u),this.optimize(t,u)},e.blotName="scroll",e.defaultChild="block",e.scope=b.Scope.BLOCK_BLOT,e.tagName="DIV",e}(k.default);d.default=s},function(P,d,h){var x=this&&this.__extends||function(){var s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(i,e){i.__proto__=e}||function(i,e){for(var t in e)e.hasOwnProperty(t)&&(i[t]=e[t])};return function(i,e){s(i,e);function t(){this.constructor=i}i.prototype=e===null?Object.create(e):(t.prototype=e.prototype,new t)}}();Object.defineProperty(d,"__esModule",{value:!0});var k=h(18),b=h(1);function y(s,i){if(Object.keys(s).length!==Object.keys(i).length)return!1;for(var e in s)if(s[e]!==i[e])return!1;return!0}var p=function(s){x(i,s);function i(){return s!==null&&s.apply(this,arguments)||this}return i.formats=function(e){if(e.tagName!==i.tagName)return s.formats.call(this,e)},i.prototype.format=function(e,t){var u=this;e===this.statics.blotName&&!t?(this.children.forEach(function(o){o instanceof k.default||(o=o.wrap(i.blotName,!0)),u.attributes.copy(o)}),this.unwrap()):s.prototype.format.call(this,e,t)},i.prototype.formatAt=function(e,t,u,o){if(this.formats()[u]!=null||b.query(u,b.Scope.ATTRIBUTE)){var a=this.isolate(e,t);a.format(u,o)}else s.prototype.formatAt.call(this,e,t,u,o)},i.prototype.optimize=function(e){s.prototype.optimize.call(this,e);var t=this.formats();if(Object.keys(t).length===0)return this.unwrap();var u=this.next;u instanceof i&&u.prev===this&&y(t,u.formats())&&(u.moveChildren(this),u.remove())},i.blotName="inline",i.scope=b.Scope.INLINE_BLOT,i.tagName="SPAN",i}(k.default);d.default=p},function(P,d,h){var x=this&&this.__extends||function(){var p=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(s,i){s.__proto__=i}||function(s,i){for(var e in i)i.hasOwnProperty(e)&&(s[e]=i[e])};return function(s,i){p(s,i);function e(){this.constructor=s}s.prototype=i===null?Object.create(i):(e.prototype=i.prototype,new e)}}();Object.defineProperty(d,"__esModule",{value:!0});var k=h(18),b=h(1),y=function(p){x(s,p);function s(){return p!==null&&p.apply(this,arguments)||this}return s.formats=function(i){var e=b.query(s.blotName).tagName;if(i.tagName!==e)return p.formats.call(this,i)},s.prototype.format=function(i,e){b.query(i,b.Scope.BLOCK)!=null&&(i===this.statics.blotName&&!e?this.replaceWith(s.blotName):p.prototype.format.call(this,i,e))},s.prototype.formatAt=function(i,e,t,u){b.query(t,b.Scope.BLOCK)!=null?this.format(t,u):p.prototype.formatAt.call(this,i,e,t,u)},s.prototype.insertAt=function(i,e,t){if(t==null||b.query(e,b.Scope.INLINE)!=null)p.prototype.insertAt.call(this,i,e,t);else{var u=this.split(i),o=b.create(e,t);u.parent.insertBefore(o,u)}},s.prototype.update=function(i,e){navigator.userAgent.match(/Trident/)?this.build():p.prototype.update.call(this,i,e)},s.blotName="block",s.scope=b.Scope.BLOCK_BLOT,s.tagName="P",s}(k.default);d.default=y},function(P,d,h){var x=this&&this.__extends||function(){var y=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(p,s){p.__proto__=s}||function(p,s){for(var i in s)s.hasOwnProperty(i)&&(p[i]=s[i])};return function(p,s){y(p,s);function i(){this.constructor=p}p.prototype=s===null?Object.create(s):(i.prototype=s.prototype,new i)}}();Object.defineProperty(d,"__esModule",{value:!0});var k=h(19),b=function(y){x(p,y);function p(){return y!==null&&y.apply(this,arguments)||this}return p.formats=function(s){},p.prototype.format=function(s,i){y.prototype.formatAt.call(this,0,this.length(),s,i)},p.prototype.formatAt=function(s,i,e,t){s===0&&i===this.length()?this.format(e,t):y.prototype.formatAt.call(this,s,i,e,t)},p.prototype.formats=function(){return this.statics.formats(this.domNode)},p}(k.default);d.default=b},function(P,d,h){var x=this&&this.__extends||function(){var p=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(s,i){s.__proto__=i}||function(s,i){for(var e in i)i.hasOwnProperty(e)&&(s[e]=i[e])};return function(s,i){p(s,i);function e(){this.constructor=s}s.prototype=i===null?Object.create(i):(e.prototype=i.prototype,new e)}}();Object.defineProperty(d,"__esModule",{value:!0});var k=h(19),b=h(1),y=function(p){x(s,p);function s(i){var e=p.call(this,i)||this;return e.text=e.statics.value(e.domNode),e}return s.create=function(i){return document.createTextNode(i)},s.value=function(i){var e=i.data;return e.normalize&&(e=e.normalize()),e},s.prototype.deleteAt=function(i,e){this.domNode.data=this.text=this.text.slice(0,i)+this.text.slice(i+e)},s.prototype.index=function(i,e){return this.domNode===i?e:-1},s.prototype.insertAt=function(i,e,t){t==null?(this.text=this.text.slice(0,i)+e+this.text.slice(i),this.domNode.data=this.text):p.prototype.insertAt.call(this,i,e,t)},s.prototype.length=function(){return this.text.length},s.prototype.optimize=function(i){p.prototype.optimize.call(this,i),this.text=this.statics.value(this.domNode),this.text.length===0?this.remove():this.next instanceof s&&this.next.prev===this&&(this.insertAt(this.length(),this.next.value()),this.next.remove())},s.prototype.position=function(i,e){return[this.domNode,i]},s.prototype.split=function(i,e){if(e===void 0&&(e=!1),!e){if(i===0)return this;if(i===this.length())return this.next}var t=b.create(this.domNode.splitText(i));return this.parent.insertBefore(t,this.next),this.text=this.statics.value(this.domNode),t},s.prototype.update=function(i,e){var t=this;i.some(function(u){return u.type==="characterData"&&u.target===t.domNode})&&(this.text=this.statics.value(this.domNode))},s.prototype.value=function(){return this.text},s.blotName="text",s.scope=b.Scope.INLINE_BLOT,s}(k.default);d.default=y},function(P,d,h){var x=document.createElement("div");if(x.classList.toggle("test-class",!1),x.classList.contains("test-class")){var k=DOMTokenList.prototype.toggle;DOMTokenList.prototype.toggle=function(b,y){return arguments.length>1&&!this.contains(b)==!y?y:k.call(this,b)}}String.prototype.startsWith||(String.prototype.startsWith=function(b,y){return y=y||0,this.substr(y,b.length)===b}),String.prototype.endsWith||(String.prototype.endsWith=function(b,y){var p=this.toString();(typeof y!="number"||!isFinite(y)||Math.floor(y)!==y||y>p.length)&&(y=p.length),y-=b.length;var s=p.indexOf(b,y);return s!==-1&&s===y}),Array.prototype.find||Object.defineProperty(Array.prototype,"find",{value:function(y){if(this===null)throw new TypeError("Array.prototype.find called on null or undefined");if(typeof y!="function")throw new TypeError("predicate must be a function");for(var p=Object(this),s=p.length>>>0,i=arguments[1],e,t=0;t<s;t++)if(e=p[t],y.call(i,e,t,p))return e}}),document.addEventListener("DOMContentLoaded",function(){document.execCommand("enableObjectResizing",!1,!1),document.execCommand("autoUrlDetect",!1,!1)})},function(P,d){var h=-1,x=1,k=0;function b(n,c,E){if(n==c)return n?[[k,n]]:[];(E<0||n.length<E)&&(E=null);var q=i(n,c),_=n.substring(0,q);n=n.substring(q),c=c.substring(q),q=e(n,c);var A=n.substring(n.length-q);n=n.substring(0,n.length-q),c=c.substring(0,c.length-q);var g=y(n,c);return _&&g.unshift([k,_]),A&&g.push([k,A]),u(g),E!=null&&(g=r(g,E)),g=l(g),g}function y(n,c){var E;if(!n)return[[x,c]];if(!c)return[[h,n]];var q=n.length>c.length?n:c,_=n.length>c.length?c:n,A=q.indexOf(_);if(A!=-1)return E=[[x,q.substring(0,A)],[k,_],[x,q.substring(A+_.length)]],n.length>c.length&&(E[0][0]=E[2][0]=h),E;if(_.length==1)return[[h,n],[x,c]];var g=t(n,c);if(g){var v=g[0],m=g[1],w=g[2],T=g[3],R=g[4],B=b(v,w),C=b(m,T);return B.concat([[k,R]],C)}return p(n,c)}function p(n,c){for(var E=n.length,q=c.length,_=Math.ceil((E+q)/2),A=_,g=2*_,v=new Array(g),m=new Array(g),w=0;w<g;w++)v[w]=-1,m[w]=-1;v[A+1]=0,m[A+1]=0;for(var T=E-q,R=T%2!=0,B=0,C=0,W=0,M=0,I=0;I<_;I++){for(var O=-I+B;O<=I-C;O+=2){var S=A+O,L;O==-I||O!=I&&v[S-1]<v[S+1]?L=v[S+1]:L=v[S-1]+1;for(var F=L-O;L<E&&F<q&&n.charAt(L)==c.charAt(F);)L++,F++;if(v[S]=L,L>E)C+=2;else if(F>q)B+=2;else if(R){var D=A+T-O;if(D>=0&&D<g&&m[D]!=-1){var N=E-m[D];if(L>=N)return s(n,c,L,F)}}}for(var j=-I+W;j<=I-M;j+=2){var D=A+j,N;j==-I||j!=I&&m[D-1]<m[D+1]?N=m[D+1]:N=m[D-1]+1;for(var H=N-j;N<E&&H<q&&n.charAt(E-N-1)==c.charAt(q-H-1);)N++,H++;if(m[D]=N,N>E)M+=2;else if(H>q)W+=2;else if(!R){var S=A+T-j;if(S>=0&&S<g&&v[S]!=-1){var L=v[S],F=A+L-S;if(N=E-N,L>=N)return s(n,c,L,F)}}}}return[[h,n],[x,c]]}function s(n,c,E,q){var _=n.substring(0,E),A=c.substring(0,q),g=n.substring(E),v=c.substring(q),m=b(_,A),w=b(g,v);return m.concat(w)}function i(n,c){if(!n||!c||n.charAt(0)!=c.charAt(0))return 0;for(var E=0,q=Math.min(n.length,c.length),_=q,A=0;E<_;)n.substring(A,_)==c.substring(A,_)?(E=_,A=E):q=_,_=Math.floor((q-E)/2+E);return _}function e(n,c){if(!n||!c||n.charAt(n.length-1)!=c.charAt(c.length-1))return 0;for(var E=0,q=Math.min(n.length,c.length),_=q,A=0;E<_;)n.substring(n.length-_,n.length-A)==c.substring(c.length-_,c.length-A)?(E=_,A=E):q=_,_=Math.floor((q-E)/2+E);return _}function t(n,c){var E=n.length>c.length?n:c,q=n.length>c.length?c:n;if(E.length<4||q.length*2<E.length)return null;function _(C,W,M){for(var I=C.substring(M,M+Math.floor(C.length/4)),O=-1,S="",L,F,D,N;(O=W.indexOf(I,O+1))!=-1;){var j=i(C.substring(M),W.substring(O)),H=e(C.substring(0,M),W.substring(0,O));S.length<H+j&&(S=W.substring(O-H,O)+W.substring(O,O+j),L=C.substring(0,M-H),F=C.substring(M+j),D=W.substring(0,O-H),N=W.substring(O+j))}return S.length*2>=C.length?[L,F,D,N,S]:null}var A=_(E,q,Math.ceil(E.length/4)),g=_(E,q,Math.ceil(E.length/2)),v;if(!A&&!g)return null;g?A?v=A[4].length>g[4].length?A:g:v=g:v=A;var m,w,T,R;n.length>c.length?(m=v[0],w=v[1],T=v[2],R=v[3]):(T=v[0],R=v[1],m=v[2],w=v[3]);var B=v[4];return[m,w,T,R,B]}function u(n){n.push([k,""]);for(var c=0,E=0,q=0,_="",A="",g;c<n.length;)switch(n[c][0]){case x:q++,A+=n[c][1],c++;break;case h:E++,_+=n[c][1],c++;break;case k:E+q>1?(E!==0&&q!==0&&(g=i(A,_),g!==0&&(c-E-q>0&&n[c-E-q-1][0]==k?n[c-E-q-1][1]+=A.substring(0,g):(n.splice(0,0,[k,A.substring(0,g)]),c++),A=A.substring(g),_=_.substring(g)),g=e(A,_),g!==0&&(n[c][1]=A.substring(A.length-g)+n[c][1],A=A.substring(0,A.length-g),_=_.substring(0,_.length-g))),E===0?n.splice(c-q,E+q,[x,A]):q===0?n.splice(c-E,E+q,[h,_]):n.splice(c-E-q,E+q,[h,_],[x,A]),c=c-E-q+(E?1:0)+(q?1:0)+1):c!==0&&n[c-1][0]==k?(n[c-1][1]+=n[c][1],n.splice(c,1)):c++,q=0,E=0,_="",A="";break}n[n.length-1][1]===""&&n.pop();var v=!1;for(c=1;c<n.length-1;)n[c-1][0]==k&&n[c+1][0]==k&&(n[c][1].substring(n[c][1].length-n[c-1][1].length)==n[c-1][1]?(n[c][1]=n[c-1][1]+n[c][1].substring(0,n[c][1].length-n[c-1][1].length),n[c+1][1]=n[c-1][1]+n[c+1][1],n.splice(c-1,1),v=!0):n[c][1].substring(0,n[c+1][1].length)==n[c+1][1]&&(n[c-1][1]+=n[c+1][1],n[c][1]=n[c][1].substring(n[c+1][1].length)+n[c+1][1],n.splice(c+1,1),v=!0)),c++;v&&u(n)}var o=b;o.INSERT=x,o.DELETE=h,o.EQUAL=k,P.exports=o;function a(n,c){if(c===0)return[k,n];for(var E=0,q=0;q<n.length;q++){var _=n[q];if(_[0]===h||_[0]===k){var A=E+_[1].length;if(c===A)return[q+1,n];if(c<A){n=n.slice();var g=c-E,v=[_[0],_[1].slice(0,g)],m=[_[0],_[1].slice(g)];return n.splice(q,1,v,m),[q+1,n]}else E=A}}throw new Error("cursor_pos is out of bounds!")}function r(n,c){var E=a(n,c),q=E[1],_=E[0],A=q[_],g=q[_+1];if(A==null)return n;if(A[0]!==k)return n;if(g!=null&&A[1]+g[1]===g[1]+A[1])return q.splice(_,2,g,A),f(q,_,2);if(g!=null&&g[1].indexOf(A[1])===0){q.splice(_,2,[g[0],A[1]],[0,A[1]]);var v=g[1].slice(A[1].length);return v.length>0&&q.splice(_+2,0,[g[0],v]),f(q,_,3)}else return n}function l(n){for(var c=!1,E=function(g){return g.charCodeAt(0)>=56320&&g.charCodeAt(0)<=57343},q=function(g){return g.charCodeAt(g.length-1)>=55296&&g.charCodeAt(g.length-1)<=56319},_=2;_<n.length;_+=1)n[_-2][0]===k&&q(n[_-2][1])&&n[_-1][0]===h&&E(n[_-1][1])&&n[_][0]===x&&E(n[_][1])&&(c=!0,n[_-1][1]=n[_-2][1].slice(-1)+n[_-1][1],n[_][1]=n[_-2][1].slice(-1)+n[_][1],n[_-2][1]=n[_-2][1].slice(0,-1));if(!c)return n;for(var A=[],_=0;_<n.length;_+=1)n[_][1].length>0&&A.push(n[_]);return A}function f(n,c,E){for(var q=c+E-1;q>=0&&q>=c-1;q--)if(q+1<n.length){var _=n[q],A=n[q+1];_[0]===A[1]&&n.splice(q,2,[_[0],_[1]+A[1]])}return n}},function(P,d){d=P.exports=typeof Object.keys=="function"?Object.keys:h,d.shim=h;function h(x){var k=[];for(var b in x)k.push(b);return k}},function(P,d){var h=function(){return Object.prototype.toString.call(arguments)}()=="[object Arguments]";d=P.exports=h?x:k,d.supported=x;function x(b){return Object.prototype.toString.call(b)=="[object Arguments]"}d.unsupported=k;function k(b){return b&&typeof b=="object"&&typeof b.length=="number"&&Object.prototype.hasOwnProperty.call(b,"callee")&&!Object.prototype.propertyIsEnumerable.call(b,"callee")||!1}},function(P,d){var h=Object.prototype.hasOwnProperty,x="~";function k(){}Object.create&&(k.prototype=Object.create(null),new k().__proto__||(x=!1));function b(p,s,i){this.fn=p,this.context=s,this.once=i||!1}function y(){this._events=new k,this._eventsCount=0}y.prototype.eventNames=function(){var s=[],i,e;if(this._eventsCount===0)return s;for(e in i=this._events)h.call(i,e)&&s.push(x?e.slice(1):e);return Object.getOwnPropertySymbols?s.concat(Object.getOwnPropertySymbols(i)):s},y.prototype.listeners=function(s,i){var e=x?x+s:s,t=this._events[e];if(i)return!!t;if(!t)return[];if(t.fn)return[t.fn];for(var u=0,o=t.length,a=new Array(o);u<o;u++)a[u]=t[u].fn;return a},y.prototype.emit=function(s,i,e,t,u,o){var a=x?x+s:s;if(!this._events[a])return!1;var r=this._events[a],l=arguments.length,f,n;if(r.fn){switch(r.once&&this.removeListener(s,r.fn,void 0,!0),l){case 1:return r.fn.call(r.context),!0;case 2:return r.fn.call(r.context,i),!0;case 3:return r.fn.call(r.context,i,e),!0;case 4:return r.fn.call(r.context,i,e,t),!0;case 5:return r.fn.call(r.context,i,e,t,u),!0;case 6:return r.fn.call(r.context,i,e,t,u,o),!0}for(n=1,f=new Array(l-1);n<l;n++)f[n-1]=arguments[n];r.fn.apply(r.context,f)}else{var c=r.length,E;for(n=0;n<c;n++)switch(r[n].once&&this.removeListener(s,r[n].fn,void 0,!0),l){case 1:r[n].fn.call(r[n].context);break;case 2:r[n].fn.call(r[n].context,i);break;case 3:r[n].fn.call(r[n].context,i,e);break;case 4:r[n].fn.call(r[n].context,i,e,t);break;default:if(!f)for(E=1,f=new Array(l-1);E<l;E++)f[E-1]=arguments[E];r[n].fn.apply(r[n].context,f)}}return!0},y.prototype.on=function(s,i,e){var t=new b(i,e||this),u=x?x+s:s;return this._events[u]?this._events[u].fn?this._events[u]=[this._events[u],t]:this._events[u].push(t):(this._events[u]=t,this._eventsCount++),this},y.prototype.once=function(s,i,e){var t=new b(i,e||this,!0),u=x?x+s:s;return this._events[u]?this._events[u].fn?this._events[u]=[this._events[u],t]:this._events[u].push(t):(this._events[u]=t,this._eventsCount++),this},y.prototype.removeListener=function(s,i,e,t){var u=x?x+s:s;if(!this._events[u])return this;if(!i)return--this._eventsCount===0?this._events=new k:delete this._events[u],this;var o=this._events[u];if(o.fn)o.fn===i&&(!t||o.once)&&(!e||o.context===e)&&(--this._eventsCount===0?this._events=new k:delete this._events[u]);else{for(var a=0,r=[],l=o.length;a<l;a++)(o[a].fn!==i||t&&!o[a].once||e&&o[a].context!==e)&&r.push(o[a]);r.length?this._events[u]=r.length===1?r[0]:r:--this._eventsCount===0?this._events=new k:delete this._events[u]}return this},y.prototype.removeAllListeners=function(s){var i;return s?(i=x?x+s:s,this._events[i]&&(--this._eventsCount===0?this._events=new k:delete this._events[i])):(this._events=new k,this._eventsCount=0),this},y.prototype.off=y.prototype.removeListener,y.prototype.addListener=y.prototype.on,y.prototype.setMaxListeners=function(){return this},y.prefixed=x,y.EventEmitter=y,typeof P!="undefined"&&(P.exports=y)},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0}),d.matchText=d.matchSpacing=d.matchNewline=d.matchBlot=d.matchAttributor=d.default=void 0;var x=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(K){return typeof K}:function(K){return K&&typeof Symbol=="function"&&K.constructor===Symbol&&K!==Symbol.prototype?"symbol":typeof K},k=function(){function K(V,Y){var X=[],Z=!0,te=!1,ne=void 0;try{for(var re=V[Symbol.iterator](),fe;!(Z=(fe=re.next()).done)&&(X.push(fe.value),!(Y&&X.length===Y));Z=!0);}catch(de){te=!0,ne=de}finally{try{!Z&&re.return&&re.return()}finally{if(te)throw ne}}return X}return function(V,Y){if(Array.isArray(V))return V;if(Symbol.iterator in Object(V))return K(V,Y);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),b=function(){function K(V,Y){for(var X=0;X<Y.length;X++){var Z=Y[X];Z.enumerable=Z.enumerable||!1,Z.configurable=!0,"value"in Z&&(Z.writable=!0),Object.defineProperty(V,Z.key,Z)}}return function(V,Y,X){return Y&&K(V.prototype,Y),X&&K(V,X),V}}(),y=h(3),p=m(y),s=h(2),i=m(s),e=h(0),t=m(e),u=h(5),o=m(u),a=h(10),r=m(a),l=h(9),f=m(l),n=h(36),c=h(37),E=h(13),q=m(E),_=h(26),A=h(38),g=h(39),v=h(40);function m(K){return K&&K.__esModule?K:{default:K}}function w(K,V,Y){return V in K?Object.defineProperty(K,V,{value:Y,enumerable:!0,configurable:!0,writable:!0}):K[V]=Y,K}function T(K,V){if(!(K instanceof V))throw new TypeError("Cannot call a class as a function")}function R(K,V){if(!K)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return V&&(typeof V=="object"||typeof V=="function")?V:K}function B(K,V){if(typeof V!="function"&&V!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof V);K.prototype=Object.create(V&&V.prototype,{constructor:{value:K,enumerable:!1,writable:!0,configurable:!0}}),V&&(Object.setPrototypeOf?Object.setPrototypeOf(K,V):K.__proto__=V)}var C=(0,r.default)("quill:clipboard"),W="__ql-matcher",M=[[Node.TEXT_NODE,ue],[Node.TEXT_NODE,ie],["br",Q],[Node.ELEMENT_NODE,ie],[Node.ELEMENT_NODE,$],[Node.ELEMENT_NODE,le],[Node.ELEMENT_NODE,U],[Node.ELEMENT_NODE,se],["li",ee],["b",H.bind(H,"bold")],["i",H.bind(H,"italic")],["style",J]],I=[n.AlignAttribute,A.DirectionAttribute].reduce(function(K,V){return K[V.keyName]=V,K},{}),O=[n.AlignStyle,c.BackgroundStyle,_.ColorStyle,A.DirectionStyle,g.FontStyle,v.SizeStyle].reduce(function(K,V){return K[V.keyName]=V,K},{}),S=function(K){B(V,K);function V(Y,X){T(this,V);var Z=R(this,(V.__proto__||Object.getPrototypeOf(V)).call(this,Y,X));return Z.quill.root.addEventListener("paste",Z.onPaste.bind(Z)),Z.container=Z.quill.addContainer("ql-clipboard"),Z.container.setAttribute("contenteditable",!0),Z.container.setAttribute("tabindex",-1),Z.matchers=[],M.concat(Z.options.matchers).forEach(function(te){var ne=k(te,2),re=ne[0],fe=ne[1];!X.matchVisual&&fe===le||Z.addMatcher(re,fe)}),Z}return b(V,[{key:"addMatcher",value:function(X,Z){this.matchers.push([X,Z])}},{key:"convert",value:function(X){if(typeof X=="string")return this.container.innerHTML=X.replace(/\>\r?\n +\</g,"><"),this.convert();var Z=this.quill.getFormat(this.quill.selection.savedRange.index);if(Z[q.default.blotName]){var te=this.container.innerText;return this.container.innerHTML="",new i.default().insert(te,w({},q.default.blotName,Z[q.default.blotName]))}var ne=this.prepareMatching(),re=k(ne,2),fe=re[0],de=re[1],oe=j(this.container,fe,de);return D(oe,`
`)&&oe.ops[oe.ops.length-1].attributes==null&&(oe=oe.compose(new i.default().retain(oe.length()-1).delete(1))),C.log("convert",this.container.innerHTML,oe),this.container.innerHTML="",oe}},{key:"dangerouslyPasteHTML",value:function(X,Z){var te=arguments.length>2&&arguments[2]!==void 0?arguments[2]:o.default.sources.API;if(typeof X=="string")this.quill.setContents(this.convert(X),Z),this.quill.setSelection(0,o.default.sources.SILENT);else{var ne=this.convert(Z);this.quill.updateContents(new i.default().retain(X).concat(ne),te),this.quill.setSelection(X+ne.length(),o.default.sources.SILENT)}}},{key:"onPaste",value:function(X){var Z=this;if(!(X.defaultPrevented||!this.quill.isEnabled())){var te=this.quill.getSelection(),ne=new i.default().retain(te.index),re=this.quill.scrollingContainer.scrollTop;this.container.focus(),this.quill.selection.update(o.default.sources.SILENT),setTimeout(function(){ne=ne.concat(Z.convert()).delete(te.length),Z.quill.updateContents(ne,o.default.sources.USER),Z.quill.setSelection(ne.length()-te.length,o.default.sources.SILENT),Z.quill.scrollingContainer.scrollTop=re,Z.quill.focus()},1)}}},{key:"prepareMatching",value:function(){var X=this,Z=[],te=[];return this.matchers.forEach(function(ne){var re=k(ne,2),fe=re[0],de=re[1];switch(fe){case Node.TEXT_NODE:te.push(de);break;case Node.ELEMENT_NODE:Z.push(de);break;default:[].forEach.call(X.container.querySelectorAll(fe),function(oe){oe[W]=oe[W]||[],oe[W].push(de)});break}}),[Z,te]}}]),V}(f.default);S.DEFAULTS={matchers:[],matchVisual:!0};function L(K,V,Y){return(typeof V=="undefined"?"undefined":x(V))==="object"?Object.keys(V).reduce(function(X,Z){return L(X,Z,V[Z])},K):K.reduce(function(X,Z){return Z.attributes&&Z.attributes[V]?X.push(Z):X.insert(Z.insert,(0,p.default)({},w({},V,Y),Z.attributes))},new i.default)}function F(K){if(K.nodeType!==Node.ELEMENT_NODE)return{};var V="__ql-computed-style";return K[V]||(K[V]=window.getComputedStyle(K))}function D(K,V){for(var Y="",X=K.ops.length-1;X>=0&&Y.length<V.length;--X){var Z=K.ops[X];if(typeof Z.insert!="string")break;Y=Z.insert+Y}return Y.slice(-1*V.length)===V}function N(K){if(K.childNodes.length===0)return!1;var V=F(K);return["block","list-item"].indexOf(V.display)>-1}function j(K,V,Y){return K.nodeType===K.TEXT_NODE?Y.reduce(function(X,Z){return Z(K,X)},new i.default):K.nodeType===K.ELEMENT_NODE?[].reduce.call(K.childNodes||[],function(X,Z){var te=j(Z,V,Y);return Z.nodeType===K.ELEMENT_NODE&&(te=V.reduce(function(ne,re){return re(Z,ne)},te),te=(Z[W]||[]).reduce(function(ne,re){return re(Z,ne)},te)),X.concat(te)},new i.default):new i.default}function H(K,V,Y){return L(Y,K,!0)}function U(K,V){var Y=t.default.Attributor.Attribute.keys(K),X=t.default.Attributor.Class.keys(K),Z=t.default.Attributor.Style.keys(K),te={};return Y.concat(X).concat(Z).forEach(function(ne){var re=t.default.query(ne,t.default.Scope.ATTRIBUTE);re!=null&&(te[re.attrName]=re.value(K),te[re.attrName])||(re=I[ne],re!=null&&(re.attrName===ne||re.keyName===ne)&&(te[re.attrName]=re.value(K)||void 0),re=O[ne],re!=null&&(re.attrName===ne||re.keyName===ne)&&(re=O[ne],te[re.attrName]=re.value(K)||void 0))}),Object.keys(te).length>0&&(V=L(V,te)),V}function $(K,V){var Y=t.default.query(K);if(Y==null)return V;if(Y.prototype instanceof t.default.Embed){var X={},Z=Y.value(K);Z!=null&&(X[Y.blotName]=Z,V=new i.default().insert(X,Y.formats(K)))}else typeof Y.formats=="function"&&(V=L(V,Y.blotName,Y.formats(K)));return V}function Q(K,V){return D(V,`
`)||V.insert(`
`),V}function J(){return new i.default}function ee(K,V){var Y=t.default.query(K);if(Y==null||Y.blotName!=="list-item"||!D(V,`
`))return V;for(var X=-1,Z=K.parentNode;!Z.classList.contains("ql-clipboard");)(t.default.query(Z)||{}).blotName==="list"&&(X+=1),Z=Z.parentNode;return X<=0?V:V.compose(new i.default().retain(V.length()-1).retain(1,{indent:X}))}function ie(K,V){return D(V,`
`)||(N(K)||V.length()>0&&K.nextSibling&&N(K.nextSibling))&&V.insert(`
`),V}function le(K,V){if(N(K)&&K.nextElementSibling!=null&&!D(V,`

`)){var Y=K.offsetHeight+parseFloat(F(K).marginTop)+parseFloat(F(K).marginBottom);K.nextElementSibling.offsetTop>K.offsetTop+Y*1.5&&V.insert(`
`)}return V}function se(K,V){var Y={},X=K.style||{};return X.fontStyle&&F(K).fontStyle==="italic"&&(Y.italic=!0),X.fontWeight&&(F(K).fontWeight.startsWith("bold")||parseInt(F(K).fontWeight)>=700)&&(Y.bold=!0),Object.keys(Y).length>0&&(V=L(V,Y)),parseFloat(X.textIndent||0)>0&&(V=new i.default().insert("	").concat(V)),V}function ue(K,V){var Y=K.data;if(K.parentNode.tagName==="O:P")return V.insert(Y.trim());if(Y.trim().length===0&&K.parentNode.classList.contains("ql-clipboard"))return V;if(!F(K.parentNode).whiteSpace.startsWith("pre")){var X=function(te,ne){return ne=ne.replace(/[^\u00a0]/g,""),ne.length<1&&te?" ":ne};Y=Y.replace(/\r\n/g," ").replace(/\n/g," "),Y=Y.replace(/\s\s+/g,X.bind(X,!0)),(K.previousSibling==null&&N(K.parentNode)||K.previousSibling!=null&&N(K.previousSibling))&&(Y=Y.replace(/^\s+/,X.bind(X,!1))),(K.nextSibling==null&&N(K.parentNode)||K.nextSibling!=null&&N(K.nextSibling))&&(Y=Y.replace(/\s+$/,X.bind(X,!1)))}return V.insert(Y)}d.default=S,d.matchAttributor=U,d.matchBlot=$,d.matchNewline=ie,d.matchSpacing=le,d.matchText=ue},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0});var x=function(){function u(o,a){for(var r=0;r<a.length;r++){var l=a[r];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(o,l.key,l)}}return function(o,a,r){return a&&u(o.prototype,a),r&&u(o,r),o}}(),k=function u(o,a,r){o===null&&(o=Function.prototype);var l=Object.getOwnPropertyDescriptor(o,a);if(l===void 0){var f=Object.getPrototypeOf(o);return f===null?void 0:u(f,a,r)}else{if("value"in l)return l.value;var n=l.get;return n===void 0?void 0:n.call(r)}},b=h(6),y=p(b);function p(u){return u&&u.__esModule?u:{default:u}}function s(u,o){if(!(u instanceof o))throw new TypeError("Cannot call a class as a function")}function i(u,o){if(!u)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return o&&(typeof o=="object"||typeof o=="function")?o:u}function e(u,o){if(typeof o!="function"&&o!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof o);u.prototype=Object.create(o&&o.prototype,{constructor:{value:u,enumerable:!1,writable:!0,configurable:!0}}),o&&(Object.setPrototypeOf?Object.setPrototypeOf(u,o):u.__proto__=o)}var t=function(u){e(o,u);function o(){return s(this,o),i(this,(o.__proto__||Object.getPrototypeOf(o)).apply(this,arguments))}return x(o,[{key:"optimize",value:function(r){k(o.prototype.__proto__||Object.getPrototypeOf(o.prototype),"optimize",this).call(this,r),this.domNode.tagName!==this.statics.tagName[0]&&this.replaceWith(this.statics.blotName)}}],[{key:"create",value:function(){return k(o.__proto__||Object.getPrototypeOf(o),"create",this).call(this)}},{key:"formats",value:function(){return!0}}]),o}(y.default);t.blotName="bold",t.tagName=["STRONG","B"],d.default=t},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0}),d.addControls=d.default=void 0;var x=function(){function v(m,w){var T=[],R=!0,B=!1,C=void 0;try{for(var W=m[Symbol.iterator](),M;!(R=(M=W.next()).done)&&(T.push(M.value),!(w&&T.length===w));R=!0);}catch(I){B=!0,C=I}finally{try{!R&&W.return&&W.return()}finally{if(B)throw C}}return T}return function(m,w){if(Array.isArray(m))return m;if(Symbol.iterator in Object(m))return v(m,w);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),k=function(){function v(m,w){for(var T=0;T<w.length;T++){var R=w[T];R.enumerable=R.enumerable||!1,R.configurable=!0,"value"in R&&(R.writable=!0),Object.defineProperty(m,R.key,R)}}return function(m,w,T){return w&&v(m.prototype,w),T&&v(m,T),m}}(),b=h(2),y=r(b),p=h(0),s=r(p),i=h(5),e=r(i),t=h(10),u=r(t),o=h(9),a=r(o);function r(v){return v&&v.__esModule?v:{default:v}}function l(v,m,w){return m in v?Object.defineProperty(v,m,{value:w,enumerable:!0,configurable:!0,writable:!0}):v[m]=w,v}function f(v,m){if(!(v instanceof m))throw new TypeError("Cannot call a class as a function")}function n(v,m){if(!v)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return m&&(typeof m=="object"||typeof m=="function")?m:v}function c(v,m){if(typeof m!="function"&&m!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof m);v.prototype=Object.create(m&&m.prototype,{constructor:{value:v,enumerable:!1,writable:!0,configurable:!0}}),m&&(Object.setPrototypeOf?Object.setPrototypeOf(v,m):v.__proto__=m)}var E=(0,u.default)("quill:toolbar"),q=function(v){c(m,v);function m(w,T){f(this,m);var R=n(this,(m.__proto__||Object.getPrototypeOf(m)).call(this,w,T));if(Array.isArray(R.options.container)){var B=document.createElement("div");A(B,R.options.container),w.container.parentNode.insertBefore(B,w.container),R.container=B}else typeof R.options.container=="string"?R.container=document.querySelector(R.options.container):R.container=R.options.container;if(!(R.container instanceof HTMLElement)){var C;return C=E.error("Container required for toolbar",R.options),n(R,C)}return R.container.classList.add("ql-toolbar"),R.controls=[],R.handlers={},Object.keys(R.options.handlers).forEach(function(W){R.addHandler(W,R.options.handlers[W])}),[].forEach.call(R.container.querySelectorAll("button, select"),function(W){R.attach(W)}),R.quill.on(e.default.events.EDITOR_CHANGE,function(W,M){W===e.default.events.SELECTION_CHANGE&&R.update(M)}),R.quill.on(e.default.events.SCROLL_OPTIMIZE,function(){var W=R.quill.selection.getRange(),M=x(W,1),I=M[0];R.update(I)}),R}return k(m,[{key:"addHandler",value:function(T,R){this.handlers[T]=R}},{key:"attach",value:function(T){var R=this,B=[].find.call(T.classList,function(W){return W.indexOf("ql-")===0});if(B){if(B=B.slice(3),T.tagName==="BUTTON"&&T.setAttribute("type","button"),this.handlers[B]==null){if(this.quill.scroll.whitelist!=null&&this.quill.scroll.whitelist[B]==null){E.warn("ignoring attaching to disabled format",B,T);return}if(s.default.query(B)==null){E.warn("ignoring attaching to nonexistent format",B,T);return}}var C=T.tagName==="SELECT"?"change":"click";T.addEventListener(C,function(W){var M=void 0;if(T.tagName==="SELECT"){if(T.selectedIndex<0)return;var I=T.options[T.selectedIndex];I.hasAttribute("selected")?M=!1:M=I.value||!1}else T.classList.contains("ql-active")?M=!1:M=T.value||!T.hasAttribute("value"),W.preventDefault();R.quill.focus();var O=R.quill.selection.getRange(),S=x(O,1),L=S[0];if(R.handlers[B]!=null)R.handlers[B].call(R,M);else if(s.default.query(B).prototype instanceof s.default.Embed){if(M=prompt("Enter "+B),!M)return;R.quill.updateContents(new y.default().retain(L.index).delete(L.length).insert(l({},B,M)),e.default.sources.USER)}else R.quill.format(B,M,e.default.sources.USER);R.update(L)}),this.controls.push([B,T])}}},{key:"update",value:function(T){var R=T==null?{}:this.quill.getFormat(T);this.controls.forEach(function(B){var C=x(B,2),W=C[0],M=C[1];if(M.tagName==="SELECT"){var I=void 0;if(T==null)I=null;else if(R[W]==null)I=M.querySelector("option[selected]");else if(!Array.isArray(R[W])){var O=R[W];typeof O=="string"&&(O=O.replace(/\"/g,'\\"')),I=M.querySelector('option[value="'+O+'"]')}I==null?(M.value="",M.selectedIndex=-1):I.selected=!0}else if(T==null)M.classList.remove("ql-active");else if(M.hasAttribute("value")){var S=R[W]===M.getAttribute("value")||R[W]!=null&&R[W].toString()===M.getAttribute("value")||R[W]==null&&!M.getAttribute("value");M.classList.toggle("ql-active",S)}else M.classList.toggle("ql-active",R[W]!=null)})}}]),m}(a.default);q.DEFAULTS={};function _(v,m,w){var T=document.createElement("button");T.setAttribute("type","button"),T.classList.add("ql-"+m),w!=null&&(T.value=w),v.appendChild(T)}function A(v,m){Array.isArray(m[0])||(m=[m]),m.forEach(function(w){var T=document.createElement("span");T.classList.add("ql-formats"),w.forEach(function(R){if(typeof R=="string")_(T,R);else{var B=Object.keys(R)[0],C=R[B];Array.isArray(C)?g(T,B,C):_(T,B,C)}}),v.appendChild(T)})}function g(v,m,w){var T=document.createElement("select");T.classList.add("ql-"+m),w.forEach(function(R){var B=document.createElement("option");R!==!1?B.setAttribute("value",R):B.setAttribute("selected","selected"),T.appendChild(B)}),v.appendChild(T)}q.DEFAULTS={container:null,handlers:{clean:function(){var m=this,w=this.quill.getSelection();if(w!=null)if(w.length==0){var T=this.quill.getFormat();Object.keys(T).forEach(function(R){s.default.query(R,s.default.Scope.INLINE)!=null&&m.quill.format(R,!1)})}else this.quill.removeFormat(w,e.default.sources.USER)},direction:function(m){var w=this.quill.getFormat().align;m==="rtl"&&w==null?this.quill.format("align","right",e.default.sources.USER):!m&&w==="right"&&this.quill.format("align",!1,e.default.sources.USER),this.quill.format("direction",m,e.default.sources.USER)},indent:function(m){var w=this.quill.getSelection(),T=this.quill.getFormat(w),R=parseInt(T.indent||0);if(m==="+1"||m==="-1"){var B=m==="+1"?1:-1;T.direction==="rtl"&&(B*=-1),this.quill.format("indent",R+B,e.default.sources.USER)}},link:function(m){m===!0&&(m=prompt("Enter link URL:")),this.quill.format("link",m,e.default.sources.USER)},list:function(m){var w=this.quill.getSelection(),T=this.quill.getFormat(w);m==="check"?T.list==="checked"||T.list==="unchecked"?this.quill.format("list",!1,e.default.sources.USER):this.quill.format("list","unchecked",e.default.sources.USER):this.quill.format("list",m,e.default.sources.USER)}}},d.default=q,d.addControls=A},function(P,d){P.exports='<svg viewbox="0 0 18 18"> <polyline class="ql-even ql-stroke" points="5 7 3 9 5 11"></polyline> <polyline class="ql-even ql-stroke" points="13 7 15 9 13 11"></polyline> <line class=ql-stroke x1=10 x2=8 y1=5 y2=13></line> </svg>'},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0});var x=function(){function u(o,a){for(var r=0;r<a.length;r++){var l=a[r];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(o,l.key,l)}}return function(o,a,r){return a&&u(o.prototype,a),r&&u(o,r),o}}(),k=function u(o,a,r){o===null&&(o=Function.prototype);var l=Object.getOwnPropertyDescriptor(o,a);if(l===void 0){var f=Object.getPrototypeOf(o);return f===null?void 0:u(f,a,r)}else{if("value"in l)return l.value;var n=l.get;return n===void 0?void 0:n.call(r)}},b=h(28),y=p(b);function p(u){return u&&u.__esModule?u:{default:u}}function s(u,o){if(!(u instanceof o))throw new TypeError("Cannot call a class as a function")}function i(u,o){if(!u)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return o&&(typeof o=="object"||typeof o=="function")?o:u}function e(u,o){if(typeof o!="function"&&o!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof o);u.prototype=Object.create(o&&o.prototype,{constructor:{value:u,enumerable:!1,writable:!0,configurable:!0}}),o&&(Object.setPrototypeOf?Object.setPrototypeOf(u,o):u.__proto__=o)}var t=function(u){e(o,u);function o(a,r){s(this,o);var l=i(this,(o.__proto__||Object.getPrototypeOf(o)).call(this,a));return l.label.innerHTML=r,l.container.classList.add("ql-color-picker"),[].slice.call(l.container.querySelectorAll(".ql-picker-item"),0,7).forEach(function(f){f.classList.add("ql-primary")}),l}return x(o,[{key:"buildItem",value:function(r){var l=k(o.prototype.__proto__||Object.getPrototypeOf(o.prototype),"buildItem",this).call(this,r);return l.style.backgroundColor=r.getAttribute("value")||"",l}},{key:"selectItem",value:function(r,l){k(o.prototype.__proto__||Object.getPrototypeOf(o.prototype),"selectItem",this).call(this,r,l);var f=this.label.querySelector(".ql-color-label"),n=r&&r.getAttribute("data-value")||"";f&&(f.tagName==="line"?f.style.stroke=n:f.style.fill=n)}}]),o}(y.default);d.default=t},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0});var x=function(){function u(o,a){for(var r=0;r<a.length;r++){var l=a[r];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(o,l.key,l)}}return function(o,a,r){return a&&u(o.prototype,a),r&&u(o,r),o}}(),k=function u(o,a,r){o===null&&(o=Function.prototype);var l=Object.getOwnPropertyDescriptor(o,a);if(l===void 0){var f=Object.getPrototypeOf(o);return f===null?void 0:u(f,a,r)}else{if("value"in l)return l.value;var n=l.get;return n===void 0?void 0:n.call(r)}},b=h(28),y=p(b);function p(u){return u&&u.__esModule?u:{default:u}}function s(u,o){if(!(u instanceof o))throw new TypeError("Cannot call a class as a function")}function i(u,o){if(!u)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return o&&(typeof o=="object"||typeof o=="function")?o:u}function e(u,o){if(typeof o!="function"&&o!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof o);u.prototype=Object.create(o&&o.prototype,{constructor:{value:u,enumerable:!1,writable:!0,configurable:!0}}),o&&(Object.setPrototypeOf?Object.setPrototypeOf(u,o):u.__proto__=o)}var t=function(u){e(o,u);function o(a,r){s(this,o);var l=i(this,(o.__proto__||Object.getPrototypeOf(o)).call(this,a));return l.container.classList.add("ql-icon-picker"),[].forEach.call(l.container.querySelectorAll(".ql-picker-item"),function(f){f.innerHTML=r[f.getAttribute("data-value")||""]}),l.defaultItem=l.container.querySelector(".ql-selected"),l.selectItem(l.defaultItem),l}return x(o,[{key:"selectItem",value:function(r,l){k(o.prototype.__proto__||Object.getPrototypeOf(o.prototype),"selectItem",this).call(this,r,l),r=r||this.defaultItem,this.label.innerHTML=r.innerHTML}}]),o}(y.default);d.default=t},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0});var x=function(){function y(p,s){for(var i=0;i<s.length;i++){var e=s[i];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(p,e.key,e)}}return function(p,s,i){return s&&y(p.prototype,s),i&&y(p,i),p}}();function k(y,p){if(!(y instanceof p))throw new TypeError("Cannot call a class as a function")}var b=function(){function y(p,s){var i=this;k(this,y),this.quill=p,this.boundsContainer=s||document.body,this.root=p.addContainer("ql-tooltip"),this.root.innerHTML=this.constructor.TEMPLATE,this.quill.root===this.quill.scrollingContainer&&this.quill.root.addEventListener("scroll",function(){i.root.style.marginTop=-1*i.quill.root.scrollTop+"px"}),this.hide()}return x(y,[{key:"hide",value:function(){this.root.classList.add("ql-hidden")}},{key:"position",value:function(s){var i=s.left+s.width/2-this.root.offsetWidth/2,e=s.bottom+this.quill.root.scrollTop;this.root.style.left=i+"px",this.root.style.top=e+"px",this.root.classList.remove("ql-flip");var t=this.boundsContainer.getBoundingClientRect(),u=this.root.getBoundingClientRect(),o=0;if(u.right>t.right&&(o=t.right-u.right,this.root.style.left=i+o+"px"),u.left<t.left&&(o=t.left-u.left,this.root.style.left=i+o+"px"),u.bottom>t.bottom){var a=u.bottom-u.top,r=s.bottom-s.top+a;this.root.style.top=e-r+"px",this.root.classList.add("ql-flip")}return o}},{key:"show",value:function(){this.root.classList.remove("ql-editing"),this.root.classList.remove("ql-hidden")}}]),y}();d.default=b},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0});var x=function(){function g(v,m){var w=[],T=!0,R=!1,B=void 0;try{for(var C=v[Symbol.iterator](),W;!(T=(W=C.next()).done)&&(w.push(W.value),!(m&&w.length===m));T=!0);}catch(M){R=!0,B=M}finally{try{!T&&C.return&&C.return()}finally{if(R)throw B}}return w}return function(v,m){if(Array.isArray(v))return v;if(Symbol.iterator in Object(v))return g(v,m);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),k=function g(v,m,w){v===null&&(v=Function.prototype);var T=Object.getOwnPropertyDescriptor(v,m);if(T===void 0){var R=Object.getPrototypeOf(v);return R===null?void 0:g(R,m,w)}else{if("value"in T)return T.value;var B=T.get;return B===void 0?void 0:B.call(w)}},b=function(){function g(v,m){for(var w=0;w<m.length;w++){var T=m[w];T.enumerable=T.enumerable||!1,T.configurable=!0,"value"in T&&(T.writable=!0),Object.defineProperty(v,T.key,T)}}return function(v,m,w){return m&&g(v.prototype,m),w&&g(v,w),v}}(),y=h(3),p=f(y),s=h(8),i=f(s),e=h(43),t=f(e),u=h(27),o=f(u),a=h(15),r=h(41),l=f(r);function f(g){return g&&g.__esModule?g:{default:g}}function n(g,v){if(!(g instanceof v))throw new TypeError("Cannot call a class as a function")}function c(g,v){if(!g)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return v&&(typeof v=="object"||typeof v=="function")?v:g}function E(g,v){if(typeof v!="function"&&v!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof v);g.prototype=Object.create(v&&v.prototype,{constructor:{value:g,enumerable:!1,writable:!0,configurable:!0}}),v&&(Object.setPrototypeOf?Object.setPrototypeOf(g,v):g.__proto__=v)}var q=[[{header:["1","2","3",!1]}],["bold","italic","underline","link"],[{list:"ordered"},{list:"bullet"}],["clean"]],_=function(g){E(v,g);function v(m,w){n(this,v),w.modules.toolbar!=null&&w.modules.toolbar.container==null&&(w.modules.toolbar.container=q);var T=c(this,(v.__proto__||Object.getPrototypeOf(v)).call(this,m,w));return T.quill.container.classList.add("ql-snow"),T}return b(v,[{key:"extendToolbar",value:function(w){w.container.classList.add("ql-snow"),this.buildButtons([].slice.call(w.container.querySelectorAll("button")),l.default),this.buildPickers([].slice.call(w.container.querySelectorAll("select")),l.default),this.tooltip=new A(this.quill,this.options.bounds),w.container.querySelector(".ql-link")&&this.quill.keyboard.addBinding({key:"K",shortKey:!0},function(T,R){w.handlers.link.call(w,!R.format.link)})}}]),v}(t.default);_.DEFAULTS=(0,p.default)(!0,{},t.default.DEFAULTS,{modules:{toolbar:{handlers:{link:function(v){if(v){var m=this.quill.getSelection();if(m==null||m.length==0)return;var w=this.quill.getText(m);/^\S+@\S+\.\S+$/.test(w)&&w.indexOf("mailto:")!==0&&(w="mailto:"+w);var T=this.quill.theme.tooltip;T.edit("link",w)}else this.quill.format("link",!1)}}}}});var A=function(g){E(v,g);function v(m,w){n(this,v);var T=c(this,(v.__proto__||Object.getPrototypeOf(v)).call(this,m,w));return T.preview=T.root.querySelector("a.ql-preview"),T}return b(v,[{key:"listen",value:function(){var w=this;k(v.prototype.__proto__||Object.getPrototypeOf(v.prototype),"listen",this).call(this),this.root.querySelector("a.ql-action").addEventListener("click",function(T){w.root.classList.contains("ql-editing")?w.save():w.edit("link",w.preview.textContent),T.preventDefault()}),this.root.querySelector("a.ql-remove").addEventListener("click",function(T){if(w.linkRange!=null){var R=w.linkRange;w.restoreFocus(),w.quill.formatText(R,"link",!1,i.default.sources.USER),delete w.linkRange}T.preventDefault(),w.hide()}),this.quill.on(i.default.events.SELECTION_CHANGE,function(T,R,B){if(T!=null){if(T.length===0&&B===i.default.sources.USER){var C=w.quill.scroll.descendant(o.default,T.index),W=x(C,2),M=W[0],I=W[1];if(M!=null){w.linkRange=new a.Range(T.index-I,M.length());var O=o.default.formats(M.domNode);w.preview.textContent=O,w.preview.setAttribute("href",O),w.show(),w.position(w.quill.getBounds(w.linkRange));return}}else delete w.linkRange;w.hide()}})}},{key:"show",value:function(){k(v.prototype.__proto__||Object.getPrototypeOf(v.prototype),"show",this).call(this),this.root.removeAttribute("data-mode")}}]),v}(e.BaseTooltip);A.TEMPLATE=['<a class="ql-preview" rel="noopener noreferrer" target="_blank" href="about:blank"></a>','<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">','<a class="ql-action"></a>','<a class="ql-remove"></a>'].join(""),d.default=_},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0});var x=h(29),k=Z(x),b=h(36),y=h(38),p=h(64),s=h(65),i=Z(s),e=h(66),t=Z(e),u=h(67),o=Z(u),a=h(37),r=h(26),l=h(39),f=h(40),n=h(56),c=Z(n),E=h(68),q=Z(E),_=h(27),A=Z(_),g=h(69),v=Z(g),m=h(70),w=Z(m),T=h(71),R=Z(T),B=h(72),C=Z(B),W=h(73),M=Z(W),I=h(13),O=Z(I),S=h(74),L=Z(S),F=h(75),D=Z(F),N=h(57),j=Z(N),H=h(41),U=Z(H),$=h(28),Q=Z($),J=h(59),ee=Z(J),ie=h(60),le=Z(ie),se=h(61),ue=Z(se),K=h(108),V=Z(K),Y=h(62),X=Z(Y);function Z(te){return te&&te.__esModule?te:{default:te}}k.default.register({"attributors/attribute/direction":y.DirectionAttribute,"attributors/class/align":b.AlignClass,"attributors/class/background":a.BackgroundClass,"attributors/class/color":r.ColorClass,"attributors/class/direction":y.DirectionClass,"attributors/class/font":l.FontClass,"attributors/class/size":f.SizeClass,"attributors/style/align":b.AlignStyle,"attributors/style/background":a.BackgroundStyle,"attributors/style/color":r.ColorStyle,"attributors/style/direction":y.DirectionStyle,"attributors/style/font":l.FontStyle,"attributors/style/size":f.SizeStyle},!0),k.default.register({"formats/align":b.AlignClass,"formats/direction":y.DirectionClass,"formats/indent":p.IndentClass,"formats/background":a.BackgroundStyle,"formats/color":r.ColorStyle,"formats/font":l.FontClass,"formats/size":f.SizeClass,"formats/blockquote":i.default,"formats/code-block":O.default,"formats/header":t.default,"formats/list":o.default,"formats/bold":c.default,"formats/code":I.Code,"formats/italic":q.default,"formats/link":A.default,"formats/script":v.default,"formats/strike":w.default,"formats/underline":R.default,"formats/image":C.default,"formats/video":M.default,"formats/list/item":u.ListItem,"modules/formula":L.default,"modules/syntax":D.default,"modules/toolbar":j.default,"themes/bubble":V.default,"themes/snow":X.default,"ui/icons":U.default,"ui/picker":Q.default,"ui/icon-picker":le.default,"ui/color-picker":ee.default,"ui/tooltip":ue.default},!0),d.default=k.default},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0}),d.IndentClass=void 0;var x=function(){function o(a,r){for(var l=0;l<r.length;l++){var f=r[l];f.enumerable=f.enumerable||!1,f.configurable=!0,"value"in f&&(f.writable=!0),Object.defineProperty(a,f.key,f)}}return function(a,r,l){return r&&o(a.prototype,r),l&&o(a,l),a}}(),k=function o(a,r,l){a===null&&(a=Function.prototype);var f=Object.getOwnPropertyDescriptor(a,r);if(f===void 0){var n=Object.getPrototypeOf(a);return n===null?void 0:o(n,r,l)}else{if("value"in f)return f.value;var c=f.get;return c===void 0?void 0:c.call(l)}},b=h(0),y=p(b);function p(o){return o&&o.__esModule?o:{default:o}}function s(o,a){if(!(o instanceof a))throw new TypeError("Cannot call a class as a function")}function i(o,a){if(!o)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return a&&(typeof a=="object"||typeof a=="function")?a:o}function e(o,a){if(typeof a!="function"&&a!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof a);o.prototype=Object.create(a&&a.prototype,{constructor:{value:o,enumerable:!1,writable:!0,configurable:!0}}),a&&(Object.setPrototypeOf?Object.setPrototypeOf(o,a):o.__proto__=a)}var t=function(o){e(a,o);function a(){return s(this,a),i(this,(a.__proto__||Object.getPrototypeOf(a)).apply(this,arguments))}return x(a,[{key:"add",value:function(l,f){if(f==="+1"||f==="-1"){var n=this.value(l)||0;f=f==="+1"?n+1:n-1}return f===0?(this.remove(l),!0):k(a.prototype.__proto__||Object.getPrototypeOf(a.prototype),"add",this).call(this,l,f)}},{key:"canAdd",value:function(l,f){return k(a.prototype.__proto__||Object.getPrototypeOf(a.prototype),"canAdd",this).call(this,l,f)||k(a.prototype.__proto__||Object.getPrototypeOf(a.prototype),"canAdd",this).call(this,l,parseInt(f))}},{key:"value",value:function(l){return parseInt(k(a.prototype.__proto__||Object.getPrototypeOf(a.prototype),"value",this).call(this,l))||void 0}}]),a}(y.default.Attributor.Class),u=new t("indent","ql-indent",{scope:y.default.Scope.BLOCK,whitelist:[1,2,3,4,5,6,7,8]});d.IndentClass=u},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0});var x=h(4),k=b(x);function b(e){return e&&e.__esModule?e:{default:e}}function y(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function p(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t&&(typeof t=="object"||typeof t=="function")?t:e}function s(e,t){if(typeof t!="function"&&t!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i=function(e){s(t,e);function t(){return y(this,t),p(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return t}(k.default);i.blotName="blockquote",i.tagName="blockquote",d.default=i},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0});var x=function(){function t(u,o){for(var a=0;a<o.length;a++){var r=o[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(u,r.key,r)}}return function(u,o,a){return o&&t(u.prototype,o),a&&t(u,a),u}}(),k=h(4),b=y(k);function y(t){return t&&t.__esModule?t:{default:t}}function p(t,u){if(!(t instanceof u))throw new TypeError("Cannot call a class as a function")}function s(t,u){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return u&&(typeof u=="object"||typeof u=="function")?u:t}function i(t,u){if(typeof u!="function"&&u!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof u);t.prototype=Object.create(u&&u.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),u&&(Object.setPrototypeOf?Object.setPrototypeOf(t,u):t.__proto__=u)}var e=function(t){i(u,t);function u(){return p(this,u),s(this,(u.__proto__||Object.getPrototypeOf(u)).apply(this,arguments))}return x(u,null,[{key:"formats",value:function(a){return this.tagName.indexOf(a.tagName)+1}}]),u}(b.default);e.blotName="header",e.tagName=["H1","H2","H3","H4","H5","H6"],d.default=e},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0}),d.default=d.ListItem=void 0;var x=function(){function n(c,E){for(var q=0;q<E.length;q++){var _=E[q];_.enumerable=_.enumerable||!1,_.configurable=!0,"value"in _&&(_.writable=!0),Object.defineProperty(c,_.key,_)}}return function(c,E,q){return E&&n(c.prototype,E),q&&n(c,q),c}}(),k=function n(c,E,q){c===null&&(c=Function.prototype);var _=Object.getOwnPropertyDescriptor(c,E);if(_===void 0){var A=Object.getPrototypeOf(c);return A===null?void 0:n(A,E,q)}else{if("value"in _)return _.value;var g=_.get;return g===void 0?void 0:g.call(q)}},b=h(0),y=t(b),p=h(4),s=t(p),i=h(25),e=t(i);function t(n){return n&&n.__esModule?n:{default:n}}function u(n,c,E){return c in n?Object.defineProperty(n,c,{value:E,enumerable:!0,configurable:!0,writable:!0}):n[c]=E,n}function o(n,c){if(!(n instanceof c))throw new TypeError("Cannot call a class as a function")}function a(n,c){if(!n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return c&&(typeof c=="object"||typeof c=="function")?c:n}function r(n,c){if(typeof c!="function"&&c!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof c);n.prototype=Object.create(c&&c.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),c&&(Object.setPrototypeOf?Object.setPrototypeOf(n,c):n.__proto__=c)}var l=function(n){r(c,n);function c(){return o(this,c),a(this,(c.__proto__||Object.getPrototypeOf(c)).apply(this,arguments))}return x(c,[{key:"format",value:function(q,_){q===f.blotName&&!_?this.replaceWith(y.default.create(this.statics.scope)):k(c.prototype.__proto__||Object.getPrototypeOf(c.prototype),"format",this).call(this,q,_)}},{key:"remove",value:function(){this.prev==null&&this.next==null?this.parent.remove():k(c.prototype.__proto__||Object.getPrototypeOf(c.prototype),"remove",this).call(this)}},{key:"replaceWith",value:function(q,_){return this.parent.isolate(this.offset(this.parent),this.length()),q===this.parent.statics.blotName?(this.parent.replaceWith(q,_),this):(this.parent.unwrap(),k(c.prototype.__proto__||Object.getPrototypeOf(c.prototype),"replaceWith",this).call(this,q,_))}}],[{key:"formats",value:function(q){return q.tagName===this.tagName?void 0:k(c.__proto__||Object.getPrototypeOf(c),"formats",this).call(this,q)}}]),c}(s.default);l.blotName="list-item",l.tagName="LI";var f=function(n){r(c,n),x(c,null,[{key:"create",value:function(q){var _=q==="ordered"?"OL":"UL",A=k(c.__proto__||Object.getPrototypeOf(c),"create",this).call(this,_);return(q==="checked"||q==="unchecked")&&A.setAttribute("data-checked",q==="checked"),A}},{key:"formats",value:function(q){if(q.tagName==="OL")return"ordered";if(q.tagName==="UL")return q.hasAttribute("data-checked")?q.getAttribute("data-checked")==="true"?"checked":"unchecked":"bullet"}}]);function c(E){o(this,c);var q=a(this,(c.__proto__||Object.getPrototypeOf(c)).call(this,E)),_=function(g){if(g.target.parentNode===E){var v=q.statics.formats(E),m=y.default.find(g.target);v==="checked"?m.format("list","unchecked"):v==="unchecked"&&m.format("list","checked")}};return E.addEventListener("touchstart",_),E.addEventListener("mousedown",_),q}return x(c,[{key:"format",value:function(q,_){this.children.length>0&&this.children.tail.format(q,_)}},{key:"formats",value:function(){return u({},this.statics.blotName,this.statics.formats(this.domNode))}},{key:"insertBefore",value:function(q,_){if(q instanceof l)k(c.prototype.__proto__||Object.getPrototypeOf(c.prototype),"insertBefore",this).call(this,q,_);else{var A=_==null?this.length():_.offset(this),g=this.split(A);g.parent.insertBefore(q,g)}}},{key:"optimize",value:function(q){k(c.prototype.__proto__||Object.getPrototypeOf(c.prototype),"optimize",this).call(this,q);var _=this.next;_!=null&&_.prev===this&&_.statics.blotName===this.statics.blotName&&_.domNode.tagName===this.domNode.tagName&&_.domNode.getAttribute("data-checked")===this.domNode.getAttribute("data-checked")&&(_.moveChildren(this),_.remove())}},{key:"replace",value:function(q){if(q.statics.blotName!==this.statics.blotName){var _=y.default.create(this.statics.defaultChild);q.moveChildren(_),this.appendChild(_)}k(c.prototype.__proto__||Object.getPrototypeOf(c.prototype),"replace",this).call(this,q)}}]),c}(e.default);f.blotName="list",f.scope=y.default.Scope.BLOCK_BLOT,f.tagName=["OL","UL"],f.defaultChild="list-item",f.allowedChildren=[l],d.ListItem=l,d.default=f},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0});var x=h(56),k=b(x);function b(e){return e&&e.__esModule?e:{default:e}}function y(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function p(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t&&(typeof t=="object"||typeof t=="function")?t:e}function s(e,t){if(typeof t!="function"&&t!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i=function(e){s(t,e);function t(){return y(this,t),p(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return t}(k.default);i.blotName="italic",i.tagName=["EM","I"],d.default=i},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0});var x=function(){function u(o,a){for(var r=0;r<a.length;r++){var l=a[r];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(o,l.key,l)}}return function(o,a,r){return a&&u(o.prototype,a),r&&u(o,r),o}}(),k=function u(o,a,r){o===null&&(o=Function.prototype);var l=Object.getOwnPropertyDescriptor(o,a);if(l===void 0){var f=Object.getPrototypeOf(o);return f===null?void 0:u(f,a,r)}else{if("value"in l)return l.value;var n=l.get;return n===void 0?void 0:n.call(r)}},b=h(6),y=p(b);function p(u){return u&&u.__esModule?u:{default:u}}function s(u,o){if(!(u instanceof o))throw new TypeError("Cannot call a class as a function")}function i(u,o){if(!u)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return o&&(typeof o=="object"||typeof o=="function")?o:u}function e(u,o){if(typeof o!="function"&&o!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof o);u.prototype=Object.create(o&&o.prototype,{constructor:{value:u,enumerable:!1,writable:!0,configurable:!0}}),o&&(Object.setPrototypeOf?Object.setPrototypeOf(u,o):u.__proto__=o)}var t=function(u){e(o,u);function o(){return s(this,o),i(this,(o.__proto__||Object.getPrototypeOf(o)).apply(this,arguments))}return x(o,null,[{key:"create",value:function(r){return r==="super"?document.createElement("sup"):r==="sub"?document.createElement("sub"):k(o.__proto__||Object.getPrototypeOf(o),"create",this).call(this,r)}},{key:"formats",value:function(r){if(r.tagName==="SUB")return"sub";if(r.tagName==="SUP")return"super"}}]),o}(y.default);t.blotName="script",t.tagName=["SUB","SUP"],d.default=t},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0});var x=h(6),k=b(x);function b(e){return e&&e.__esModule?e:{default:e}}function y(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function p(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t&&(typeof t=="object"||typeof t=="function")?t:e}function s(e,t){if(typeof t!="function"&&t!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i=function(e){s(t,e);function t(){return y(this,t),p(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return t}(k.default);i.blotName="strike",i.tagName="S",d.default=i},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0});var x=h(6),k=b(x);function b(e){return e&&e.__esModule?e:{default:e}}function y(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function p(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t&&(typeof t=="object"||typeof t=="function")?t:e}function s(e,t){if(typeof t!="function"&&t!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i=function(e){s(t,e);function t(){return y(this,t),p(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return t}(k.default);i.blotName="underline",i.tagName="U",d.default=i},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0});var x=function(){function a(r,l){for(var f=0;f<l.length;f++){var n=l[f];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(r,n.key,n)}}return function(r,l,f){return l&&a(r.prototype,l),f&&a(r,f),r}}(),k=function a(r,l,f){r===null&&(r=Function.prototype);var n=Object.getOwnPropertyDescriptor(r,l);if(n===void 0){var c=Object.getPrototypeOf(r);return c===null?void 0:a(c,l,f)}else{if("value"in n)return n.value;var E=n.get;return E===void 0?void 0:E.call(f)}},b=h(0),y=s(b),p=h(27);function s(a){return a&&a.__esModule?a:{default:a}}function i(a,r){if(!(a instanceof r))throw new TypeError("Cannot call a class as a function")}function e(a,r){if(!a)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return r&&(typeof r=="object"||typeof r=="function")?r:a}function t(a,r){if(typeof r!="function"&&r!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof r);a.prototype=Object.create(r&&r.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),r&&(Object.setPrototypeOf?Object.setPrototypeOf(a,r):a.__proto__=r)}var u=["alt","height","width"],o=function(a){t(r,a);function r(){return i(this,r),e(this,(r.__proto__||Object.getPrototypeOf(r)).apply(this,arguments))}return x(r,[{key:"format",value:function(f,n){u.indexOf(f)>-1?n?this.domNode.setAttribute(f,n):this.domNode.removeAttribute(f):k(r.prototype.__proto__||Object.getPrototypeOf(r.prototype),"format",this).call(this,f,n)}}],[{key:"create",value:function(f){var n=k(r.__proto__||Object.getPrototypeOf(r),"create",this).call(this,f);return typeof f=="string"&&n.setAttribute("src",this.sanitize(f)),n}},{key:"formats",value:function(f){return u.reduce(function(n,c){return f.hasAttribute(c)&&(n[c]=f.getAttribute(c)),n},{})}},{key:"match",value:function(f){return/\.(jpe?g|gif|png)$/.test(f)||/^data:image\/.+;base64/.test(f)}},{key:"sanitize",value:function(f){return(0,p.sanitize)(f,["http","https","data"])?f:"//:0"}},{key:"value",value:function(f){return f.getAttribute("src")}}]),r}(y.default.Embed);o.blotName="image",o.tagName="IMG",d.default=o},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0});var x=function(){function a(r,l){for(var f=0;f<l.length;f++){var n=l[f];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(r,n.key,n)}}return function(r,l,f){return l&&a(r.prototype,l),f&&a(r,f),r}}(),k=function a(r,l,f){r===null&&(r=Function.prototype);var n=Object.getOwnPropertyDescriptor(r,l);if(n===void 0){var c=Object.getPrototypeOf(r);return c===null?void 0:a(c,l,f)}else{if("value"in n)return n.value;var E=n.get;return E===void 0?void 0:E.call(f)}},b=h(4),y=h(27),p=s(y);function s(a){return a&&a.__esModule?a:{default:a}}function i(a,r){if(!(a instanceof r))throw new TypeError("Cannot call a class as a function")}function e(a,r){if(!a)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return r&&(typeof r=="object"||typeof r=="function")?r:a}function t(a,r){if(typeof r!="function"&&r!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof r);a.prototype=Object.create(r&&r.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),r&&(Object.setPrototypeOf?Object.setPrototypeOf(a,r):a.__proto__=r)}var u=["height","width"],o=function(a){t(r,a);function r(){return i(this,r),e(this,(r.__proto__||Object.getPrototypeOf(r)).apply(this,arguments))}return x(r,[{key:"format",value:function(f,n){u.indexOf(f)>-1?n?this.domNode.setAttribute(f,n):this.domNode.removeAttribute(f):k(r.prototype.__proto__||Object.getPrototypeOf(r.prototype),"format",this).call(this,f,n)}}],[{key:"create",value:function(f){var n=k(r.__proto__||Object.getPrototypeOf(r),"create",this).call(this,f);return n.setAttribute("frameborder","0"),n.setAttribute("allowfullscreen",!0),n.setAttribute("src",this.sanitize(f)),n}},{key:"formats",value:function(f){return u.reduce(function(n,c){return f.hasAttribute(c)&&(n[c]=f.getAttribute(c)),n},{})}},{key:"sanitize",value:function(f){return p.default.sanitize(f)}},{key:"value",value:function(f){return f.getAttribute("src")}}]),r}(b.BlockEmbed);o.blotName="video",o.className="ql-video",o.tagName="IFRAME",d.default=o},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0}),d.default=d.FormulaBlot=void 0;var x=function(){function f(n,c){for(var E=0;E<c.length;E++){var q=c[E];q.enumerable=q.enumerable||!1,q.configurable=!0,"value"in q&&(q.writable=!0),Object.defineProperty(n,q.key,q)}}return function(n,c,E){return c&&f(n.prototype,c),E&&f(n,E),n}}(),k=function f(n,c,E){n===null&&(n=Function.prototype);var q=Object.getOwnPropertyDescriptor(n,c);if(q===void 0){var _=Object.getPrototypeOf(n);return _===null?void 0:f(_,c,E)}else{if("value"in q)return q.value;var A=q.get;return A===void 0?void 0:A.call(E)}},b=h(35),y=t(b),p=h(5),s=t(p),i=h(9),e=t(i);function t(f){return f&&f.__esModule?f:{default:f}}function u(f,n){if(!(f instanceof n))throw new TypeError("Cannot call a class as a function")}function o(f,n){if(!f)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n&&(typeof n=="object"||typeof n=="function")?n:f}function a(f,n){if(typeof n!="function"&&n!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof n);f.prototype=Object.create(n&&n.prototype,{constructor:{value:f,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(f,n):f.__proto__=n)}var r=function(f){a(n,f);function n(){return u(this,n),o(this,(n.__proto__||Object.getPrototypeOf(n)).apply(this,arguments))}return x(n,null,[{key:"create",value:function(E){var q=k(n.__proto__||Object.getPrototypeOf(n),"create",this).call(this,E);return typeof E=="string"&&(window.katex.render(E,q,{throwOnError:!1,errorColor:"#f00"}),q.setAttribute("data-value",E)),q}},{key:"value",value:function(E){return E.getAttribute("data-value")}}]),n}(y.default);r.blotName="formula",r.className="ql-formula",r.tagName="SPAN";var l=function(f){a(n,f),x(n,null,[{key:"register",value:function(){s.default.register(r,!0)}}]);function n(){u(this,n);var c=o(this,(n.__proto__||Object.getPrototypeOf(n)).call(this));if(window.katex==null)throw new Error("Formula module requires KaTeX.");return c}return n}(e.default);d.FormulaBlot=r,d.default=l},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0}),d.default=d.CodeToken=d.CodeBlock=void 0;var x=function(){function E(q,_){for(var A=0;A<_.length;A++){var g=_[A];g.enumerable=g.enumerable||!1,g.configurable=!0,"value"in g&&(g.writable=!0),Object.defineProperty(q,g.key,g)}}return function(q,_,A){return _&&E(q.prototype,_),A&&E(q,A),q}}(),k=function E(q,_,A){q===null&&(q=Function.prototype);var g=Object.getOwnPropertyDescriptor(q,_);if(g===void 0){var v=Object.getPrototypeOf(q);return v===null?void 0:E(v,_,A)}else{if("value"in g)return g.value;var m=g.get;return m===void 0?void 0:m.call(A)}},b=h(0),y=o(b),p=h(5),s=o(p),i=h(9),e=o(i),t=h(13),u=o(t);function o(E){return E&&E.__esModule?E:{default:E}}function a(E,q){if(!(E instanceof q))throw new TypeError("Cannot call a class as a function")}function r(E,q){if(!E)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return q&&(typeof q=="object"||typeof q=="function")?q:E}function l(E,q){if(typeof q!="function"&&q!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof q);E.prototype=Object.create(q&&q.prototype,{constructor:{value:E,enumerable:!1,writable:!0,configurable:!0}}),q&&(Object.setPrototypeOf?Object.setPrototypeOf(E,q):E.__proto__=q)}var f=function(E){l(q,E);function q(){return a(this,q),r(this,(q.__proto__||Object.getPrototypeOf(q)).apply(this,arguments))}return x(q,[{key:"replaceWith",value:function(A){this.domNode.textContent=this.domNode.textContent,this.attach(),k(q.prototype.__proto__||Object.getPrototypeOf(q.prototype),"replaceWith",this).call(this,A)}},{key:"highlight",value:function(A){var g=this.domNode.textContent;this.cachedText!==g&&((g.trim().length>0||this.cachedText==null)&&(this.domNode.innerHTML=A(g),this.domNode.normalize(),this.attach()),this.cachedText=g)}}]),q}(u.default);f.className="ql-syntax";var n=new y.default.Attributor.Class("token","hljs",{scope:y.default.Scope.INLINE}),c=function(E){l(q,E),x(q,null,[{key:"register",value:function(){s.default.register(n,!0),s.default.register(f,!0)}}]);function q(_,A){a(this,q);var g=r(this,(q.__proto__||Object.getPrototypeOf(q)).call(this,_,A));if(typeof g.options.highlight!="function")throw new Error("Syntax module requires highlight.js. Please include the library on the page before Quill.");var v=null;return g.quill.on(s.default.events.SCROLL_OPTIMIZE,function(){clearTimeout(v),v=setTimeout(function(){g.highlight(),v=null},g.options.interval)}),g.highlight(),g}return x(q,[{key:"highlight",value:function(){var A=this;if(!this.quill.selection.composing){this.quill.update(s.default.sources.USER);var g=this.quill.getSelection();this.quill.scroll.descendants(f).forEach(function(v){v.highlight(A.options.highlight)}),this.quill.update(s.default.sources.SILENT),g!=null&&this.quill.setSelection(g,s.default.sources.SILENT)}}}]),q}(e.default);c.DEFAULTS={highlight:function(){return window.hljs==null?null:function(E){var q=window.hljs.highlightAuto(E);return q.value}}(),interval:1e3},d.CodeBlock=f,d.CodeToken=n,d.default=c},function(P,d){P.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=3 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=13 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=9 y1=4 y2=4></line> </svg>'},function(P,d){P.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=14 x2=4 y1=14 y2=14></line> <line class=ql-stroke x1=12 x2=6 y1=4 y2=4></line> </svg>'},function(P,d){P.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=5 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=9 y1=4 y2=4></line> </svg>'},function(P,d){P.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=3 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=3 y1=4 y2=4></line> </svg>'},function(P,d){P.exports='<svg viewbox="0 0 18 18"> <g class="ql-fill ql-color-label"> <polygon points="6 6.868 6 6 5 6 5 7 5.942 7 6 6.868"></polygon> <rect height=1 width=1 x=4 y=4></rect> <polygon points="6.817 5 6 5 6 6 6.38 6 6.817 5"></polygon> <rect height=1 width=1 x=2 y=6></rect> <rect height=1 width=1 x=3 y=5></rect> <rect height=1 width=1 x=4 y=7></rect> <polygon points="4 11.439 4 11 3 11 3 12 3.755 12 4 11.439"></polygon> <rect height=1 width=1 x=2 y=12></rect> <rect height=1 width=1 x=2 y=9></rect> <rect height=1 width=1 x=2 y=15></rect> <polygon points="4.63 10 4 10 4 11 4.192 11 4.63 10"></polygon> <rect height=1 width=1 x=3 y=8></rect> <path d=M10.832,4.2L11,4.582V4H10.708A1.948,1.948,0,0,1,10.832,4.2Z></path> <path d=M7,4.582L7.168,4.2A1.929,1.929,0,0,1,7.292,4H7V4.582Z></path> <path d=M8,13H7.683l-0.351.8a1.933,1.933,0,0,1-.124.2H8V13Z></path> <rect height=1 width=1 x=12 y=2></rect> <rect height=1 width=1 x=11 y=3></rect> <path d=M9,3H8V3.282A1.985,1.985,0,0,1,9,3Z></path> <rect height=1 width=1 x=2 y=3></rect> <rect height=1 width=1 x=6 y=2></rect> <rect height=1 width=1 x=3 y=2></rect> <rect height=1 width=1 x=5 y=3></rect> <rect height=1 width=1 x=9 y=2></rect> <rect height=1 width=1 x=15 y=14></rect> <polygon points="13.447 10.174 13.469 10.225 13.472 10.232 13.808 11 14 11 14 10 13.37 10 13.447 10.174"></polygon> <rect height=1 width=1 x=13 y=7></rect> <rect height=1 width=1 x=15 y=5></rect> <rect height=1 width=1 x=14 y=6></rect> <rect height=1 width=1 x=15 y=8></rect> <rect height=1 width=1 x=14 y=9></rect> <path d=M3.775,14H3v1H4V14.314A1.97,1.97,0,0,1,3.775,14Z></path> <rect height=1 width=1 x=14 y=3></rect> <polygon points="12 6.868 12 6 11.62 6 12 6.868"></polygon> <rect height=1 width=1 x=15 y=2></rect> <rect height=1 width=1 x=12 y=5></rect> <rect height=1 width=1 x=13 y=4></rect> <polygon points="12.933 9 13 9 13 8 12.495 8 12.933 9"></polygon> <rect height=1 width=1 x=9 y=14></rect> <rect height=1 width=1 x=8 y=15></rect> <path d=M6,14.926V15H7V14.316A1.993,1.993,0,0,1,6,14.926Z></path> <rect height=1 width=1 x=5 y=15></rect> <path d=M10.668,13.8L10.317,13H10v1h0.792A1.947,1.947,0,0,1,10.668,13.8Z></path> <rect height=1 width=1 x=11 y=15></rect> <path d=M14.332,12.2a1.99,1.99,0,0,1,.166.8H15V12H14.245Z></path> <rect height=1 width=1 x=14 y=15></rect> <rect height=1 width=1 x=15 y=11></rect> </g> <polyline class=ql-stroke points="5.5 13 9 5 12.5 13"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=11 y2=11></line> </svg>'},function(P,d){P.exports='<svg viewbox="0 0 18 18"> <rect class="ql-fill ql-stroke" height=3 width=3 x=4 y=5></rect> <rect class="ql-fill ql-stroke" height=3 width=3 x=11 y=5></rect> <path class="ql-even ql-fill ql-stroke" d=M7,8c0,4.031-3,5-3,5></path> <path class="ql-even ql-fill ql-stroke" d=M14,8c0,4.031-3,5-3,5></path> </svg>'},function(P,d){P.exports='<svg viewbox="0 0 18 18"> <path class=ql-stroke d=M5,4H9.5A2.5,2.5,0,0,1,12,6.5v0A2.5,2.5,0,0,1,9.5,9H5A0,0,0,0,1,5,9V4A0,0,0,0,1,5,4Z></path> <path class=ql-stroke d=M5,9h5.5A2.5,2.5,0,0,1,13,11.5v0A2.5,2.5,0,0,1,10.5,14H5a0,0,0,0,1,0,0V9A0,0,0,0,1,5,9Z></path> </svg>'},function(P,d){P.exports='<svg class="" viewbox="0 0 18 18"> <line class=ql-stroke x1=5 x2=13 y1=3 y2=3></line> <line class=ql-stroke x1=6 x2=9.35 y1=12 y2=3></line> <line class=ql-stroke x1=11 x2=15 y1=11 y2=15></line> <line class=ql-stroke x1=15 x2=11 y1=11 y2=15></line> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=7 x=2 y=14></rect> </svg>'},function(P,d){P.exports='<svg viewbox="0 0 18 18"> <line class="ql-color-label ql-stroke ql-transparent" x1=3 x2=15 y1=15 y2=15></line> <polyline class=ql-stroke points="5.5 11 9 3 12.5 11"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=9 y2=9></line> </svg>'},function(P,d){P.exports='<svg viewbox="0 0 18 18"> <polygon class="ql-stroke ql-fill" points="3 11 5 9 3 7 3 11"></polygon> <line class="ql-stroke ql-fill" x1=15 x2=11 y1=4 y2=4></line> <path class=ql-fill d=M11,3a3,3,0,0,0,0,6h1V3H11Z></path> <rect class=ql-fill height=11 width=1 x=11 y=4></rect> <rect class=ql-fill height=11 width=1 x=13 y=4></rect> </svg>'},function(P,d){P.exports='<svg viewbox="0 0 18 18"> <polygon class="ql-stroke ql-fill" points="15 12 13 10 15 8 15 12"></polygon> <line class="ql-stroke ql-fill" x1=9 x2=5 y1=4 y2=4></line> <path class=ql-fill d=M5,3A3,3,0,0,0,5,9H6V3H5Z></path> <rect class=ql-fill height=11 width=1 x=5 y=4></rect> <rect class=ql-fill height=11 width=1 x=7 y=4></rect> </svg>'},function(P,d){P.exports='<svg viewbox="0 0 18 18"> <path class=ql-fill d=M14,16H4a1,1,0,0,1,0-2H14A1,1,0,0,1,14,16Z /> <path class=ql-fill d=M14,4H4A1,1,0,0,1,4,2H14A1,1,0,0,1,14,4Z /> <rect class=ql-fill x=3 y=6 width=12 height=6 rx=1 ry=1 /> </svg>'},function(P,d){P.exports='<svg viewbox="0 0 18 18"> <path class=ql-fill d=M13,16H5a1,1,0,0,1,0-2h8A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H5A1,1,0,0,1,5,2h8A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=2 y=6 width=14 height=6 rx=1 ry=1 /> </svg>'},function(P,d){P.exports='<svg viewbox="0 0 18 18"> <path class=ql-fill d=M15,8H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,8Z /> <path class=ql-fill d=M15,12H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,12Z /> <path class=ql-fill d=M15,16H5a1,1,0,0,1,0-2H15A1,1,0,0,1,15,16Z /> <path class=ql-fill d=M15,4H5A1,1,0,0,1,5,2H15A1,1,0,0,1,15,4Z /> <rect class=ql-fill x=2 y=6 width=8 height=6 rx=1 ry=1 /> </svg>'},function(P,d){P.exports='<svg viewbox="0 0 18 18"> <path class=ql-fill d=M5,8H3A1,1,0,0,1,3,6H5A1,1,0,0,1,5,8Z /> <path class=ql-fill d=M5,12H3a1,1,0,0,1,0-2H5A1,1,0,0,1,5,12Z /> <path class=ql-fill d=M13,16H3a1,1,0,0,1,0-2H13A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H3A1,1,0,0,1,3,2H13A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=8 y=6 width=8 height=6 rx=1 ry=1 transform="translate(24 18) rotate(-180)"/> </svg>'},function(P,d){P.exports='<svg viewbox="0 0 18 18"> <path class=ql-fill d=M11.759,2.482a2.561,2.561,0,0,0-3.53.607A7.656,7.656,0,0,0,6.8,6.2C6.109,9.188,5.275,14.677,4.15,14.927a1.545,1.545,0,0,0-1.3-.933A0.922,0.922,0,0,0,2,15.036S1.954,16,4.119,16s3.091-2.691,3.7-5.553c0.177-.826.36-1.726,0.554-2.6L8.775,6.2c0.381-1.421.807-2.521,1.306-2.676a1.014,1.014,0,0,0,1.02.56A0.966,0.966,0,0,0,11.759,2.482Z></path> <rect class=ql-fill height=1.6 rx=0.8 ry=0.8 width=5 x=5.15 y=6.2></rect> <path class=ql-fill d=M13.663,12.027a1.662,1.662,0,0,1,.266-0.276q0.193,0.069.456,0.138a2.1,2.1,0,0,0,.535.069,1.075,1.075,0,0,0,.767-0.3,1.044,1.044,0,0,0,.314-0.8,0.84,0.84,0,0,0-.238-0.619,0.8,0.8,0,0,0-.594-0.239,1.154,1.154,0,0,0-.781.3,4.607,4.607,0,0,0-.781,1q-0.091.15-.218,0.346l-0.246.38c-0.068-.288-0.137-0.582-0.212-0.885-0.459-1.847-2.494-.984-2.941-0.8-0.482.2-.353,0.647-0.094,0.529a0.869,0.869,0,0,1,1.281.585c0.217,0.751.377,1.436,0.527,2.038a5.688,5.688,0,0,1-.362.467,2.69,2.69,0,0,1-.264.271q-0.221-.08-0.471-0.147a2.029,2.029,0,0,0-.522-0.066,1.079,1.079,0,0,0-.768.3A1.058,1.058,0,0,0,9,15.131a0.82,0.82,0,0,0,.832.852,1.134,1.134,0,0,0,.787-0.3,5.11,5.11,0,0,0,.776-0.993q0.141-.219.215-0.34c0.046-.076.122-0.194,0.223-0.346a2.786,2.786,0,0,0,.918,1.726,2.582,2.582,0,0,0,2.376-.185c0.317-.181.212-0.565,0-0.494A0.807,0.807,0,0,1,14.176,15a5.159,5.159,0,0,1-.913-2.446l0,0Q13.487,12.24,13.663,12.027Z></path> </svg>'},function(P,d){P.exports='<svg viewBox="0 0 18 18"> <path class=ql-fill d=M10,4V14a1,1,0,0,1-2,0V10H3v4a1,1,0,0,1-2,0V4A1,1,0,0,1,3,4V8H8V4a1,1,0,0,1,2,0Zm6.06787,9.209H14.98975V7.59863a.54085.54085,0,0,0-.605-.60547h-.62744a1.01119,1.01119,0,0,0-.748.29688L11.645,8.56641a.5435.5435,0,0,0-.022.8584l.28613.30762a.53861.53861,0,0,0,.84717.0332l.09912-.08789a1.2137,1.2137,0,0,0,.2417-.35254h.02246s-.01123.30859-.01123.60547V13.209H12.041a.54085.54085,0,0,0-.605.60547v.43945a.54085.54085,0,0,0,.605.60547h4.02686a.54085.54085,0,0,0,.605-.60547v-.43945A.54085.54085,0,0,0,16.06787,13.209Z /> </svg>'},function(P,d){P.exports='<svg viewBox="0 0 18 18"> <path class=ql-fill d=M16.73975,13.81445v.43945a.54085.54085,0,0,1-.605.60547H11.855a.58392.58392,0,0,1-.64893-.60547V14.0127c0-2.90527,3.39941-3.42187,3.39941-4.55469a.77675.77675,0,0,0-.84717-.78125,1.17684,1.17684,0,0,0-.83594.38477c-.2749.26367-.561.374-.85791.13184l-.4292-.34082c-.30811-.24219-.38525-.51758-.1543-.81445a2.97155,2.97155,0,0,1,2.45361-1.17676,2.45393,2.45393,0,0,1,2.68408,2.40918c0,2.45312-3.1792,2.92676-3.27832,3.93848h2.79443A.54085.54085,0,0,1,16.73975,13.81445ZM9,3A.99974.99974,0,0,0,8,4V8H3V4A1,1,0,0,0,1,4V14a1,1,0,0,0,2,0V10H8v4a1,1,0,0,0,2,0V4A.99974.99974,0,0,0,9,3Z /> </svg>'},function(P,d){P.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=7 x2=13 y1=4 y2=4></line> <line class=ql-stroke x1=5 x2=11 y1=14 y2=14></line> <line class=ql-stroke x1=8 x2=10 y1=14 y2=4></line> </svg>'},function(P,d){P.exports='<svg viewbox="0 0 18 18"> <rect class=ql-stroke height=10 width=12 x=3 y=4></rect> <circle class=ql-fill cx=6 cy=7 r=1></circle> <polyline class="ql-even ql-fill" points="5 12 5 11 7 9 8 10 11 7 13 9 13 12 5 12"></polyline> </svg>'},function(P,d){P.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class="ql-fill ql-stroke" points="3 7 3 11 5 9 3 7"></polyline> </svg>'},function(P,d){P.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points="5 7 5 11 3 9 5 7"></polyline> </svg>'},function(P,d){P.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=7 x2=11 y1=7 y2=11></line> <path class="ql-even ql-stroke" d=M8.9,4.577a3.476,3.476,0,0,1,.36,4.679A3.476,3.476,0,0,1,4.577,8.9C3.185,7.5,2.035,6.4,4.217,4.217S7.5,3.185,8.9,4.577Z></path> <path class="ql-even ql-stroke" d=M13.423,9.1a3.476,3.476,0,0,0-4.679-.36,3.476,3.476,0,0,0,.36,4.679c1.392,1.392,2.5,2.542,4.679.36S14.815,10.5,13.423,9.1Z></path> </svg>'},function(P,d){P.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=7 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=7 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=7 x2=15 y1=14 y2=14></line> <line class="ql-stroke ql-thin" x1=2.5 x2=4.5 y1=5.5 y2=5.5></line> <path class=ql-fill d=M3.5,6A0.5,0.5,0,0,1,3,5.5V3.085l-0.276.138A0.5,0.5,0,0,1,2.053,3c-0.124-.247-0.023-0.324.224-0.447l1-.5A0.5,0.5,0,0,1,4,2.5v3A0.5,0.5,0,0,1,3.5,6Z></path> <path class="ql-stroke ql-thin" d=M4.5,10.5h-2c0-.234,1.85-1.076,1.85-2.234A0.959,0.959,0,0,0,2.5,8.156></path> <path class="ql-stroke ql-thin" d=M2.5,14.846a0.959,0.959,0,0,0,1.85-.109A0.7,0.7,0,0,0,3.75,14a0.688,0.688,0,0,0,.6-0.736,0.959,0.959,0,0,0-1.85-.109></path> </svg>'},function(P,d){P.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=6 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=6 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=6 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=3 y1=4 y2=4></line> <line class=ql-stroke x1=3 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=3 y1=14 y2=14></line> </svg>'},function(P,d){P.exports='<svg class="" viewbox="0 0 18 18"> <line class=ql-stroke x1=9 x2=15 y1=4 y2=4></line> <polyline class=ql-stroke points="3 4 4 5 6 3"></polyline> <line class=ql-stroke x1=9 x2=15 y1=14 y2=14></line> <polyline class=ql-stroke points="3 14 4 15 6 13"></polyline> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points="3 9 4 10 6 8"></polyline> </svg>'},function(P,d){P.exports='<svg viewbox="0 0 18 18"> <path class=ql-fill d=M15.5,15H13.861a3.858,3.858,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.921,1.921,0,0,0,12.021,11.7a0.50013,0.50013,0,1,0,.957.291h0a0.914,0.914,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.076-1.16971,1.86982-1.93971,2.43082A1.45639,1.45639,0,0,0,12,15.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,15Z /> <path class=ql-fill d=M9.65,5.241a1,1,0,0,0-1.409.108L6,7.964,3.759,5.349A1,1,0,0,0,2.192,6.59178Q2.21541,6.6213,2.241,6.649L4.684,9.5,2.241,12.35A1,1,0,0,0,3.71,13.70722q0.02557-.02768.049-0.05722L6,11.036,8.241,13.65a1,1,0,1,0,1.567-1.24277Q9.78459,12.3777,9.759,12.35L7.316,9.5,9.759,6.651A1,1,0,0,0,9.65,5.241Z /> </svg>'},function(P,d){P.exports='<svg viewbox="0 0 18 18"> <path class=ql-fill d=M15.5,7H13.861a4.015,4.015,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.922,1.922,0,0,0,12.021,3.7a0.5,0.5,0,1,0,.957.291,0.917,0.917,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.077-1.164,1.925-1.934,2.486A1.423,1.423,0,0,0,12,7.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,7Z /> <path class=ql-fill d=M9.651,5.241a1,1,0,0,0-1.41.108L6,7.964,3.759,5.349a1,1,0,1,0-1.519,1.3L4.683,9.5,2.241,12.35a1,1,0,1,0,1.519,1.3L6,11.036,8.241,13.65a1,1,0,0,0,1.519-1.3L7.317,9.5,9.759,6.651A1,1,0,0,0,9.651,5.241Z /> </svg>'},function(P,d){P.exports='<svg viewbox="0 0 18 18"> <line class="ql-stroke ql-thin" x1=15.5 x2=2.5 y1=8.5 y2=9.5></line> <path class=ql-fill d=M9.007,8C6.542,7.791,6,7.519,6,6.5,6,5.792,7.283,5,9,5c1.571,0,2.765.679,2.969,1.309a1,1,0,0,0,1.9-.617C13.356,4.106,11.354,3,9,3,6.2,3,4,4.538,4,6.5a3.2,3.2,0,0,0,.5,1.843Z></path> <path class=ql-fill d=M8.984,10C11.457,10.208,12,10.479,12,11.5c0,0.708-1.283,1.5-3,1.5-1.571,0-2.765-.679-2.969-1.309a1,1,0,1,0-1.9.617C4.644,13.894,6.646,15,9,15c2.8,0,5-1.538,5-3.5a3.2,3.2,0,0,0-.5-1.843Z></path> </svg>'},function(P,d){P.exports='<svg viewbox="0 0 18 18"> <path class=ql-stroke d=M5,3V9a4.012,4.012,0,0,0,4,4H9a4.012,4.012,0,0,0,4-4V3></path> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=12 x=3 y=15></rect> </svg>'},function(P,d){P.exports='<svg viewbox="0 0 18 18"> <rect class=ql-stroke height=12 width=12 x=3 y=3></rect> <rect class=ql-fill height=12 width=1 x=5 y=3></rect> <rect class=ql-fill height=12 width=1 x=12 y=3></rect> <rect class=ql-fill height=2 width=8 x=5 y=8></rect> <rect class=ql-fill height=1 width=3 x=3 y=5></rect> <rect class=ql-fill height=1 width=3 x=3 y=7></rect> <rect class=ql-fill height=1 width=3 x=3 y=10></rect> <rect class=ql-fill height=1 width=3 x=3 y=12></rect> <rect class=ql-fill height=1 width=3 x=12 y=5></rect> <rect class=ql-fill height=1 width=3 x=12 y=7></rect> <rect class=ql-fill height=1 width=3 x=12 y=10></rect> <rect class=ql-fill height=1 width=3 x=12 y=12></rect> </svg>'},function(P,d){P.exports='<svg viewbox="0 0 18 18"> <polygon class=ql-stroke points="7 11 9 13 11 11 7 11"></polygon> <polygon class=ql-stroke points="7 7 9 5 11 7 7 7"></polygon> </svg>'},function(P,d,h){Object.defineProperty(d,"__esModule",{value:!0}),d.default=d.BubbleTooltip=void 0;var x=function q(_,A,g){_===null&&(_=Function.prototype);var v=Object.getOwnPropertyDescriptor(_,A);if(v===void 0){var m=Object.getPrototypeOf(_);return m===null?void 0:q(m,A,g)}else{if("value"in v)return v.value;var w=v.get;return w===void 0?void 0:w.call(g)}},k=function(){function q(_,A){for(var g=0;g<A.length;g++){var v=A[g];v.enumerable=v.enumerable||!1,v.configurable=!0,"value"in v&&(v.writable=!0),Object.defineProperty(_,v.key,v)}}return function(_,A,g){return A&&q(_.prototype,A),g&&q(_,g),_}}(),b=h(3),y=a(b),p=h(8),s=a(p),i=h(43),e=a(i),t=h(15),u=h(41),o=a(u);function a(q){return q&&q.__esModule?q:{default:q}}function r(q,_){if(!(q instanceof _))throw new TypeError("Cannot call a class as a function")}function l(q,_){if(!q)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return _&&(typeof _=="object"||typeof _=="function")?_:q}function f(q,_){if(typeof _!="function"&&_!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof _);q.prototype=Object.create(_&&_.prototype,{constructor:{value:q,enumerable:!1,writable:!0,configurable:!0}}),_&&(Object.setPrototypeOf?Object.setPrototypeOf(q,_):q.__proto__=_)}var n=[["bold","italic","link"],[{header:1},{header:2},"blockquote"]],c=function(q){f(_,q);function _(A,g){r(this,_),g.modules.toolbar!=null&&g.modules.toolbar.container==null&&(g.modules.toolbar.container=n);var v=l(this,(_.__proto__||Object.getPrototypeOf(_)).call(this,A,g));return v.quill.container.classList.add("ql-bubble"),v}return k(_,[{key:"extendToolbar",value:function(g){this.tooltip=new E(this.quill,this.options.bounds),this.tooltip.root.appendChild(g.container),this.buildButtons([].slice.call(g.container.querySelectorAll("button")),o.default),this.buildPickers([].slice.call(g.container.querySelectorAll("select")),o.default)}}]),_}(e.default);c.DEFAULTS=(0,y.default)(!0,{},e.default.DEFAULTS,{modules:{toolbar:{handlers:{link:function(_){_?this.quill.theme.tooltip.edit():this.quill.format("link",!1)}}}}});var E=function(q){f(_,q);function _(A,g){r(this,_);var v=l(this,(_.__proto__||Object.getPrototypeOf(_)).call(this,A,g));return v.quill.on(s.default.events.EDITOR_CHANGE,function(m,w,T,R){if(m===s.default.events.SELECTION_CHANGE)if(w!=null&&w.length>0&&R===s.default.sources.USER){v.show(),v.root.style.left="0px",v.root.style.width="",v.root.style.width=v.root.offsetWidth+"px";var B=v.quill.getLines(w.index,w.length);if(B.length===1)v.position(v.quill.getBounds(w));else{var C=B[B.length-1],W=v.quill.getIndex(C),M=Math.min(C.length()-1,w.index+w.length-W),I=v.quill.getBounds(new t.Range(W,M));v.position(I)}}else document.activeElement!==v.textbox&&v.quill.hasFocus()&&v.hide()}),v}return k(_,[{key:"listen",value:function(){var g=this;x(_.prototype.__proto__||Object.getPrototypeOf(_.prototype),"listen",this).call(this),this.root.querySelector(".ql-close").addEventListener("click",function(){g.root.classList.remove("ql-editing")}),this.quill.on(s.default.events.SCROLL_OPTIMIZE,function(){setTimeout(function(){if(!g.root.classList.contains("ql-hidden")){var v=g.quill.getSelection();v!=null&&g.position(g.quill.getBounds(v))}},1)})}},{key:"cancel",value:function(){this.show()}},{key:"position",value:function(g){var v=x(_.prototype.__proto__||Object.getPrototypeOf(_.prototype),"position",this).call(this,g),m=this.root.querySelector(".ql-tooltip-arrow");if(m.style.marginLeft="",v===0)return v;m.style.marginLeft=-1*v-m.offsetWidth/2+"px"}}]),_}(i.BaseTooltip);E.TEMPLATE=['<span class="ql-tooltip-arrow"></span>','<div class="ql-tooltip-editor">','<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">','<a class="ql-close"></a>',"</div>"].join(""),d.BubbleTooltip=E,d.default=c},function(P,d,h){P.exports=h(63)}]).default})})(Ee);var Re=Ee.exports;const ce=Se(Re);/*!
 * vue2-editor v2.10.3 
 * (c) 2021 David Royer
 * Released under the MIT License.
 */var Ie=[[{header:[!1,1,2,3,4,5,6]}],["bold","italic","underline","strike"],[{align:""},{align:"center"},{align:"right"},{align:"justify"}],["blockquote","code-block"],[{list:"ordered"},{list:"bullet"},{list:"check"}],[{indent:"-1"},{indent:"+1"}],[{color:[]},{background:[]}],["link","image","video"],["clean"]],je={props:{customModules:Array},methods:{registerCustomModules:function(z){this.customModules!==void 0&&this.customModules.forEach(function(P){z.register("modules/"+P.alias,P.module)})}}};function pe(G){return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?pe=function(z){return typeof z}:pe=function(z){return z&&typeof Symbol=="function"&&z.constructor===Symbol&&z!==Symbol.prototype?"symbol":typeof z},pe(G)}function xe(G,z){if(!(G instanceof z))throw new TypeError("Cannot call a class as a function")}function ke(G,z){for(var P=0;P<z.length;P++){var d=z[P];d.enumerable=d.enumerable||!1,d.configurable=!0,"value"in d&&(d.writable=!0),Object.defineProperty(G,d.key,d)}}function Me(G,z,P){return z&&ke(G.prototype,z),P&&ke(G,P),G}function De(G,z){if(typeof z!="function"&&z!==null)throw new TypeError("Super expression must either be null or a function");G.prototype=Object.create(z&&z.prototype,{constructor:{value:G,writable:!0,configurable:!0}}),z&&ge(G,z)}function me(G){return me=Object.setPrototypeOf?Object.getPrototypeOf:function(P){return P.__proto__||Object.getPrototypeOf(P)},me(G)}function ge(G,z){return ge=Object.setPrototypeOf||function(d,h){return d.__proto__=h,d},ge(G,z)}function Be(G){if(G===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return G}function Ce(G,z){return z&&(typeof z=="object"||typeof z=="function")?z:Be(G)}function Oe(G,z){return Fe(G)||ze(G,z)||He()}function Fe(G){if(Array.isArray(G))return G}function ze(G,z){var P=[],d=!0,h=!1,x=void 0;try{for(var k=G[Symbol.iterator](),b;!(d=(b=k.next()).done)&&(P.push(b.value),!(z&&P.length===z));d=!0);}catch(y){h=!0,x=y}finally{try{!d&&k.return!=null&&k.return()}finally{if(h)throw x}}return P}function He(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function Ae(G,z){var P=function(h){return h&&pe(h)==="object"};return!P(G)||!P(z)?z:(Object.keys(z).forEach(function(d){var h=G[d],x=z[d];Array.isArray(h)&&Array.isArray(x)?G[d]=h.concat(x):P(h)&&P(x)?G[d]=Ae(Object.assign({},h),x):G[d]=x}),G)}var Ue=ce.import("blots/block/embed"),qe=function(G){De(z,G);function z(){return xe(this,z),Ce(this,me(z).apply(this,arguments))}return z}(Ue);qe.blotName="hr";qe.tagName="hr";ce.register("formats/horizontal",qe);var Ke=function(){function G(z,P){var d=this;xe(this,G),this.quill=z,this.options=P,this.ignoreTags=["PRE"],this.matches=[{name:"header",pattern:/^(#){1,6}\s/g,action:function(x,k,b){var y=b.exec(x);if(y){var p=y[0].length;setTimeout(function(){d.quill.formatLine(k.index,0,"header",p-1),d.quill.deleteText(k.index-p,p)},0)}}},{name:"blockquote",pattern:/^(>)\s/g,action:function(x,k){setTimeout(function(){d.quill.formatLine(k.index,1,"blockquote",!0),d.quill.deleteText(k.index-2,2)},0)}},{name:"code-block",pattern:/^`{3}(?:\s|\n)/g,action:function(x,k){setTimeout(function(){d.quill.formatLine(k.index,1,"code-block",!0),d.quill.deleteText(k.index-4,4)},0)}},{name:"bolditalic",pattern:/(?:\*|_){3}(.+?)(?:\*|_){3}/g,action:function(x,k,b,y){var p=b.exec(x),s=p[0],i=p[1],e=y+p.index;x.match(/^([*_ \n]+)$/g)||setTimeout(function(){d.quill.deleteText(e,s.length),d.quill.insertText(e,i,{bold:!0,italic:!0}),d.quill.format("bold",!1)},0)}},{name:"bold",pattern:/(?:\*|_){2}(.+?)(?:\*|_){2}/g,action:function(x,k,b,y){var p=b.exec(x),s=p[0],i=p[1],e=y+p.index;x.match(/^([*_ \n]+)$/g)||setTimeout(function(){d.quill.deleteText(e,s.length),d.quill.insertText(e,i,{bold:!0}),d.quill.format("bold",!1)},0)}},{name:"italic",pattern:/(?:\*|_){1}(.+?)(?:\*|_){1}/g,action:function(x,k,b,y){var p=b.exec(x),s=p[0],i=p[1],e=y+p.index;x.match(/^([*_ \n]+)$/g)||setTimeout(function(){d.quill.deleteText(e,s.length),d.quill.insertText(e,i,{italic:!0}),d.quill.format("italic",!1)},0)}},{name:"strikethrough",pattern:/(?:~~)(.+?)(?:~~)/g,action:function(x,k,b,y){var p=b.exec(x),s=p[0],i=p[1],e=y+p.index;x.match(/^([*_ \n]+)$/g)||setTimeout(function(){d.quill.deleteText(e,s.length),d.quill.insertText(e,i,{strike:!0}),d.quill.format("strike",!1)},0)}},{name:"code",pattern:/(?:`)(.+?)(?:`)/g,action:function(x,k,b,y){var p=b.exec(x),s=p[0],i=p[1],e=y+p.index;x.match(/^([*_ \n]+)$/g)||setTimeout(function(){d.quill.deleteText(e,s.length),d.quill.insertText(e,i,{code:!0}),d.quill.format("code",!1),d.quill.insertText(d.quill.getSelection()," ")},0)}},{name:"hr",pattern:/^([-*]\s?){3}/g,action:function(x,k){var b=k.index-x.length;setTimeout(function(){d.quill.deleteText(b,x.length),d.quill.insertEmbed(b+1,"hr",!0,ce.sources.USER),d.quill.insertText(b+2,`
`,ce.sources.SILENT),d.quill.setSelection(b+2,ce.sources.SILENT)},0)}},{name:"asterisk-ul",pattern:/^(\*|\+)\s$/g,action:function(x,k,b){setTimeout(function(){d.quill.formatLine(k.index,1,"list","unordered"),d.quill.deleteText(k.index-2,2)},0)}},{name:"image",pattern:/(?:!\[(.+?)\])(?:\((.+?)\))/g,action:function(x,k,b){var y=x.search(b),p=x.match(b)[0],s=x.match(/(?:\((.*?)\))/g)[0],i=k.index-p.length-1;y!==-1&&setTimeout(function(){d.quill.deleteText(i,p.length),d.quill.insertEmbed(i,"image",s.slice(1,s.length-1))},0)}},{name:"link",pattern:/(?:\[(.+?)\])(?:\((.+?)\))/g,action:function(x,k,b){var y=x.search(b),p=x.match(b)[0],s=x.match(/(?:\[(.*?)\])/g)[0],i=x.match(/(?:\((.*?)\))/g)[0],e=k.index-p.length-1;y!==-1&&setTimeout(function(){d.quill.deleteText(e,p.length),d.quill.insertText(e,s.slice(1,s.length-1),"link",i.slice(1,i.length-1))},0)}}],this.quill.on("text-change",function(h,x,k){for(var b=0;b<h.ops.length;b++)h.ops[b].hasOwnProperty("insert")&&(h.ops[b].insert===" "?d.onSpace():h.ops[b].insert===`
`&&d.onEnter())})}return Me(G,[{key:"isValid",value:function(P,d){return typeof P!="undefined"&&P&&this.ignoreTags.indexOf(d)===-1}},{key:"onSpace",value:function(){var P=this.quill.getSelection();if(P){var d=this.quill.getLine(P.index),h=Oe(d,2),x=h[0],k=h[1],b=x.domNode.textContent,y=P.index-k;if(this.isValid(b,x.domNode.tagName)){var p=!0,s=!1,i=void 0;try{for(var e=this.matches[Symbol.iterator](),t;!(p=(t=e.next()).done);p=!0){var u=t.value,o=b.match(u.pattern);if(o){console.log("matched:",u.name,b),u.action(b,P,u.pattern,y);return}}}catch(a){s=!0,i=a}finally{try{!p&&e.return!=null&&e.return()}finally{if(s)throw i}}}}}},{key:"onEnter",value:function(){var P=this.quill.getSelection();if(P){var d=this.quill.getLine(P.index),h=Oe(d,2),x=h[0],k=h[1],b=x.domNode.textContent+" ",y=P.index-k;if(P.length=P.index++,this.isValid(b,x.domNode.tagName)){var p=!0,s=!1,i=void 0;try{for(var e=this.matches[Symbol.iterator](),t;!(p=(t=e.next()).done);p=!0){var u=t.value,o=b.match(u.pattern);if(o){console.log("matched",u.name,b),u.action(b,P,u.pattern,y);return}}}catch(a){s=!0,i=a}finally{try{!p&&e.return!=null&&e.return()}finally{if(s)throw i}}}}}}]),G}(),Ve={name:"VueEditor",mixins:[je],props:{id:{type:String,default:"quill-container"},placeholder:{type:String,default:""},value:{type:String,default:""},disabled:{type:Boolean},editorToolbar:{type:Array,default:function(){return[]}},editorOptions:{type:Object,required:!1,default:function(){return{}}},useCustomImageHandler:{type:Boolean,default:!1},useMarkdownShortcuts:{type:Boolean,default:!1}},data:function(){return{quill:null}},watch:{value:function(z){z!=this.quill.root.innerHTML&&!this.quill.hasFocus()&&(this.quill.root.innerHTML=z)},disabled:function(z){this.quill.enable(!z)}},mounted:function(){this.registerCustomModules(ce),this.registerPrototypes(),this.initializeEditor()},beforeDestroy:function(){this.quill=null,delete this.quill},methods:{initializeEditor:function(){this.setupQuillEditor(),this.checkForCustomImageHandler(),this.handleInitialContent(),this.registerEditorEventListeners(),this.$emit("ready",this.quill)},setupQuillEditor:function(){var z={debug:!1,modules:this.setModules(),theme:"snow",placeholder:this.placeholder?this.placeholder:"",readOnly:this.disabled?this.disabled:!1};this.prepareEditorConfig(z),this.quill=new ce(this.$refs.quillContainer,z)},setModules:function(){var z={toolbar:this.editorToolbar.length?this.editorToolbar:Ie};return this.useMarkdownShortcuts&&(ce.register("modules/markdownShortcuts",Ke,!0),z.markdownShortcuts={}),z},prepareEditorConfig:function(z){Object.keys(this.editorOptions).length>0&&this.editorOptions.constructor===Object&&(this.editorOptions.modules&&typeof this.editorOptions.modules.toolbar!="undefined"&&delete z.modules.toolbar,Ae(z,this.editorOptions))},registerPrototypes:function(){ce.prototype.getHTML=function(){return this.container.querySelector(".ql-editor").innerHTML},ce.prototype.getWordCount=function(){return this.container.querySelector(".ql-editor").innerText.length}},registerEditorEventListeners:function(){this.quill.on("text-change",this.handleTextChange),this.quill.on("selection-change",this.handleSelectionChange),this.listenForEditorEvent("text-change"),this.listenForEditorEvent("selection-change"),this.listenForEditorEvent("editor-change")},listenForEditorEvent:function(z){var P=this;this.quill.on(z,function(){for(var d=arguments.length,h=new Array(d),x=0;x<d;x++)h[x]=arguments[x];P.$emit.apply(P,[z].concat(h))})},handleInitialContent:function(){this.value&&(this.quill.root.innerHTML=this.value)},handleSelectionChange:function(z,P){!z&&P?this.$emit("blur",this.quill):z&&!P&&this.$emit("focus",this.quill)},handleTextChange:function(z,P){var d=this.quill.getHTML()==="<p><br></p>"?"":this.quill.getHTML();this.$emit("input",d),this.useCustomImageHandler&&this.handleImageRemoved(z,P)},handleImageRemoved:function(z,P){var d=this,h=this.quill.getContents(),x=h.diff(P),k=x.ops;k.map(function(b){if(b.insert&&b.insert.hasOwnProperty("image")){var y=b.insert.image;d.$emit("image-removed",y)}})},checkForCustomImageHandler:function(){this.useCustomImageHandler===!0&&this.setupCustomImageHandler()},setupCustomImageHandler:function(){var z=this.quill.getModule("toolbar");z.addHandler("image",this.customImageHandler)},customImageHandler:function(){this.$refs.fileInput.click()},emitImageInfo:function(z){var P=function(){var y=document.getElementById("file-upload");y.value=""},d=z.target.files[0],h=this.quill,x=h.getSelection(),k=x.index;this.$emit("image-added",d,h,k,P)}}};function $e(G,z,P,d,h,x,k,b,y,p){typeof k!="boolean"&&(y=b,b=k,k=!1);var s=typeof P=="function"?P.options:P;G&&G.render&&(s.render=G.render,s.staticRenderFns=G.staticRenderFns,s._compiled=!0,h&&(s.functional=!0)),d&&(s._scopeId=d);var i;if(x?(i=function(o){o=o||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext,!o&&typeof __VUE_SSR_CONTEXT__!="undefined"&&(o=__VUE_SSR_CONTEXT__),z&&z.call(this,y(o)),o&&o._registeredComponents&&o._registeredComponents.add(x)},s._ssrRegister=i):z&&(i=k?function(){z.call(this,p(this.$root.$options.shadowRoot))}:function(u){z.call(this,b(u))}),i)if(s.functional){var e=s.render;s.render=function(o,a){return i.call(a),e(o,a)}}else{var t=s.beforeCreate;s.beforeCreate=t?[].concat(t,i):[i]}return P}var We=$e,Ze=typeof navigator!="undefined"&&/msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());function Ge(G){return function(z,P){return Ye(z,P)}}var ye,we={};function Ye(G,z){var P=Ze?z.media||"default":G,d=we[P]||(we[P]={ids:new Set,styles:[]});if(!d.ids.has(G)){d.ids.add(G);var h=z.source;if(z.map&&(h+=`
/*# sourceURL=`+z.map.sources[0]+" */",h+=`
/*# sourceMappingURL=data:application/json;base64,`+btoa(unescape(encodeURIComponent(JSON.stringify(z.map))))+" */"),d.element||(d.element=document.createElement("style"),d.element.type="text/css",z.media&&d.element.setAttribute("media",z.media),ye===void 0&&(ye=document.head||document.getElementsByTagName("head")[0]),ye.appendChild(d.element)),"styleSheet"in d.element)d.styles.push(h),d.element.styleSheet.cssText=d.styles.filter(Boolean).join(`
`);else{var x=d.ids.size-1,k=document.createTextNode(h),b=d.element.childNodes;b[x]&&d.element.removeChild(b[x]),b.length?d.element.insertBefore(k,b[x]):d.element.appendChild(k)}}}var Xe=Ge;const Qe=Ve;var Je=function(){var G=this,z=G.$createElement,P=G._self._c||z;return P("div",{staticClass:"quillWrapper"},[G._t("toolbar"),G._v(" "),P("div",{ref:"quillContainer",attrs:{id:G.id}}),G._v(" "),G.useCustomImageHandler?P("input",{ref:"fileInput",staticStyle:{display:"none"},attrs:{id:"file-upload",type:"file",accept:"image/*"},on:{change:function(d){return G.emitImageInfo(d)}}}):G._e()],2)},et=[];const tt=function(G){G&&(G("data-v-776e788e_0",{source:`/*!
 * Quill Editor v1.3.6
 * https://quilljs.com/
 * Copyright (c) 2014, Jason Chen
 * Copyright (c) 2013, salesforce.com
 */.ql-container{box-sizing:border-box;font-family:Helvetica,Arial,sans-serif;font-size:13px;height:100%;margin:0;position:relative}.ql-container.ql-disabled .ql-tooltip{visibility:hidden}.ql-container.ql-disabled .ql-editor ul[data-checked]>li::before{pointer-events:none}.ql-clipboard{left:-100000px;height:1px;overflow-y:hidden;position:absolute;top:50%}.ql-clipboard p{margin:0;padding:0}.ql-editor{box-sizing:border-box;line-height:1.42;height:100%;outline:0;overflow-y:auto;padding:12px 15px;tab-size:4;-moz-tab-size:4;text-align:left;white-space:pre-wrap;word-wrap:break-word}.ql-editor>*{cursor:text}.ql-editor blockquote,.ql-editor h1,.ql-editor h2,.ql-editor h3,.ql-editor h4,.ql-editor h5,.ql-editor h6,.ql-editor ol,.ql-editor p,.ql-editor pre,.ql-editor ul{margin:0;padding:0;counter-reset:list-1 list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9}.ql-editor ol,.ql-editor ul{padding-left:1.5em}.ql-editor ol>li,.ql-editor ul>li{list-style-type:none}.ql-editor ul>li::before{content:'\\2022'}.ql-editor ul[data-checked=false],.ql-editor ul[data-checked=true]{pointer-events:none}.ql-editor ul[data-checked=false]>li *,.ql-editor ul[data-checked=true]>li *{pointer-events:all}.ql-editor ul[data-checked=false]>li::before,.ql-editor ul[data-checked=true]>li::before{color:#777;cursor:pointer;pointer-events:all}.ql-editor ul[data-checked=true]>li::before{content:'\\2611'}.ql-editor ul[data-checked=false]>li::before{content:'\\2610'}.ql-editor li::before{display:inline-block;white-space:nowrap;width:1.2em}.ql-editor li:not(.ql-direction-rtl)::before{margin-left:-1.5em;margin-right:.3em;text-align:right}.ql-editor li.ql-direction-rtl::before{margin-left:.3em;margin-right:-1.5em}.ql-editor ol li:not(.ql-direction-rtl),.ql-editor ul li:not(.ql-direction-rtl){padding-left:1.5em}.ql-editor ol li.ql-direction-rtl,.ql-editor ul li.ql-direction-rtl{padding-right:1.5em}.ql-editor ol li{counter-reset:list-1 list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;counter-increment:list-0}.ql-editor ol li:before{content:counter(list-0,decimal) '. '}.ql-editor ol li.ql-indent-1{counter-increment:list-1}.ql-editor ol li.ql-indent-1:before{content:counter(list-1,lower-alpha) '. '}.ql-editor ol li.ql-indent-1{counter-reset:list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9}.ql-editor ol li.ql-indent-2{counter-increment:list-2}.ql-editor ol li.ql-indent-2:before{content:counter(list-2,lower-roman) '. '}.ql-editor ol li.ql-indent-2{counter-reset:list-3 list-4 list-5 list-6 list-7 list-8 list-9}.ql-editor ol li.ql-indent-3{counter-increment:list-3}.ql-editor ol li.ql-indent-3:before{content:counter(list-3,decimal) '. '}.ql-editor ol li.ql-indent-3{counter-reset:list-4 list-5 list-6 list-7 list-8 list-9}.ql-editor ol li.ql-indent-4{counter-increment:list-4}.ql-editor ol li.ql-indent-4:before{content:counter(list-4,lower-alpha) '. '}.ql-editor ol li.ql-indent-4{counter-reset:list-5 list-6 list-7 list-8 list-9}.ql-editor ol li.ql-indent-5{counter-increment:list-5}.ql-editor ol li.ql-indent-5:before{content:counter(list-5,lower-roman) '. '}.ql-editor ol li.ql-indent-5{counter-reset:list-6 list-7 list-8 list-9}.ql-editor ol li.ql-indent-6{counter-increment:list-6}.ql-editor ol li.ql-indent-6:before{content:counter(list-6,decimal) '. '}.ql-editor ol li.ql-indent-6{counter-reset:list-7 list-8 list-9}.ql-editor ol li.ql-indent-7{counter-increment:list-7}.ql-editor ol li.ql-indent-7:before{content:counter(list-7,lower-alpha) '. '}.ql-editor ol li.ql-indent-7{counter-reset:list-8 list-9}.ql-editor ol li.ql-indent-8{counter-increment:list-8}.ql-editor ol li.ql-indent-8:before{content:counter(list-8,lower-roman) '. '}.ql-editor ol li.ql-indent-8{counter-reset:list-9}.ql-editor ol li.ql-indent-9{counter-increment:list-9}.ql-editor ol li.ql-indent-9:before{content:counter(list-9,decimal) '. '}.ql-editor .ql-indent-1:not(.ql-direction-rtl){padding-left:3em}.ql-editor li.ql-indent-1:not(.ql-direction-rtl){padding-left:4.5em}.ql-editor .ql-indent-1.ql-direction-rtl.ql-align-right{padding-right:3em}.ql-editor li.ql-indent-1.ql-direction-rtl.ql-align-right{padding-right:4.5em}.ql-editor .ql-indent-2:not(.ql-direction-rtl){padding-left:6em}.ql-editor li.ql-indent-2:not(.ql-direction-rtl){padding-left:7.5em}.ql-editor .ql-indent-2.ql-direction-rtl.ql-align-right{padding-right:6em}.ql-editor li.ql-indent-2.ql-direction-rtl.ql-align-right{padding-right:7.5em}.ql-editor .ql-indent-3:not(.ql-direction-rtl){padding-left:9em}.ql-editor li.ql-indent-3:not(.ql-direction-rtl){padding-left:10.5em}.ql-editor .ql-indent-3.ql-direction-rtl.ql-align-right{padding-right:9em}.ql-editor li.ql-indent-3.ql-direction-rtl.ql-align-right{padding-right:10.5em}.ql-editor .ql-indent-4:not(.ql-direction-rtl){padding-left:12em}.ql-editor li.ql-indent-4:not(.ql-direction-rtl){padding-left:13.5em}.ql-editor .ql-indent-4.ql-direction-rtl.ql-align-right{padding-right:12em}.ql-editor li.ql-indent-4.ql-direction-rtl.ql-align-right{padding-right:13.5em}.ql-editor .ql-indent-5:not(.ql-direction-rtl){padding-left:15em}.ql-editor li.ql-indent-5:not(.ql-direction-rtl){padding-left:16.5em}.ql-editor .ql-indent-5.ql-direction-rtl.ql-align-right{padding-right:15em}.ql-editor li.ql-indent-5.ql-direction-rtl.ql-align-right{padding-right:16.5em}.ql-editor .ql-indent-6:not(.ql-direction-rtl){padding-left:18em}.ql-editor li.ql-indent-6:not(.ql-direction-rtl){padding-left:19.5em}.ql-editor .ql-indent-6.ql-direction-rtl.ql-align-right{padding-right:18em}.ql-editor li.ql-indent-6.ql-direction-rtl.ql-align-right{padding-right:19.5em}.ql-editor .ql-indent-7:not(.ql-direction-rtl){padding-left:21em}.ql-editor li.ql-indent-7:not(.ql-direction-rtl){padding-left:22.5em}.ql-editor .ql-indent-7.ql-direction-rtl.ql-align-right{padding-right:21em}.ql-editor li.ql-indent-7.ql-direction-rtl.ql-align-right{padding-right:22.5em}.ql-editor .ql-indent-8:not(.ql-direction-rtl){padding-left:24em}.ql-editor li.ql-indent-8:not(.ql-direction-rtl){padding-left:25.5em}.ql-editor .ql-indent-8.ql-direction-rtl.ql-align-right{padding-right:24em}.ql-editor li.ql-indent-8.ql-direction-rtl.ql-align-right{padding-right:25.5em}.ql-editor .ql-indent-9:not(.ql-direction-rtl){padding-left:27em}.ql-editor li.ql-indent-9:not(.ql-direction-rtl){padding-left:28.5em}.ql-editor .ql-indent-9.ql-direction-rtl.ql-align-right{padding-right:27em}.ql-editor li.ql-indent-9.ql-direction-rtl.ql-align-right{padding-right:28.5em}.ql-editor .ql-video{display:block;max-width:100%}.ql-editor .ql-video.ql-align-center{margin:0 auto}.ql-editor .ql-video.ql-align-right{margin:0 0 0 auto}.ql-editor .ql-bg-black{background-color:#000}.ql-editor .ql-bg-red{background-color:#e60000}.ql-editor .ql-bg-orange{background-color:#f90}.ql-editor .ql-bg-yellow{background-color:#ff0}.ql-editor .ql-bg-green{background-color:#008a00}.ql-editor .ql-bg-blue{background-color:#06c}.ql-editor .ql-bg-purple{background-color:#93f}.ql-editor .ql-color-white{color:#fff}.ql-editor .ql-color-red{color:#e60000}.ql-editor .ql-color-orange{color:#f90}.ql-editor .ql-color-yellow{color:#ff0}.ql-editor .ql-color-green{color:#008a00}.ql-editor .ql-color-blue{color:#06c}.ql-editor .ql-color-purple{color:#93f}.ql-editor .ql-font-serif{font-family:Georgia,Times New Roman,serif}.ql-editor .ql-font-monospace{font-family:Monaco,Courier New,monospace}.ql-editor .ql-size-small{font-size:.75em}.ql-editor .ql-size-large{font-size:1.5em}.ql-editor .ql-size-huge{font-size:2.5em}.ql-editor .ql-direction-rtl{direction:rtl;text-align:inherit}.ql-editor .ql-align-center{text-align:center}.ql-editor .ql-align-justify{text-align:justify}.ql-editor .ql-align-right{text-align:right}.ql-editor.ql-blank::before{color:rgba(0,0,0,.6);content:attr(data-placeholder);font-style:italic;left:15px;pointer-events:none;position:absolute;right:15px}.ql-snow .ql-toolbar:after,.ql-snow.ql-toolbar:after{clear:both;content:'';display:table}.ql-snow .ql-toolbar button,.ql-snow.ql-toolbar button{background:0 0;border:none;cursor:pointer;display:inline-block;float:left;height:24px;padding:3px 5px;width:28px}.ql-snow .ql-toolbar button svg,.ql-snow.ql-toolbar button svg{float:left;height:100%}.ql-snow .ql-toolbar button:active:hover,.ql-snow.ql-toolbar button:active:hover{outline:0}.ql-snow .ql-toolbar input.ql-image[type=file],.ql-snow.ql-toolbar input.ql-image[type=file]{display:none}.ql-snow .ql-toolbar .ql-picker-item.ql-selected,.ql-snow .ql-toolbar .ql-picker-item:hover,.ql-snow .ql-toolbar .ql-picker-label.ql-active,.ql-snow .ql-toolbar .ql-picker-label:hover,.ql-snow .ql-toolbar button.ql-active,.ql-snow .ql-toolbar button:focus,.ql-snow .ql-toolbar button:hover,.ql-snow.ql-toolbar .ql-picker-item.ql-selected,.ql-snow.ql-toolbar .ql-picker-item:hover,.ql-snow.ql-toolbar .ql-picker-label.ql-active,.ql-snow.ql-toolbar .ql-picker-label:hover,.ql-snow.ql-toolbar button.ql-active,.ql-snow.ql-toolbar button:focus,.ql-snow.ql-toolbar button:hover{color:#06c}.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-fill,.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-stroke.ql-fill,.ql-snow .ql-toolbar .ql-picker-item:hover .ql-fill,.ql-snow .ql-toolbar .ql-picker-item:hover .ql-stroke.ql-fill,.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-fill,.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-stroke.ql-fill,.ql-snow .ql-toolbar .ql-picker-label:hover .ql-fill,.ql-snow .ql-toolbar .ql-picker-label:hover .ql-stroke.ql-fill,.ql-snow .ql-toolbar button.ql-active .ql-fill,.ql-snow .ql-toolbar button.ql-active .ql-stroke.ql-fill,.ql-snow .ql-toolbar button:focus .ql-fill,.ql-snow .ql-toolbar button:focus .ql-stroke.ql-fill,.ql-snow .ql-toolbar button:hover .ql-fill,.ql-snow .ql-toolbar button:hover .ql-stroke.ql-fill,.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-fill,.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-stroke.ql-fill,.ql-snow.ql-toolbar .ql-picker-item:hover .ql-fill,.ql-snow.ql-toolbar .ql-picker-item:hover .ql-stroke.ql-fill,.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-fill,.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-stroke.ql-fill,.ql-snow.ql-toolbar .ql-picker-label:hover .ql-fill,.ql-snow.ql-toolbar .ql-picker-label:hover .ql-stroke.ql-fill,.ql-snow.ql-toolbar button.ql-active .ql-fill,.ql-snow.ql-toolbar button.ql-active .ql-stroke.ql-fill,.ql-snow.ql-toolbar button:focus .ql-fill,.ql-snow.ql-toolbar button:focus .ql-stroke.ql-fill,.ql-snow.ql-toolbar button:hover .ql-fill,.ql-snow.ql-toolbar button:hover .ql-stroke.ql-fill{fill:#06c}.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-stroke,.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-stroke-miter,.ql-snow .ql-toolbar .ql-picker-item:hover .ql-stroke,.ql-snow .ql-toolbar .ql-picker-item:hover .ql-stroke-miter,.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-stroke,.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-stroke-miter,.ql-snow .ql-toolbar .ql-picker-label:hover .ql-stroke,.ql-snow .ql-toolbar .ql-picker-label:hover .ql-stroke-miter,.ql-snow .ql-toolbar button.ql-active .ql-stroke,.ql-snow .ql-toolbar button.ql-active .ql-stroke-miter,.ql-snow .ql-toolbar button:focus .ql-stroke,.ql-snow .ql-toolbar button:focus .ql-stroke-miter,.ql-snow .ql-toolbar button:hover .ql-stroke,.ql-snow .ql-toolbar button:hover .ql-stroke-miter,.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-stroke,.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-stroke-miter,.ql-snow.ql-toolbar .ql-picker-item:hover .ql-stroke,.ql-snow.ql-toolbar .ql-picker-item:hover .ql-stroke-miter,.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-stroke,.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-stroke-miter,.ql-snow.ql-toolbar .ql-picker-label:hover .ql-stroke,.ql-snow.ql-toolbar .ql-picker-label:hover .ql-stroke-miter,.ql-snow.ql-toolbar button.ql-active .ql-stroke,.ql-snow.ql-toolbar button.ql-active .ql-stroke-miter,.ql-snow.ql-toolbar button:focus .ql-stroke,.ql-snow.ql-toolbar button:focus .ql-stroke-miter,.ql-snow.ql-toolbar button:hover .ql-stroke,.ql-snow.ql-toolbar button:hover .ql-stroke-miter{stroke:#06c}@media (pointer:coarse){.ql-snow .ql-toolbar button:hover:not(.ql-active),.ql-snow.ql-toolbar button:hover:not(.ql-active){color:#444}.ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-fill,.ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-stroke.ql-fill,.ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-fill,.ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-stroke.ql-fill{fill:#444}.ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-stroke,.ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-stroke-miter,.ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-stroke,.ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-stroke-miter{stroke:#444}}.ql-snow{box-sizing:border-box}.ql-snow *{box-sizing:border-box}.ql-snow .ql-hidden{display:none}.ql-snow .ql-out-bottom,.ql-snow .ql-out-top{visibility:hidden}.ql-snow .ql-tooltip{position:absolute;transform:translateY(10px)}.ql-snow .ql-tooltip a{cursor:pointer;text-decoration:none}.ql-snow .ql-tooltip.ql-flip{transform:translateY(-10px)}.ql-snow .ql-formats{display:inline-block;vertical-align:middle}.ql-snow .ql-formats:after{clear:both;content:'';display:table}.ql-snow .ql-stroke{fill:none;stroke:#444;stroke-linecap:round;stroke-linejoin:round;stroke-width:2}.ql-snow .ql-stroke-miter{fill:none;stroke:#444;stroke-miterlimit:10;stroke-width:2}.ql-snow .ql-fill,.ql-snow .ql-stroke.ql-fill{fill:#444}.ql-snow .ql-empty{fill:none}.ql-snow .ql-even{fill-rule:evenodd}.ql-snow .ql-stroke.ql-thin,.ql-snow .ql-thin{stroke-width:1}.ql-snow .ql-transparent{opacity:.4}.ql-snow .ql-direction svg:last-child{display:none}.ql-snow .ql-direction.ql-active svg:last-child{display:inline}.ql-snow .ql-direction.ql-active svg:first-child{display:none}.ql-snow .ql-editor h1{font-size:2em}.ql-snow .ql-editor h2{font-size:1.5em}.ql-snow .ql-editor h3{font-size:1.17em}.ql-snow .ql-editor h4{font-size:1em}.ql-snow .ql-editor h5{font-size:.83em}.ql-snow .ql-editor h6{font-size:.67em}.ql-snow .ql-editor a{text-decoration:underline}.ql-snow .ql-editor blockquote{border-left:4px solid #ccc;margin-bottom:5px;margin-top:5px;padding-left:16px}.ql-snow .ql-editor code,.ql-snow .ql-editor pre{background-color:#f0f0f0;border-radius:3px}.ql-snow .ql-editor pre{white-space:pre-wrap;margin-bottom:5px;margin-top:5px;padding:5px 10px}.ql-snow .ql-editor code{font-size:85%;padding:2px 4px}.ql-snow .ql-editor pre.ql-syntax{background-color:#23241f;color:#f8f8f2;overflow:visible}.ql-snow .ql-editor img{max-width:100%}.ql-snow .ql-picker{color:#444;display:inline-block;float:left;font-size:14px;font-weight:500;height:24px;position:relative;vertical-align:middle}.ql-snow .ql-picker-label{cursor:pointer;display:inline-block;height:100%;padding-left:8px;padding-right:2px;position:relative;width:100%}.ql-snow .ql-picker-label::before{display:inline-block;line-height:22px}.ql-snow .ql-picker-options{background-color:#fff;display:none;min-width:100%;padding:4px 8px;position:absolute;white-space:nowrap}.ql-snow .ql-picker-options .ql-picker-item{cursor:pointer;display:block;padding-bottom:5px;padding-top:5px}.ql-snow .ql-picker.ql-expanded .ql-picker-label{color:#ccc;z-index:2}.ql-snow .ql-picker.ql-expanded .ql-picker-label .ql-fill{fill:#ccc}.ql-snow .ql-picker.ql-expanded .ql-picker-label .ql-stroke{stroke:#ccc}.ql-snow .ql-picker.ql-expanded .ql-picker-options{display:block;margin-top:-1px;top:100%;z-index:1}.ql-snow .ql-color-picker,.ql-snow .ql-icon-picker{width:28px}.ql-snow .ql-color-picker .ql-picker-label,.ql-snow .ql-icon-picker .ql-picker-label{padding:2px 4px}.ql-snow .ql-color-picker .ql-picker-label svg,.ql-snow .ql-icon-picker .ql-picker-label svg{right:4px}.ql-snow .ql-icon-picker .ql-picker-options{padding:4px 0}.ql-snow .ql-icon-picker .ql-picker-item{height:24px;width:24px;padding:2px 4px}.ql-snow .ql-color-picker .ql-picker-options{padding:3px 5px;width:152px}.ql-snow .ql-color-picker .ql-picker-item{border:1px solid transparent;float:left;height:16px;margin:2px;padding:0;width:16px}.ql-snow .ql-picker:not(.ql-color-picker):not(.ql-icon-picker) svg{position:absolute;margin-top:-9px;right:0;top:50%;width:18px}.ql-snow .ql-picker.ql-font .ql-picker-item[data-label]:not([data-label=''])::before,.ql-snow .ql-picker.ql-font .ql-picker-label[data-label]:not([data-label=''])::before,.ql-snow .ql-picker.ql-header .ql-picker-item[data-label]:not([data-label=''])::before,.ql-snow .ql-picker.ql-header .ql-picker-label[data-label]:not([data-label=''])::before,.ql-snow .ql-picker.ql-size .ql-picker-item[data-label]:not([data-label=''])::before,.ql-snow .ql-picker.ql-size .ql-picker-label[data-label]:not([data-label=''])::before{content:attr(data-label)}.ql-snow .ql-picker.ql-header{width:98px}.ql-snow .ql-picker.ql-header .ql-picker-item::before,.ql-snow .ql-picker.ql-header .ql-picker-label::before{content:'Normal'}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value="1"]::before,.ql-snow .ql-picker.ql-header .ql-picker-label[data-value="1"]::before{content:'Heading 1'}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value="2"]::before,.ql-snow .ql-picker.ql-header .ql-picker-label[data-value="2"]::before{content:'Heading 2'}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value="3"]::before,.ql-snow .ql-picker.ql-header .ql-picker-label[data-value="3"]::before{content:'Heading 3'}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value="4"]::before,.ql-snow .ql-picker.ql-header .ql-picker-label[data-value="4"]::before{content:'Heading 4'}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value="5"]::before,.ql-snow .ql-picker.ql-header .ql-picker-label[data-value="5"]::before{content:'Heading 5'}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value="6"]::before,.ql-snow .ql-picker.ql-header .ql-picker-label[data-value="6"]::before{content:'Heading 6'}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value="1"]::before{font-size:2em}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value="2"]::before{font-size:1.5em}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value="3"]::before{font-size:1.17em}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value="4"]::before{font-size:1em}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value="5"]::before{font-size:.83em}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value="6"]::before{font-size:.67em}.ql-snow .ql-picker.ql-font{width:108px}.ql-snow .ql-picker.ql-font .ql-picker-item::before,.ql-snow .ql-picker.ql-font .ql-picker-label::before{content:'Sans Serif'}.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=serif]::before,.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=serif]::before{content:'Serif'}.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=monospace]::before,.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=monospace]::before{content:'Monospace'}.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=serif]::before{font-family:Georgia,Times New Roman,serif}.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=monospace]::before{font-family:Monaco,Courier New,monospace}.ql-snow .ql-picker.ql-size{width:98px}.ql-snow .ql-picker.ql-size .ql-picker-item::before,.ql-snow .ql-picker.ql-size .ql-picker-label::before{content:'Normal'}.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=small]::before,.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=small]::before{content:'Small'}.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=large]::before,.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=large]::before{content:'Large'}.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=huge]::before,.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=huge]::before{content:'Huge'}.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=small]::before{font-size:10px}.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=large]::before{font-size:18px}.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=huge]::before{font-size:32px}.ql-snow .ql-color-picker.ql-background .ql-picker-item{background-color:#fff}.ql-snow .ql-color-picker.ql-color .ql-picker-item{background-color:#000}.ql-toolbar.ql-snow{border:1px solid #ccc;box-sizing:border-box;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;padding:8px}.ql-toolbar.ql-snow .ql-formats{margin-right:15px}.ql-toolbar.ql-snow .ql-picker-label{border:1px solid transparent}.ql-toolbar.ql-snow .ql-picker-options{border:1px solid transparent;box-shadow:rgba(0,0,0,.2) 0 2px 8px}.ql-toolbar.ql-snow .ql-picker.ql-expanded .ql-picker-label{border-color:#ccc}.ql-toolbar.ql-snow .ql-picker.ql-expanded .ql-picker-options{border-color:#ccc}.ql-toolbar.ql-snow .ql-color-picker .ql-picker-item.ql-selected,.ql-toolbar.ql-snow .ql-color-picker .ql-picker-item:hover{border-color:#000}.ql-toolbar.ql-snow+.ql-container.ql-snow{border-top:0}.ql-snow .ql-tooltip{background-color:#fff;border:1px solid #ccc;box-shadow:0 0 5px #ddd;color:#444;padding:5px 12px;white-space:nowrap}.ql-snow .ql-tooltip::before{content:"Visit URL:";line-height:26px;margin-right:8px}.ql-snow .ql-tooltip input[type=text]{display:none;border:1px solid #ccc;font-size:13px;height:26px;margin:0;padding:3px 5px;width:170px}.ql-snow .ql-tooltip a.ql-preview{display:inline-block;max-width:200px;overflow-x:hidden;text-overflow:ellipsis;vertical-align:top}.ql-snow .ql-tooltip a.ql-action::after{border-right:1px solid #ccc;content:'Edit';margin-left:16px;padding-right:8px}.ql-snow .ql-tooltip a.ql-remove::before{content:'Remove';margin-left:8px}.ql-snow .ql-tooltip a{line-height:26px}.ql-snow .ql-tooltip.ql-editing a.ql-preview,.ql-snow .ql-tooltip.ql-editing a.ql-remove{display:none}.ql-snow .ql-tooltip.ql-editing input[type=text]{display:inline-block}.ql-snow .ql-tooltip.ql-editing a.ql-action::after{border-right:0;content:'Save';padding-right:0}.ql-snow .ql-tooltip[data-mode=link]::before{content:"Enter link:"}.ql-snow .ql-tooltip[data-mode=formula]::before{content:"Enter formula:"}.ql-snow .ql-tooltip[data-mode=video]::before{content:"Enter video:"}.ql-snow a{color:#06c}.ql-container.ql-snow{border:1px solid #ccc}`,map:void 0,media:void 0}),G("data-v-776e788e_1",{source:".ql-editor{min-height:200px;font-size:16px}.ql-snow .ql-stroke.ql-thin,.ql-snow .ql-thin{stroke-width:1px!important}.quillWrapper .ql-snow.ql-toolbar{padding-top:8px;padding-bottom:4px}.quillWrapper .ql-snow.ql-toolbar .ql-formats{margin-bottom:10px}.ql-snow .ql-toolbar button svg,.quillWrapper .ql-snow.ql-toolbar button svg{width:22px;height:22px}.quillWrapper .ql-editor ul[data-checked=false]>li::before,.quillWrapper .ql-editor ul[data-checked=true]>li::before{font-size:1.35em;vertical-align:baseline;bottom:-.065em;font-weight:900;color:#222}.quillWrapper .ql-snow .ql-stroke{stroke:rgba(63,63,63,.95);stroke-linecap:square;stroke-linejoin:initial;stroke-width:1.7px}.quillWrapper .ql-picker-label{font-size:15px}.quillWrapper .ql-snow .ql-active .ql-stroke{stroke-width:2.25px}.quillWrapper .ql-toolbar.ql-snow .ql-formats{vertical-align:top}.ql-picker:not(.ql-background){position:relative;top:2px}.ql-picker.ql-color-picker svg{width:22px!important;height:22px!important}.quillWrapper .imageResizeActive img{display:block;cursor:pointer}.quillWrapper .imageResizeActive~div svg{cursor:pointer}",map:void 0,media:void 0}))},nt=void 0,rt=void 0,it=!1;var _e=We({render:Je,staticRenderFns:et},tt,Qe,nt,it,rt,Xe,void 0),lt="2.10.3";function be(G){be.installed||(be.installed=!0,G.component("VueEditor",_e))}var ot={install:be,version:lt,Quill:ce,VueEditor:_e},ve=null;typeof window!="undefined"?ve=window.Vue:typeof global!="undefined"&&(ve=global.Vue);ve&&ve.use(ot);ce.imports["formats/link"].PROTOCOL_WHITELIST.push("notion");const at={name:"RichTextAreaInput",components:{VueEditor:_e},mixins:[Le],props:{editorToolbar:{type:Array,default:()=>[[{header:1},{header:2}],["bold","italic","underline","link"],[{list:"ordered"},{list:"bullet"}],[{color:[]}]]}}};var ut=function(){var z=this,P=z._self._c;return P("div",{class:z.wrapperClass},[z.label?P("label",{class:[z.theme.RichTextAreaInput.label,{"uppercase text-xs":z.uppercaseLabels,"text-sm":!z.uppercaseLabels}],attrs:{for:z.id?z.id:z.name}},[z._v(" "+z._s(z.label)+" "),z.required?P("span",{staticClass:"text-red-500 required-dot"},[z._v("*")]):z._e()]):z._e(),z.help&&z.helpPosition=="above_input"?P("div",{staticClass:"flex mb-1"},[P("small",{staticClass:"grow",class:z.theme.RichTextAreaInput.help},[z._t("help",function(){return[P("span",{staticClass:"field-help",domProps:{innerHTML:z._s(z.help)}})]})],2)]):z._e(),P("vue-editor",{ref:"editor",staticClass:"rich-editor resize-y",class:[{"!ring-red-500 !ring-2":z.hasValidation&&z.form.errors.has(z.name),"!cursor-not-allowed !bg-gray-200":z.disabled},z.theme.RichTextAreaInput.input],style:z.inputStyle,attrs:{id:z.id?z.id:z.name,disabled:z.disabled,placeholder:z.placeholder,"editor-toolbar":z.editorToolbar},model:{value:z.compVal,callback:function(d){z.compVal=d},expression:"compVal"}}),z.help&&z.helpPosition=="below_input"?P("small",{class:z.theme.RichTextAreaInput.help},[z._t("help",function(){return[P("span",{staticClass:"field-help",domProps:{innerHTML:z._s(z.help)}})]})],2):z._e(),z.hasValidation?P("has-error",{attrs:{form:z.form,field:z.name}}):z._e()],1)},st=[],ft=Pe(at,ut,st,!1,null,null,null,null);const dt=ft.exports;export{dt as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
