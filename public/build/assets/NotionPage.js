var ye=Object.defineProperty,be=Object.defineProperties;var $e=Object.getOwnPropertyDescriptors;var oe=Object.getOwnPropertySymbols;var xe=Object.prototype.hasOwnProperty,ke=Object.prototype.propertyIsEnumerable;var se=(e,n,t)=>n in e?ye(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,H=(e,n)=>{for(var t in n||(n={}))xe.call(n,t)&&se(e,t,n[t]);if(oe)for(var t of oe(n))ke.call(n,t)&&se(e,t,n[t]);return e},q=(e,n)=>be(e,$e(n));var le=(e,n,t)=>new Promise((c,f)=>{var v=b=>{try{o(t.next(b))}catch(S){f(S)}},h=b=>{try{o(t.throw(b))}catch(S){f(S)}},o=b=>b.done?c(b.value):Promise.resolve(b.value).then(v,h);o((t=t.apply(e,n)).next())});import{c as ne,g as ie,n as Fe}from"./app.js";var ce={exports:{}};(function(e){var n=typeof window!="undefined"?window:typeof WorkerGlobalScope!="undefined"&&self instanceof WorkerGlobalScope?self:{};/**
 * Prism: Lightweight, robust, elegant syntax highlighting
 *
 * @license MIT <https://opensource.org/licenses/MIT>
 * @author Lea Verou <https://lea.verou.me>
 * @namespace
 * @public
 */var t=function(c){var f=/(?:^|\s)lang(?:uage)?-([\w-]+)(?=\s|$)/i,v=0,h={},o={manual:c.Prism&&c.Prism.manual,disableWorkerMessageHandler:c.Prism&&c.Prism.disableWorkerMessageHandler,util:{encode:function a(i){return i instanceof b?new b(i.type,a(i.content),i.alias):Array.isArray(i)?i.map(a):i.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/\u00a0/g," ")},type:function(a){return Object.prototype.toString.call(a).slice(8,-1)},objId:function(a){return a.__id||Object.defineProperty(a,"__id",{value:++v}),a.__id},clone:function a(i,s){s=s||{};var u,_;switch(o.util.type(i)){case"Object":if(_=o.util.objId(i),s[_])return s[_];u={},s[_]=u;for(var p in i)i.hasOwnProperty(p)&&(u[p]=a(i[p],s));return u;case"Array":return _=o.util.objId(i),s[_]?s[_]:(u=[],s[_]=u,i.forEach(function(g,d){u[d]=a(g,s)}),u);default:return i}},getLanguage:function(a){for(;a;){var i=f.exec(a.className);if(i)return i[1].toLowerCase();a=a.parentElement}return"none"},setLanguage:function(a,i){a.className=a.className.replace(RegExp(f,"gi"),""),a.classList.add("language-"+i)},currentScript:function(){if(typeof document=="undefined")return null;if("currentScript"in document&&1<2)return document.currentScript;try{throw new Error}catch(u){var a=(/at [^(\r\n]*\((.*):[^:]+:[^:]+\)$/i.exec(u.stack)||[])[1];if(a){var i=document.getElementsByTagName("script");for(var s in i)if(i[s].src==a)return i[s]}return null}},isActive:function(a,i,s){for(var u="no-"+i;a;){var _=a.classList;if(_.contains(i))return!0;if(_.contains(u))return!1;a=a.parentElement}return!!s}},languages:{plain:h,plaintext:h,text:h,txt:h,extend:function(a,i){var s=o.util.clone(o.languages[a]);for(var u in i)s[u]=i[u];return s},insertBefore:function(a,i,s,u){u=u||o.languages;var _=u[a],p={};for(var g in _)if(_.hasOwnProperty(g)){if(g==i)for(var d in s)s.hasOwnProperty(d)&&(p[d]=s[d]);s.hasOwnProperty(g)||(p[g]=_[g])}var N=u[a];return u[a]=p,o.languages.DFS(o.languages,function(F,D){D===N&&F!=a&&(this[F]=p)}),p},DFS:function a(i,s,u,_){_=_||{};var p=o.util.objId;for(var g in i)if(i.hasOwnProperty(g)){s.call(i,g,i[g],u||g);var d=i[g],N=o.util.type(d);N==="Object"&&!_[p(d)]?(_[p(d)]=!0,a(d,s,null,_)):N==="Array"&&!_[p(d)]&&(_[p(d)]=!0,a(d,s,g,_))}}},plugins:{},highlightAll:function(a,i){o.highlightAllUnder(document,a,i)},highlightAllUnder:function(a,i,s){var u={callback:s,container:a,selector:'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'};o.hooks.run("before-highlightall",u),u.elements=Array.prototype.slice.apply(u.container.querySelectorAll(u.selector)),o.hooks.run("before-all-elements-highlight",u);for(var _=0,p;p=u.elements[_++];)o.highlightElement(p,i===!0,u.callback)},highlightElement:function(a,i,s){var u=o.util.getLanguage(a),_=o.languages[u];o.util.setLanguage(a,u);var p=a.parentElement;p&&p.nodeName.toLowerCase()==="pre"&&o.util.setLanguage(p,u);var g=a.textContent,d={element:a,language:u,grammar:_,code:g};function N(D){d.highlightedCode=D,o.hooks.run("before-insert",d),d.element.innerHTML=d.highlightedCode,o.hooks.run("after-highlight",d),o.hooks.run("complete",d),s&&s.call(d.element)}if(o.hooks.run("before-sanity-check",d),p=d.element.parentElement,p&&p.nodeName.toLowerCase()==="pre"&&!p.hasAttribute("tabindex")&&p.setAttribute("tabindex","0"),!d.code){o.hooks.run("complete",d),s&&s.call(d.element);return}if(o.hooks.run("before-highlight",d),!d.grammar){N(o.util.encode(d.code));return}if(i&&c.Worker){var F=new Worker(o.filename);F.onmessage=function(D){N(D.data)},F.postMessage(JSON.stringify({language:d.language,code:d.code,immediateClose:!0}))}else N(o.highlight(d.code,d.grammar,d.language))},highlight:function(a,i,s){var u={code:a,grammar:i,language:s};if(o.hooks.run("before-tokenize",u),!u.grammar)throw new Error('The language "'+u.language+'" has no grammar.');return u.tokens=o.tokenize(u.code,u.grammar),o.hooks.run("after-tokenize",u),b.stringify(o.util.encode(u.tokens),u.language)},tokenize:function(a,i){var s=i.rest;if(s){for(var u in s)i[u]=s[u];delete i.rest}var _=new E;return k(_,_.head,a),P(a,_,i,_.head,0),w(_)},hooks:{all:{},add:function(a,i){var s=o.hooks.all;s[a]=s[a]||[],s[a].push(i)},run:function(a,i){var s=o.hooks.all[a];if(!(!s||!s.length))for(var u=0,_;_=s[u++];)_(i)}},Token:b};c.Prism=o;function b(a,i,s,u){this.type=a,this.content=i,this.alias=s,this.length=(u||"").length|0}b.stringify=function a(i,s){if(typeof i=="string")return i;if(Array.isArray(i)){var u="";return i.forEach(function(N){u+=a(N,s)}),u}var _={type:i.type,content:a(i.content,s),tag:"span",classes:["token",i.type],attributes:{},language:s},p=i.alias;p&&(Array.isArray(p)?Array.prototype.push.apply(_.classes,p):_.classes.push(p)),o.hooks.run("wrap",_);var g="";for(var d in _.attributes)g+=" "+d+'="'+(_.attributes[d]||"").replace(/"/g,"&quot;")+'"';return"<"+_.tag+' class="'+_.classes.join(" ")+'"'+g+">"+_.content+"</"+_.tag+">"};function S(a,i,s,u){a.lastIndex=i;var _=a.exec(s);if(_&&u&&_[1]){var p=_[1].length;_.index+=p,_[0]=_[0].slice(p)}return _}function P(a,i,s,u,_,p){for(var g in s)if(!(!s.hasOwnProperty(g)||!s[g])){var d=s[g];d=Array.isArray(d)?d:[d];for(var N=0;N<d.length;++N){if(p&&p.cause==g+","+N)return;var F=d[N],D=F.inside,G=!!F.lookbehind,r=!!F.greedy,l=F.alias;if(r&&!F.pattern.global){var m=F.pattern.toString().match(/[imsuy]*$/)[0];F.pattern=RegExp(F.pattern.source,m+"g")}for(var R=F.pattern||F,$=u.next,y=_;$!==i.tail&&!(p&&y>=p.reach);y+=$.value.length,$=$.next){var L=$.value;if(i.length>a.length)return;if(!(L instanceof b)){var I=1,j;if(r){if(j=S(R,y,a,G),!j||j.index>=a.length)break;var Z=j.index,ge=j.index+j[0].length,U=y;for(U+=$.value.length;Z>=U;)$=$.next,U+=$.value.length;if(U-=$.value.length,y=U,$.value instanceof b)continue;for(var W=$;W!==i.tail&&(U<ge||typeof W.value=="string");W=W.next)I++,U+=W.value.length;I--,L=a.slice(y,U),j.index-=y}else if(j=S(R,0,L,G),!j)continue;var Z=j.index,K=j[0],J=L.slice(0,Z),ae=L.slice(Z+K.length),Q=y+L.length;p&&Q>p.reach&&(p.reach=Q);var X=$.prev;J&&(X=k(i,X,J),y+=J.length),M(i,X,I);var me=new b(g,D?o.tokenize(K,D):K,l,K);if($=k(i,X,me),ae&&k(i,$,ae),I>1){var Y={cause:g+","+N,reach:Q};P(a,i,s,$.prev,y,Y),p&&Y.reach>p.reach&&(p.reach=Y.reach)}}}}}}function E(){var a={value:null,prev:null,next:null},i={value:null,prev:a,next:null};a.next=i,this.head=a,this.tail=i,this.length=0}function k(a,i,s){var u=i.next,_={value:s,prev:i,next:u};return i.next=_,u.prev=_,a.length++,_}function M(a,i,s){for(var u=i.next,_=0;_<s&&u!==a.tail;_++)u=u.next;i.next=u,u.prev=i,a.length-=_}function w(a){for(var i=[],s=a.head.next;s!==a.tail;)i.push(s.value),s=s.next;return i}if(!c.document)return c.addEventListener&&(o.disableWorkerMessageHandler||c.addEventListener("message",function(a){var i=JSON.parse(a.data),s=i.language,u=i.code,_=i.immediateClose;c.postMessage(o.highlight(u,o.languages[s],s)),_&&c.close()},!1)),o;var A=o.util.currentScript();A&&(o.filename=A.src,A.hasAttribute("data-manual")&&(o.manual=!0));function x(){o.manual||o.highlightAll()}if(!o.manual){var C=document.readyState;C==="loading"||C==="interactive"&&A&&A.defer?document.addEventListener("DOMContentLoaded",x):window.requestAnimationFrame?window.requestAnimationFrame(x):window.setTimeout(x,16)}return o}(n);e.exports&&(e.exports=t),typeof ne!="undefined"&&(ne.Prism=t),t.languages.markup={comment:{pattern:/<!--(?:(?!<!--)[\s\S])*?-->/,greedy:!0},prolog:{pattern:/<\?[\s\S]+?\?>/,greedy:!0},doctype:{pattern:/<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,greedy:!0,inside:{"internal-subset":{pattern:/(^[^\[]*\[)[\s\S]+(?=\]>$)/,lookbehind:!0,greedy:!0,inside:null},string:{pattern:/"[^"]*"|'[^']*'/,greedy:!0},punctuation:/^<!|>$|[[\]]/,"doctype-tag":/^DOCTYPE/i,name:/[^\s<>'"]+/}},cdata:{pattern:/<!\[CDATA\[[\s\S]*?\]\]>/i,greedy:!0},tag:{pattern:/<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,greedy:!0,inside:{tag:{pattern:/^<\/?[^\s>\/]+/,inside:{punctuation:/^<\/?/,namespace:/^[^\s>\/:]+:/}},"special-attr":[],"attr-value":{pattern:/=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,inside:{punctuation:[{pattern:/^=/,alias:"attr-equals"},{pattern:/^(\s*)["']|["']$/,lookbehind:!0}]}},punctuation:/\/?>/,"attr-name":{pattern:/[^\s>\/]+/,inside:{namespace:/^[^\s>\/:]+:/}}}},entity:[{pattern:/&[\da-z]{1,8};/i,alias:"named-entity"},/&#x?[\da-f]{1,8};/i]},t.languages.markup.tag.inside["attr-value"].inside.entity=t.languages.markup.entity,t.languages.markup.doctype.inside["internal-subset"].inside=t.languages.markup,t.hooks.add("wrap",function(c){c.type==="entity"&&(c.attributes.title=c.content.replace(/&amp;/,"&"))}),Object.defineProperty(t.languages.markup.tag,"addInlined",{value:function(f,v){var h={};h["language-"+v]={pattern:/(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,lookbehind:!0,inside:t.languages[v]},h.cdata=/^<!\[CDATA\[|\]\]>$/i;var o={"included-cdata":{pattern:/<!\[CDATA\[[\s\S]*?\]\]>/i,inside:h}};o["language-"+v]={pattern:/[\s\S]+/,inside:t.languages[v]};var b={};b[f]={pattern:RegExp(/(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(/__/g,function(){return f}),"i"),lookbehind:!0,greedy:!0,inside:o},t.languages.insertBefore("markup","cdata",b)}}),Object.defineProperty(t.languages.markup.tag,"addAttribute",{value:function(c,f){t.languages.markup.tag.inside["special-attr"].push({pattern:RegExp(/(^|["'\s])/.source+"(?:"+c+")"+/\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))/.source,"i"),lookbehind:!0,inside:{"attr-name":/^[^\s=]+/,"attr-value":{pattern:/=[\s\S]+/,inside:{value:{pattern:/(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,lookbehind:!0,alias:[f,"language-"+f],inside:t.languages[f]},punctuation:[{pattern:/^=/,alias:"attr-equals"},/"|'/]}}}})}}),t.languages.html=t.languages.markup,t.languages.mathml=t.languages.markup,t.languages.svg=t.languages.markup,t.languages.xml=t.languages.extend("markup",{}),t.languages.ssml=t.languages.xml,t.languages.atom=t.languages.xml,t.languages.rss=t.languages.xml,function(c){var f=/(?:"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n])*')/;c.languages.css={comment:/\/\*[\s\S]*?\*\//,atrule:{pattern:RegExp("@[\\w-](?:"+/[^;{\s"']|\s+(?!\s)/.source+"|"+f.source+")*?"+/(?:;|(?=\s*\{))/.source),inside:{rule:/^@[\w-]+/,"selector-function-argument":{pattern:/(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/,lookbehind:!0,alias:"selector"},keyword:{pattern:/(^|[^\w-])(?:and|not|only|or)(?![\w-])/,lookbehind:!0}}},url:{pattern:RegExp("\\burl\\((?:"+f.source+"|"+/(?:[^\\\r\n()"']|\\[\s\S])*/.source+")\\)","i"),greedy:!0,inside:{function:/^url/i,punctuation:/^\(|\)$/,string:{pattern:RegExp("^"+f.source+"$"),alias:"url"}}},selector:{pattern:RegExp(`(^|[{}\\s])[^{}\\s](?:[^{};"'\\s]|\\s+(?![\\s{])|`+f.source+")*(?=\\s*\\{)"),lookbehind:!0},string:{pattern:f,greedy:!0},property:{pattern:/(^|[^-\w\xA0-\uFFFF])(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i,lookbehind:!0},important:/!important\b/i,function:{pattern:/(^|[^-a-z0-9])[-a-z0-9]+(?=\()/i,lookbehind:!0},punctuation:/[(){};:,]/},c.languages.css.atrule.inside.rest=c.languages.css;var v=c.languages.markup;v&&(v.tag.addInlined("style","css"),v.tag.addAttribute("style","css"))}(t),t.languages.clike={comment:[{pattern:/(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,lookbehind:!0,greedy:!0},{pattern:/(^|[^\\:])\/\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},"class-name":{pattern:/(\b(?:class|extends|implements|instanceof|interface|new|trait)\s+|\bcatch\s+\()[\w.\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\]/}},keyword:/\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\b/,boolean:/\b(?:false|true)\b/,function:/\b\w+(?=\()/,number:/\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,operator:/[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,punctuation:/[{}[\];(),.:]/},t.languages.javascript=t.languages.extend("clike",{"class-name":[t.languages.clike["class-name"],{pattern:/(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:constructor|prototype))/,lookbehind:!0}],keyword:[{pattern:/((?:^|\})\s*)catch\b/,lookbehind:!0},{pattern:/(^|[^.]|\.\.\.\s*)\b(?:as|assert(?=\s*\{)|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[#\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,lookbehind:!0}],function:/#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,number:{pattern:RegExp(/(^|[^\w$])/.source+"(?:"+(/NaN|Infinity/.source+"|"+/0[bB][01]+(?:_[01]+)*n?/.source+"|"+/0[oO][0-7]+(?:_[0-7]+)*n?/.source+"|"+/0[xX][\dA-Fa-f]+(?:_[\dA-Fa-f]+)*n?/.source+"|"+/\d+(?:_\d+)*n/.source+"|"+/(?:\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\.\d+(?:_\d+)*)(?:[Ee][+-]?\d+(?:_\d+)*)?/.source)+")"+/(?![\w$])/.source),lookbehind:!0},operator:/--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/}),t.languages.javascript["class-name"][0].pattern=/(\b(?:class|extends|implements|instanceof|interface|new)\s+)[\w.\\]+/,t.languages.insertBefore("javascript","keyword",{regex:{pattern:RegExp(/((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)/.source+/\//.source+"(?:"+/(?:\[(?:[^\]\\\r\n]|\\.)*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}/.source+"|"+/(?:\[(?:[^[\]\\\r\n]|\\.|\[(?:[^[\]\\\r\n]|\\.|\[(?:[^[\]\\\r\n]|\\.)*\])*\])*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}v[dgimyus]{0,7}/.source+")"+/(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/.source),lookbehind:!0,greedy:!0,inside:{"regex-source":{pattern:/^(\/)[\s\S]+(?=\/[a-z]*$)/,lookbehind:!0,alias:"language-regex",inside:t.languages.regex},"regex-delimiter":/^\/|\/$/,"regex-flags":/^[a-z]+$/}},"function-variable":{pattern:/#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,alias:"function"},parameter:[{pattern:/(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,lookbehind:!0,inside:t.languages.javascript},{pattern:/(^|[^$\w\xA0-\uFFFF])(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i,lookbehind:!0,inside:t.languages.javascript},{pattern:/(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/,lookbehind:!0,inside:t.languages.javascript},{pattern:/((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,lookbehind:!0,inside:t.languages.javascript}],constant:/\b[A-Z](?:[A-Z_]|\dx?)*\b/}),t.languages.insertBefore("javascript","string",{hashbang:{pattern:/^#!.*/,greedy:!0,alias:"comment"},"template-string":{pattern:/`(?:\\[\s\S]|\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}|(?!\$\{)[^\\`])*`/,greedy:!0,inside:{"template-punctuation":{pattern:/^`|`$/,alias:"string"},interpolation:{pattern:/((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,lookbehind:!0,inside:{"interpolation-punctuation":{pattern:/^\$\{|\}$/,alias:"punctuation"},rest:t.languages.javascript}},string:/[\s\S]+/}},"string-property":{pattern:/((?:^|[,{])[ \t]*)(["'])(?:\\(?:\r\n|[\s\S])|(?!\2)[^\\\r\n])*\2(?=\s*:)/m,lookbehind:!0,greedy:!0,alias:"property"}}),t.languages.insertBefore("javascript","operator",{"literal-property":{pattern:/((?:^|[,{])[ \t]*)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*:)/m,lookbehind:!0,alias:"property"}}),t.languages.markup&&(t.languages.markup.tag.addInlined("script","javascript"),t.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,"javascript")),t.languages.js=t.languages.javascript,function(){if(typeof t=="undefined"||typeof document=="undefined")return;Element.prototype.matches||(Element.prototype.matches=Element.prototype.msMatchesSelector||Element.prototype.webkitMatchesSelector);var c="Loading…",f=function(A,x){return"✖ Error "+A+" while fetching file: "+x},v="✖ Error: File does not exist or is empty",h={js:"javascript",py:"python",rb:"ruby",ps1:"powershell",psm1:"powershell",sh:"bash",bat:"batch",h:"c",tex:"latex"},o="data-src-status",b="loading",S="loaded",P="failed",E="pre[data-src]:not(["+o+'="'+S+'"]):not(['+o+'="'+b+'"])';function k(A,x,C){var a=new XMLHttpRequest;a.open("GET",A,!0),a.onreadystatechange=function(){a.readyState==4&&(a.status<400&&a.responseText?x(a.responseText):a.status>=400?C(f(a.status,a.statusText)):C(v))},a.send(null)}function M(A){var x=/^\s*(\d+)\s*(?:(,)\s*(?:(\d+)\s*)?)?$/.exec(A||"");if(x){var C=Number(x[1]),a=x[2],i=x[3];return a?i?[C,Number(i)]:[C,void 0]:[C,C]}}t.hooks.add("before-highlightall",function(A){A.selector+=", "+E}),t.hooks.add("before-sanity-check",function(A){var x=A.element;if(x.matches(E)){A.code="",x.setAttribute(o,b);var C=x.appendChild(document.createElement("CODE"));C.textContent=c;var a=x.getAttribute("data-src"),i=A.language;if(i==="none"){var s=(/\.(\w+)$/.exec(a)||[,"none"])[1];i=h[s]||s}t.util.setLanguage(C,i),t.util.setLanguage(x,i);var u=t.plugins.autoloader;u&&u.loadLanguages(i),k(a,function(_){x.setAttribute(o,S);var p=M(x.getAttribute("data-range"));if(p){var g=_.split(/\r\n?|\n/g),d=p[0],N=p[1]==null?g.length:p[1];d<0&&(d+=g.length),d=Math.max(0,Math.min(d-1,g.length)),N<0&&(N+=g.length),N=Math.max(0,Math.min(N,g.length)),_=g.slice(d,N).join(`
`),x.hasAttribute("data-start")||x.setAttribute("data-start",String(d+1))}C.textContent=_,t.highlightElement(C)},function(_){x.setAttribute(o,P),C.textContent=_})}}),t.plugins.fileHighlight={highlight:function(x){for(var C=(x||document).querySelectorAll(E),a=0,i;i=C[a++];)t.highlightElement(i)}};var w=!1;t.fileHighlight=function(){w||(console.warn("Prism.fileHighlight is deprecated. Use `Prism.plugins.fileHighlight.highlight` instead."),w=!0),t.plugins.fileHighlight.highlight.apply(this,arguments)}}()})(ce);var de=ce.exports;const we=ie(de);function Ae(e){return e&&typeof e=="object"&&"default"in e?e.default:e}var ee=Ae(de);function te(e){for(var n=1;n<arguments.length;n++)for(var t in arguments[n])e[t]=arguments[n][t];return e}var Ne={functional:!0,props:{code:{type:String},inline:{type:Boolean,default:!1},language:{type:String,default:"markup"}},render:function(n,t){var c=t.props.code||(t.children&&t.children.length>0?t.children[0].text:""),f=t.props.inline,v=t.props.language,h=ee.languages[v],o="language-".concat(v);return f?n("code",te({},t.data,{class:[t.data.class,o],domProps:te({},t.data.domProps,{innerHTML:ee.highlight(c,h)})})):n("pre",te({},t.data,{class:[t.data.class,o]}),[n("code",{class:o,domProps:{innerHTML:ee.highlight(c,h)}})])}},Ce=Ne;const Te=ie(Ce);function Ee(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function ue(e){for(var n=1;n<arguments.length;n++){var t=arguments[n]!=null?arguments[n]:{},c=Object.keys(t);typeof Object.getOwnPropertySymbols=="function"&&(c=c.concat(Object.getOwnPropertySymbols(t).filter(function(f){return Object.getOwnPropertyDescriptor(t,f).enumerable}))),c.forEach(function(f){Ee(e,f,t[f])})}return e}var V=function(e,n,t){Object.defineProperty(e,n,{configurable:!0,get:function(){return t},set:function(c){console.warn("tried to set frozen property ".concat(n," with ").concat(c))}})},Re={abstract:!0,name:"Fragment",props:{name:{type:String,default:function(){return Math.floor(Date.now()*Math.random()).toString(16)}},html:{type:String,default:null}},mounted:function(){var e=this.$el,n=e.parentNode;e.__isFragment=!0,e.__isMounted=!1;var t=document.createComment("fragment#".concat(this.name,"#head")),c=document.createComment("fragment#".concat(this.name,"#tail"));e.__head=t,e.__tail=c;var f=document.createDocumentFragment();if(f.appendChild(t),Array.from(e.childNodes).forEach(function(o){var b=!o.hasOwnProperty("__isFragmentChild__");f.appendChild(o),b&&(V(o,"parentNode",e),V(o,"__isFragmentChild__",!0))}),f.appendChild(c),this.html){var v=document.createElement("template");v.innerHTML=this.html,Array.from(v.content.childNodes).forEach(function(o){f.appendChild(o)})}var h=e.nextSibling;n.insertBefore(f,e,!0),n.removeChild(e),V(e,"parentNode",n),V(e,"nextSibling",h),h&&V(h,"previousSibling",e),e.__isMounted=!0},render:function(e){var n=this,t=this.$slots.default;return t&&t.length&&t.forEach(function(c){return c.data=ue({},c.data,{attrs:ue({fragment:n.name},(c.data||{}).attrs)})}),e("div",{attrs:{fragment:this.name}},t)}},Pe=Re,re={exports:{}};(function(e,n){var t=typeof self!="undefined"?self:ne,c=function(){function v(){this.fetch=!1,this.DOMException=t.DOMException}return v.prototype=t,new v}();(function(v){(function(h){var o={searchParams:"URLSearchParams"in v,iterable:"Symbol"in v&&"iterator"in Symbol,blob:"FileReader"in v&&"Blob"in v&&function(){try{return new Blob,!0}catch(r){return!1}}(),formData:"FormData"in v,arrayBuffer:"ArrayBuffer"in v};function b(r){return r&&DataView.prototype.isPrototypeOf(r)}if(o.arrayBuffer)var S=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],P=ArrayBuffer.isView||function(r){return r&&S.indexOf(Object.prototype.toString.call(r))>-1};function E(r){if(typeof r!="string"&&(r=String(r)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(r))throw new TypeError("Invalid character in header field name");return r.toLowerCase()}function k(r){return typeof r!="string"&&(r=String(r)),r}function M(r){var l={next:function(){var m=r.shift();return{done:m===void 0,value:m}}};return o.iterable&&(l[Symbol.iterator]=function(){return l}),l}function w(r){this.map={},r instanceof w?r.forEach(function(l,m){this.append(m,l)},this):Array.isArray(r)?r.forEach(function(l){this.append(l[0],l[1])},this):r&&Object.getOwnPropertyNames(r).forEach(function(l){this.append(l,r[l])},this)}w.prototype.append=function(r,l){r=E(r),l=k(l);var m=this.map[r];this.map[r]=m?m+", "+l:l},w.prototype.delete=function(r){delete this.map[E(r)]},w.prototype.get=function(r){return r=E(r),this.has(r)?this.map[r]:null},w.prototype.has=function(r){return this.map.hasOwnProperty(E(r))},w.prototype.set=function(r,l){this.map[E(r)]=k(l)},w.prototype.forEach=function(r,l){for(var m in this.map)this.map.hasOwnProperty(m)&&r.call(l,this.map[m],m,this)},w.prototype.keys=function(){var r=[];return this.forEach(function(l,m){r.push(m)}),M(r)},w.prototype.values=function(){var r=[];return this.forEach(function(l){r.push(l)}),M(r)},w.prototype.entries=function(){var r=[];return this.forEach(function(l,m){r.push([m,l])}),M(r)},o.iterable&&(w.prototype[Symbol.iterator]=w.prototype.entries);function A(r){if(r.bodyUsed)return Promise.reject(new TypeError("Already read"));r.bodyUsed=!0}function x(r){return new Promise(function(l,m){r.onload=function(){l(r.result)},r.onerror=function(){m(r.error)}})}function C(r){var l=new FileReader,m=x(l);return l.readAsArrayBuffer(r),m}function a(r){var l=new FileReader,m=x(l);return l.readAsText(r),m}function i(r){for(var l=new Uint8Array(r),m=new Array(l.length),R=0;R<l.length;R++)m[R]=String.fromCharCode(l[R]);return m.join("")}function s(r){if(r.slice)return r.slice(0);var l=new Uint8Array(r.byteLength);return l.set(new Uint8Array(r)),l.buffer}function u(){return this.bodyUsed=!1,this._initBody=function(r){this._bodyInit=r,r?typeof r=="string"?this._bodyText=r:o.blob&&Blob.prototype.isPrototypeOf(r)?this._bodyBlob=r:o.formData&&FormData.prototype.isPrototypeOf(r)?this._bodyFormData=r:o.searchParams&&URLSearchParams.prototype.isPrototypeOf(r)?this._bodyText=r.toString():o.arrayBuffer&&o.blob&&b(r)?(this._bodyArrayBuffer=s(r.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):o.arrayBuffer&&(ArrayBuffer.prototype.isPrototypeOf(r)||P(r))?this._bodyArrayBuffer=s(r):this._bodyText=r=Object.prototype.toString.call(r):this._bodyText="",this.headers.get("content-type")||(typeof r=="string"?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):o.searchParams&&URLSearchParams.prototype.isPrototypeOf(r)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},o.blob&&(this.blob=function(){var r=A(this);if(r)return r;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?A(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(C)}),this.text=function(){var r=A(this);if(r)return r;if(this._bodyBlob)return a(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(i(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},o.formData&&(this.formData=function(){return this.text().then(d)}),this.json=function(){return this.text().then(JSON.parse)},this}var _=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function p(r){var l=r.toUpperCase();return _.indexOf(l)>-1?l:r}function g(r,l){l=l||{};var m=l.body;if(r instanceof g){if(r.bodyUsed)throw new TypeError("Already read");this.url=r.url,this.credentials=r.credentials,l.headers||(this.headers=new w(r.headers)),this.method=r.method,this.mode=r.mode,this.signal=r.signal,!m&&r._bodyInit!=null&&(m=r._bodyInit,r.bodyUsed=!0)}else this.url=String(r);if(this.credentials=l.credentials||this.credentials||"same-origin",(l.headers||!this.headers)&&(this.headers=new w(l.headers)),this.method=p(l.method||this.method||"GET"),this.mode=l.mode||this.mode||null,this.signal=l.signal||this.signal,this.referrer=null,(this.method==="GET"||this.method==="HEAD")&&m)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(m)}g.prototype.clone=function(){return new g(this,{body:this._bodyInit})};function d(r){var l=new FormData;return r.trim().split("&").forEach(function(m){if(m){var R=m.split("="),$=R.shift().replace(/\+/g," "),y=R.join("=").replace(/\+/g," ");l.append(decodeURIComponent($),decodeURIComponent(y))}}),l}function N(r){var l=new w,m=r.replace(/\r?\n[\t ]+/g," ");return m.split(/\r?\n/).forEach(function(R){var $=R.split(":"),y=$.shift().trim();if(y){var L=$.join(":").trim();l.append(y,L)}}),l}u.call(g.prototype);function F(r,l){l||(l={}),this.type="default",this.status=l.status===void 0?200:l.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in l?l.statusText:"OK",this.headers=new w(l.headers),this.url=l.url||"",this._initBody(r)}u.call(F.prototype),F.prototype.clone=function(){return new F(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new w(this.headers),url:this.url})},F.error=function(){var r=new F(null,{status:0,statusText:""});return r.type="error",r};var D=[301,302,303,307,308];F.redirect=function(r,l){if(D.indexOf(l)===-1)throw new RangeError("Invalid status code");return new F(null,{status:l,headers:{location:r}})},h.DOMException=v.DOMException;try{new h.DOMException}catch(r){h.DOMException=function(l,m){this.message=l,this.name=m;var R=Error(l);this.stack=R.stack},h.DOMException.prototype=Object.create(Error.prototype),h.DOMException.prototype.constructor=h.DOMException}function G(r,l){return new Promise(function(m,R){var $=new g(r,l);if($.signal&&$.signal.aborted)return R(new h.DOMException("Aborted","AbortError"));var y=new XMLHttpRequest;function L(){y.abort()}y.onload=function(){var I={status:y.status,statusText:y.statusText,headers:N(y.getAllResponseHeaders()||"")};I.url="responseURL"in y?y.responseURL:I.headers.get("X-Request-URL");var j="response"in y?y.response:y.responseText;m(new F(j,I))},y.onerror=function(){R(new TypeError("Network request failed"))},y.ontimeout=function(){R(new TypeError("Network request failed"))},y.onabort=function(){R(new h.DOMException("Aborted","AbortError"))},y.open($.method,$.url,!0),$.credentials==="include"?y.withCredentials=!0:$.credentials==="omit"&&(y.withCredentials=!1),"responseType"in y&&o.blob&&(y.responseType="blob"),$.headers.forEach(function(I,j){y.setRequestHeader(j,I)}),$.signal&&($.signal.addEventListener("abort",L),y.onreadystatechange=function(){y.readyState===4&&$.signal.removeEventListener("abort",L)}),y.send(typeof $._bodyInit=="undefined"?null:$._bodyInit)})}return G.polyfill=!0,v.fetch||(v.fetch=G,v.Headers=w,v.Request=g,v.Response=F),h.Headers=w,h.Request=g,h.Response=F,h.fetch=G,Object.defineProperty(h,"__esModule",{value:!0}),h})({})})(c),c.fetch.ponyfill=!0,delete c.fetch.polyfill;var f=c;n=f.fetch,n.default=f.fetch,n.fetch=f.fetch,n.Headers=f.Headers,n.Request=f.Request,n.Response=f.Response,e.exports=n})(re,re.exports);var Se=re.exports;const Oe=ie(Se),je=e=>e.reduce((n,t)=>n+t[0],""),Le=e=>{const n=[];let t,c=-1;return Object.keys(e).forEach(f=>{var v;(v=e[f].value.content)===null||v===void 0||v.forEach(h=>{var o,b;const S=(o=e[h])===null||o===void 0||(b=o.value)===null||b===void 0?void 0:b.type;S&&S!==t&&(c++,t=S,n[c]=[]),n[c].push(h)}),t=void 0}),n},fe=(e,n)=>{const c=Le(n).find(f=>f.includes(e));if(c)return c.indexOf(e)+1},Be=(e="",n)=>{const t=new URL(`https://www.notion.so${e.startsWith("/image")?e:`/image/${encodeURIComponent(e)}`}`);if(n&&!e.includes("/images/page-cover/")){const c=n.value.parent_table==="space"?"block":n.value.parent_table;t.searchParams.set("table",c),t.searchParams.set("id",n.value.id),t.searchParams.set("cache","v2")}return t.toString()},De=(e="")=>(e=e.replace(/-/g,""),`/${e}`),pe={blockMap:{type:Object,required:!0},contentId:{type:String,required:!1},fullPage:{type:Boolean,default:!1},hideList:{type:Array,default:()=>[]},level:{type:Number,default:0},mapImageUrl:Function,mapPageUrl:Function,pageLinkOptions:Object,prism:{type:Boolean,default:!1},todo:{type:Boolean,default:!1}},z={pass(){return{blockMap:this.blockMap,contentId:this.contentId,fullPage:this.fullPage,hideList:this.hideList,level:this.level,mapImageUrl:this.mapImageUrl,mapPageUrl:this.mapPageUrl,pageLinkOptions:this.pageLinkOptions,prism:this.prism,todo:this.todo}},block(){const e=this.contentId||Object.keys(this.blockMap)[0];return this.blockMap[e]},value(){var e;return(e=this.block)===null||e===void 0?void 0:e.value},format(){var e;return(e=this.value)===null||e===void 0?void 0:e.format},f(){var o,b;var e,n,t,c,f,v,h;return{block_aspect_ratio:(e=this.format)===null||e===void 0?void 0:e.block_aspect_ratio,block_height:(o=(n=this.format)===null||n===void 0?void 0:n.block_height)!=null?o:1,block_width:(b=(t=this.format)===null||t===void 0?void 0:t.block_width)!=null?b:1,block_color:(c=this.format)===null||c===void 0?void 0:c.block_color,bookmark_icon:(f=this.format)===null||f===void 0?void 0:f.bookmark_icon,bookmark_cover:(v=this.format)===null||v===void 0?void 0:v.bookmark_cover,display_source:(h=this.format)===null||h===void 0?void 0:h.display_source}},icon(){var e;return((e=this.format)===null||e===void 0?void 0:e.page_icon)||""},width(){var e;return(e=this.format)===null||e===void 0?void 0:e.block_width},properties(){var e;return(e=this.value)===null||e===void 0?void 0:e.properties},caption(){var e;return(e=this.properties)===null||e===void 0?void 0:e.caption},description(){var e;return(e=this.properties)===null||e===void 0?void 0:e.description},title(){var e;return(e=this.properties)===null||e===void 0?void 0:e.title},type(){var e;return(e=this.value)===null||e===void 0?void 0:e.type},visible(){return!this.hideList.includes(this.type)}};var O={props:pe,computed:z,methods:{getTextContent:je,isType(e){return Array.isArray(e)?e.includes(this.type)&&this.visible:this.type===e&&this.visible},blockColorClass(e=""){var n;const t=(n=this.format)===null||n===void 0?void 0:n.block_color;return t?`notion-${t}${e}`:void 0}}},Ie={name:"NotionDecorator",props:["content"],computed:{text(){var e;return(e=this.content)===null||e===void 0?void 0:e[0]},decorators(){var e;return((e=this.content)===null||e===void 0?void 0:e[1])||[]},decoratorKey(){var e,n;return(e=this.decorators)===null||e===void 0||(n=e[0])===null||n===void 0?void 0:n[0]},decoratorValue(){var e,n;return(e=this.decorators)===null||e===void 0||(n=e[0])===null||n===void 0?void 0:n[1]},unappliedDecorators(){const e=JSON.parse(JSON.stringify(this.decorators||[]));return e.shift(),e},nextContent(){return[this.text,this.unappliedDecorators]}}};function T(e,n,t,c,f,v,h,o,b,S){typeof h!="boolean"&&(b=o,o=h,h=!1);const P=typeof t=="function"?t.options:t;e&&e.render&&(P.render=e.render,P.staticRenderFns=e.staticRenderFns,P._compiled=!0,f&&(P.functional=!0)),c&&(P._scopeId=c);let E;if(v?(E=function(k){k=k||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext,!k&&typeof __VUE_SSR_CONTEXT__!="undefined"&&(k=__VUE_SSR_CONTEXT__),n&&n.call(this,b(k)),k&&k._registeredComponents&&k._registeredComponents.add(v)},P._ssrRegister=E):n&&(E=h?function(k){n.call(this,S(k,this.$root.$options.shadowRoot))}:function(k){n.call(this,o(k))}),E)if(P.functional){const k=P.render;P.render=function(w,A){return E.call(A),k(w,A)}}else{const k=P.beforeCreate;P.beforeCreate=k?[].concat(k,E):[E]}return t}const Me=Ie;var Ue=function(){var e=this,n=e.$createElement,t=e._self._c||n;return e.decorators.length===0?t("span",[e._v(e._s(e.text))]):e.decoratorKey==="h"?t("span",{class:"notion-"+e.decoratorValue},[t("NotionDecorator",{attrs:{content:e.nextContent}})],1):e.decoratorKey==="c"?t("code",{staticClass:"notion-inline-code"},[t("NotionDecorator",{attrs:{content:e.nextContent}})],1):e.decoratorKey==="b"?t("b",[t("NotionDecorator",{attrs:{content:e.nextContent}})],1):e.decoratorKey==="i"?t("em",[t("NotionDecorator",{attrs:{content:e.nextContent}})],1):e.decoratorKey==="s"?t("s",[t("NotionDecorator",{attrs:{content:e.nextContent}})],1):e.decoratorKey==="a"?t("a",{staticClass:"notion-link",attrs:{target:"_blank",href:e.decoratorValue}},[t("NotionDecorator",{attrs:{content:e.nextContent}})],1):t("NotionDecorator",{attrs:{content:e.nextContent}})},He=[];const qe=void 0,ze=void 0,Ge=void 0,We=!1,ve=T({render:Ue,staticRenderFns:He},qe,Me,ze,We,Ge,!1,void 0,void 0,void 0);var Ve={name:"NotionTextRenderer",props:["text"],components:{NotionDecorator:ve}};const Ze=Ve;var Ke=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("span",e._l(e.text,function(c,f){return t("NotionDecorator",{key:f,attrs:{content:c}})}),1)},Xe=[];const Je=void 0,Qe=void 0,Ye=void 0,et=!1,B=T({render:Ke,staticRenderFns:Xe},Je,Ze,Qe,et,Ye,!1,void 0,void 0,void 0);var tt={extends:O,name:"NotionBookmark",components:{NotionTextRenderer:B}};const nt=tt;var rt=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"notion-row"},[t("a",{class:["notion-bookmark",e.f.block_color&&"notion-"+e.f.block_color],attrs:{target:"_blank",rel:"noopener noreferrer",href:e.properties.link}},[t("div",[t("div",{staticClass:"notion-bookmark-title"},[t("NotionTextRenderer",{attrs:{text:e.title||e.properties.link}})],1),e._v(" "),e.description?t("div",{staticClass:"notion-bookmark-description"},[t("NotionTextRenderer",{attrs:{text:e.description}})],1):e._e(),e._v(" "),t("div",{staticClass:"notion-bookmark-link"},[e.f.bookmark_icon?t("img",{attrs:{alt:e.getTextContent(e.title||e.properties.link),src:e.f.bookmark_icon}}):e._e(),e._v(" "),t("div",[t("NotionTextRenderer",{attrs:{text:e.properties.link}})],1)])]),e._v(" "),e.f.bookmark_cover?t("div",{staticClass:"notion-bookmark-image"},[t("img",{attrs:{alt:e.getTextContent(e.title||e.properties.link),src:e.f.bookmark_cover}})]):e._e()])])},it=[];const at=void 0,ot=void 0,st=void 0,lt=!1,ut=T({render:rt,staticRenderFns:it},at,nt,ot,lt,st,!1,void 0,void 0,void 0);var _t={extends:O,name:"NotionPageIcon",props:q(H({},pe),{big:Boolean})};const ct=_t;var dt=function(){var e=this,n=e.$createElement,t=e._self._c||n;return e.icon.includes("http")?t("img",{class:[e.format.page_cover&&"notion-page-icon-offset",e.big?"notion-page-icon-cover":"notion-page-icon"],attrs:{src:e.mapImageUrl(e.icon,e.block),alt:e.title?e.getTextContent(e.title):"Icon"}}):e.icon?t("span",{class:["notion-emoji",e.format.page_cover&&"notion-page-icon-offset",e.big?"notion-page-icon-cover":"notion-page-icon"],attrs:{role:"img","aria-label":e.icon}},[e._v(`
  `+e._s(e.icon)+`
`)]):e._e()},ft=[];const pt=void 0,vt=void 0,ht=void 0,gt=!1,he=T({render:dt,staticRenderFns:ft},pt,ct,vt,gt,ht,!1,void 0,void 0,void 0);var mt={extends:O,name:"NotionCallout",components:{NotionPageIcon:he,NotionTextRenderer:B}};const yt=mt;var bt=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{class:["notion-callout",e.blockColorClass(),e.blockColorClass("_co")]},[t("div",[t("NotionPageIcon",e._b({},"NotionPageIcon",e.pass,!1))],1),e._v(" "),t("div",{staticClass:"notion-callout-text"},[t("NotionTextRenderer",{attrs:{text:e.title}})],1)])},$t=[];const xt=void 0,kt=void 0,Ft=void 0,wt=!1,At=T({render:bt,staticRenderFns:$t},xt,yt,kt,wt,Ft,!1,void 0,void 0,void 0);var Nt={extends:O,name:"NotionCode",components:{PrismComponent:Te},data(){return{Prism:we}},computed:q(H({},z),{lang(){var e,n,t,c;return(e=this.properties)===null||e===void 0||(n=e.language)===null||n===void 0||(t=n[0])===null||t===void 0||(c=t[0])===null||c===void 0?void 0:c.toLowerCase()},langClass(){return`language-${this.lang}`},supported(){return this.Prism.languages[this.lang]}})};const Ct=Nt;var Tt=function(){var e=this,n=e.$createElement,t=e._self._c||n;return e.prism&&e.supported?t("pre",{class:["notion-code",e.langClass]},[t("PrismComponent",{attrs:{language:e.lang}},[e._v(e._s(e.properties.title[0][0]))])],1):t("pre",{class:["notion-code",e.langClass]},[t("code",{class:e.langClass},[e._v(e._s(e.properties.title[0][0]))])])},Et=[];const Rt=void 0,Pt=void 0,St=void 0,Ot=!1,jt=T({render:Tt,staticRenderFns:Et},Rt,Ct,Pt,Ot,St,!1,void 0,void 0,void 0),_e=46;var Lt={name:"NotionColumn",props:["format"],components:{Fragment:Pe},computed:{columnStyle(){return{width:`calc((100% - ${(Number((1/this.format.column_ratio).toFixed(0))-1)*_e}px) * ${this.format.column_ratio})`}},spacerStyle(){return{width:`${_e}px`}}}};const Bt=Lt;var Dt=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("Fragment",[t("div",{staticClass:"notion-column",style:e.columnStyle},[e._t("default")],2),e._v(" "),t("div",{staticClass:"notion-spacer",style:e.spacerStyle})])},It=[];const Mt=void 0,Ut=void 0,Ht=void 0,qt=!1,zt=T({render:Dt,staticRenderFns:It},Mt,Bt,Ut,qt,Ht,!1,void 0,void 0,void 0);var Gt={extends:O,name:"NotionAsset",components:{NotionTextRenderer:B},computed:q(H({},z),{src(){return this.type==="figma"?this.properties.source[0][0]:this.f.display_source},style(){return{paddingBottom:`${(this.f.block_aspect_ratio||this.f.block_height/this.f.block_width)*100}%`,position:"relative"}}})};const Wt=Gt;var Vt=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{style:e.style},[t("iframe",{staticClass:"notion-image-inset",attrs:{src:e.src}})])},Zt=[];const Kt=void 0,Xt=void 0,Jt=void 0,Qt=!1,Yt=T({render:Vt,staticRenderFns:Zt},Kt,Wt,Xt,Qt,Jt,!1,void 0,void 0,void 0);var en={extends:O,name:"NotionImage",components:{NotionTextRenderer:B},computed:q(H({},z),{alt(){var e;return(e=this.caption)===null||e===void 0?void 0:e[0][0]},src(){var e;return this.mapImageUrl((e=this.properties)===null||e===void 0?void 0:e.source[0][0],this.block)},style(){return{paddingBottom:`${(this.f.block_aspect_ratio||this.f.block_height/this.f.block_width)*100}%`,position:"relative"}}})};const tn=en;var nn=function(){var e=this,n=e.$createElement,t=e._self._c||n;return e.f.block_aspect_ratio?t("div",{style:e.style},[t("img",{staticClass:"notion-image-inset",attrs:{alt:e.alt||"Notion image",src:e.src}})]):t("img",{attrs:{alt:e.caption,src:e.src}})},rn=[];const an=void 0,on=void 0,sn=void 0,ln=!1,un=T({render:nn,staticRenderFns:rn},an,tn,on,ln,sn,!1,void 0,void 0,void 0);var _n={extends:O,name:"NotionFigure",components:{NotionAsset:Yt,NotionImage:un,NotionTextRenderer:B}};const cn=_n;var dn=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("figure",{staticClass:"notion-asset-wrapper",style:e.width},[e.isType("image")?t("NotionImage",e._b({},"NotionImage",e.pass,!1)):e.isType(["embed","video","figma"])?t("NotionAsset",e._b({},"NotionAsset",e.pass,!1)):e._e(),e._v(" "),e.caption?t("figcaption",{staticClass:"notion-image-caption"},[t("NotionTextRenderer",{attrs:{text:e.caption}})],1):e._e()],1)},fn=[];const pn=void 0,vn=void 0,hn=void 0,gn=!1,mn=T({render:dn,staticRenderFns:fn},pn,cn,vn,gn,hn,!1,void 0,void 0,void 0);var yn={extends:O,name:"NotionNestedList",computed:q(H({},z),{start(){var e;return fe((e=this.value)===null||e===void 0?void 0:e.id,this.blockMap)}})};const bn=yn;var $n=function(){var e=this,n=e.$createElement,t=e._self._c||n;return e.type==="bulleted_list"?t("ul",{staticClass:"notion-list notion-list-disc"},[e._t("default")],2):t("ol",{staticClass:"notion-list notion-list-numbered",attrs:{start:e.start}},[e._t("default")],2)},xn=[];const kn=void 0,Fn=void 0,wn=void 0,An=!1,Nn=T({render:$n,staticRenderFns:xn},kn,bn,Fn,An,wn,!1,void 0,void 0,void 0);var Cn={extends:O,name:"NotionList",components:{NotionNestedList:Nn,NotionTextRenderer:B},computed:q(H({},z),{start(){var e;return fe((e=this.value)===null||e===void 0?void 0:e.id,this.blockMap)},isTopLevel(){var e,n,t;return this.type!==((e=this.blockMap[(t=this.value)===null||t===void 0?void 0:t.parent_id])===null||e===void 0||(n=e.value)===null||n===void 0?void 0:n.type)}})};const Tn=Cn;var En=function(){var e=this,n=e.$createElement,t=e._self._c||n;return e.isTopLevel&&e.type==="bulleted_list"?t("ul",{staticClass:"notion-list notion-list-disc"},[t("li",[t("NotionTextRenderer",{attrs:{text:e.title}})],1),e._v(" "),e.value.content?t("NotionNestedList",e._b({},"NotionNestedList",e.pass,!1),[e._t("default")],2):e._e()],1):e.isTopLevel&&e.type==="numbered_list"?t("ol",{staticClass:"notion-list notion-list-numbered",attrs:{start:e.start}},[t("li",[t("NotionTextRenderer",{attrs:{text:e.title}})],1),e._v(" "),e.value.content?t("NotionNestedList",e._b({},"NotionNestedList",e.pass,!1),[e._t("default")],2):e._e()],1):t("span",[t("li",[t("NotionTextRenderer",{attrs:{text:e.title}})],1),e._v(" "),e.value.content?t("NotionNestedList",e._b({},"NotionNestedList",e.pass,!1),[e._t("default")],2):e._e()],1)},Rn=[];const Pn=void 0,Sn=void 0,On=void 0,jn=!1,Ln=T({render:En,staticRenderFns:Rn},Pn,Tn,Sn,jn,On,!1,void 0,void 0,void 0);var Bn={extends:O,name:"NotionPageHeader",components:{Decorator:ve}};const Dn=Bn;var In=function(){var e=this,n=e.$createElement;return e._self._c,e._m(0)},Mn=[function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("header",{staticClass:"notion-page-header"},[t("div",{staticClass:"notion-nav-breadcrumbs"})])}];const Un=void 0,Hn=void 0,qn=void 0,zn=!1,Gn=T({render:In,staticRenderFns:Mn},Un,Dn,Hn,zn,qn,!1,void 0,void 0,void 0);var Wn={extends:O,name:"NotionPage",components:{NotionPageHeader:Gn,NotionPageIcon:he,NotionTextRenderer:B},computed:q(H({},z),{coverStyle(){return{objectPosition:`center ${(1-(this.format.page_cover_position||.5))*100}%`}},hasPageLinkOptions(){var e,n;return((e=this.pageLinkOptions)===null||e===void 0?void 0:e.component)&&((n=this.pageLinkOptions)===null||n===void 0?void 0:n.href)},pageLinkProps(){return{[this.pageLinkOptions.href]:this.mapPageUrl(this.value.id)}}})};const Vn=Wn;var Zn=function(){var e=this,n=e.$createElement,t=e._self._c||n;return e.level===0&&e.fullPage?t("div",{staticClass:"notion"},[e.format&&e.format.page_cover?t("img",{staticClass:"notion-page-cover",style:e.coverStyle,attrs:{alt:e.getTextContent(e.title),src:e.mapImageUrl(e.format.page_cover,e.block)}}):e._e(),e._v(" "),t("main",{class:["notion-page",e.format&&!e.format.page_cover&&"notion-page-offset",e.format&&e.format.page_full_width&&"notion-full-width",e.format&&e.format.page_small_text&&"notion-small-text"]},[t("NotionPageIcon",e._b({attrs:{big:""}},"NotionPageIcon",e.pass,!1)),e._v(" "),t("div",{staticClass:"notion-title"},[t("NotionTextRenderer",{attrs:{text:e.title}})],1),e._v(" "),e._t("default")],2)]):e.level===0?t("main",{staticClass:"notion"},[e._t("default")],2):e.hasPageLinkOptions?t(e.pageLinkOptions.component,e._b({tag:"component",staticClass:"notion-page-link"},"component",e.pageLinkProps,!1),[t("div",{staticClass:"notion-page-icon"},[t("NotionPageIcon",e._b({},"NotionPageIcon",e.pass,!1))],1),e._v(" "),t("div",{staticClass:"notion-page-text"},[t("NotionTextRenderer",{attrs:{text:e.title}})],1)]):t("a",{staticClass:"notion-page-link",attrs:{href:e.mapPageUrl(e.value.id)}},[t("div",{staticClass:"notion-page-icon"},[t("NotionPageIcon",e._b({},"NotionPageIcon",e.pass,!1))],1),e._v(" "),t("div",{staticClass:"notion-page-text"},[t("NotionTextRenderer",{attrs:{text:e.title}})],1)])},Kn=[];const Xn=void 0,Jn=void 0,Qn=void 0,Yn=!1,er=T({render:Zn,staticRenderFns:Kn},Xn,Vn,Jn,Yn,Qn,!1,void 0,void 0,void 0);var tr={extends:O,name:"NotionHeader",components:{NotionTextRenderer:B}};const nr=tr;var rr=function(){var e=this,n=e.$createElement,t=e._self._c||n;return e.type==="header"?t("h1",{staticClass:"notion-h1"},[t("NotionTextRenderer",{attrs:{text:e.title}})],1):e.type==="sub_header"?t("h2",{staticClass:"notion-h2"},[t("NotionTextRenderer",{attrs:{text:e.title}})],1):e.type==="sub_sub_header"?t("h3",{staticClass:"notion-h3"},[t("NotionTextRenderer",{attrs:{text:e.title}})],1):e._e()},ir=[];const ar=void 0,or=void 0,sr=void 0,lr=!1,ur=T({render:rr,staticRenderFns:ir},ar,nr,or,lr,sr,!1,void 0,void 0,void 0);var _r={extends:O,name:"NotionText",components:{NotionTextRenderer:B}};const cr=_r;var dr=function(){var e=this,n=e.$createElement,t=e._self._c||n;return e.properties?t("p",{class:["notion-text",e.blockColorClass]},[t("NotionTextRenderer",{attrs:{text:e.title}})],1):t("div",{staticClass:"notion-blank"},[e._v(" ")])},fr=[];const pr=void 0,vr=void 0,hr=void 0,gr=!1,mr=T({render:dr,staticRenderFns:fr},pr,cr,vr,gr,hr,!1,void 0,void 0,void 0);var yr={extends:O,name:"NotionToggle",components:{NotionTextRenderer:B}};const br=yr;var $r=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("details",{staticClass:"notion-toggle"},[t("summary",[t("NotionTextRenderer",{attrs:{text:e.title}})],1),e._v(" "),t("div",[e._t("default")],2)])},xr=[];const kr=void 0,Fr=void 0,wr=void 0,Ar=!1,Nr=T({render:$r,staticRenderFns:xr},kr,br,Fr,Ar,wr,!1,void 0,void 0,void 0);var Cr={extends:O,name:"NotionQuote",components:{NotionTextRenderer:B}};const Tr=Cr;var Er=function(){var e=this,n=e.$createElement,t=e._self._c||n;return e.properties?t("blockquote",{staticClass:"notion-quote"},[t("NotionTextRenderer",{attrs:{text:e.title}})],1):e._e()},Rr=[];const Pr=void 0,Sr=void 0,Or=void 0,jr=!1,Lr=T({render:Er,staticRenderFns:Rr},Pr,Tr,Sr,jr,Or,!1,void 0,void 0,void 0);var Br={extends:O,name:"NotionBlock",components:{NotionBookmark:ut,NotionCallout:At,NotionCode:jt,NotionColumn:zt,NotionFigure:mn,NotionList:Ln,NotionPage:er,NotionHeader:ur,NotionText:mr,NotionToggle:Nr,NotionQuote:Lr}};const Dr=Br;var Ir=function(){var e=this,n=e.$createElement,t=e._self._c||n;return e.isType("page")?t("div",[t("NotionPage",e._b({},"NotionPage",e.pass,!1),[e._t("default")],2)],1):e.isType(["header","sub_header","sub_sub_header"])?t("NotionHeader",e._b({},"NotionHeader",e.pass,!1)):e.isType("bookmark")?t("NotionBookmark",e._b({},"NotionBookmark",e.pass,!1)):e.isType("callout")?t("NotionCallout",e._b({},"NotionCallout",e.pass,!1)):e.isType("code")?t("NotionCode",e._b({},"NotionCode",e.pass,!1)):e.isType("text")?t("NotionText",e._b({},"NotionText",e.pass,!1)):e.isType("quote")?t("NotionQuote",e._b({},"NotionQuote",e.pass,!1)):e.isType("toggle")?t("NotionToggle",e._b({},"NotionToggle",e.pass,!1),[e._t("default")],2):e.isType("column_list")?t("div",{staticClass:"notion-row"},[e._t("default")],2):e.isType("column")?t("NotionColumn",{attrs:{format:e.format}},[e._t("default")],2):e.isType(["bulleted_list","numbered_list"])?t("NotionList",e._b({},"NotionList",e.pass,!1),[e._t("default")],2):e.isType(["image","embed","figma","video"])?t("NotionFigure",e._b({},"NotionFigure",e.pass,!1)):e.isType("divider")?t("hr",{staticClass:"notion-hr"}):e.todo&&e.visible?t("div",[e._v("todo: "+e._s(e.type)),e._t("default")],2):e._e()},Mr=[];const Ur=void 0,Hr=void 0,qr=void 0,zr=!1,Gr=T({render:Ir,staticRenderFns:Mr},Ur,Dr,Hr,zr,qr,!1,void 0,void 0,void 0);var Wr={extends:O,name:"NotionRenderer",components:{NotionBlock:Gr},props:{blockMap:[Object],contentId:String,fullPage:{type:Boolean,default:!1},hideList:{type:Array,default:()=>[]},level:{type:Number,default:0},mapImageUrl:{type:Function,default:Be},mapPageUrl:{type:Function,default:De},pageLinkOptions:Object,prism:{type:Boolean,default:!1},todo:{type:Boolean,default:!1}}};const Vr=Wr;var Zr=function(){var e=this,n=e.$createElement,t=e._self._c||n;return e.blockMap&&e.value?t("NotionBlock",e._b({},"NotionBlock",e.pass,!1),e._l(e.value.content,function(c){return t("NotionRenderer",e._b({key:c,attrs:{level:e.level+1,"content-id":c}},"NotionRenderer",e.pass,!1))}),1):e._e()},Kr=[];const Xr=void 0,Jr=void 0,Qr=void 0,Yr=!1,ei=T({render:Zr,staticRenderFns:Kr},Xr,Vr,Jr,Yr,Qr,!1,void 0,void 0,void 0),ti=(e,n="https://api.vue-notion.workers.dev/v1")=>le(void 0,null,function*(){return yield Oe(`${n}/page/${e}`).then(t=>t.json())});const ni={name:"NotionPage",components:{NotionRenderer:ei},props:{pageId:{type:String,required:!0}},data(){return{loading:!1,blockMap:null}},computed:{apiUrl:()=>window.config.notion.worker},watch:{},mounted(){this.loading=!0,ti(this.pageId,this.apiUrl).then(e=>{this.blockMap=e,this.loading=!1})},methods:{}};var ri=function(){var n=this,t=n._self._c;return n.loading?t("div",{staticClass:"my-10 py-20 flex items-center justify-center"},[t("loader",{staticClass:"h-6 w-6 text-nt-blue mx-auto"})],1):t("notion-renderer",{attrs:{"block-map":n.blockMap}})},ii=[],ai=Fe(ni,ri,ii,!1,null,null,null,null);const li=ai.exports;export{li as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
