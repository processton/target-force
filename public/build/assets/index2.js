import{g as f}from"./app.js";var s=Object.prototype.toString,y=function(e){if(e===void 0)return"undefined";if(e===null)return"null";var t=typeof e;if(t==="boolean")return"boolean";if(t==="string")return"string";if(t==="number")return"number";if(t==="symbol")return"symbol";if(t==="function")return A(e)?"generatorfunction":"function";if(p(e))return"array";if(O(e))return"buffer";if(l(e))return"arguments";if(g(e))return"date";if(b(e))return"error";if(m(e))return"regexp";switch(a(e)){case"Symbol":return"symbol";case"Promise":return"promise";case"WeakMap":return"weakmap";case"WeakSet":return"weakset";case"Map":return"map";case"Set":return"set";case"Int8Array":return"int8array";case"Uint8Array":return"uint8array";case"Uint8ClampedArray":return"uint8clampedarray";case"Int16Array":return"int16array";case"Uint16Array":return"uint16array";case"Int32Array":return"int32array";case"Uint32Array":return"uint32array";case"Float32Array":return"float32array";case"Float64Array":return"float64array"}if(j(e))return"generator";switch(t=s.call(e),t){case"[object Object]":return"object";case"[object Map Iterator]":return"mapiterator";case"[object Set Iterator]":return"setiterator";case"[object String Iterator]":return"stringiterator";case"[object Array Iterator]":return"arrayiterator"}return t.slice(8,-1).toLowerCase().replace(/\s/g,"")};function a(r){return typeof r.constructor=="function"?r.constructor.name:null}function p(r){return Array.isArray?Array.isArray(r):r instanceof Array}function b(r){return r instanceof Error||typeof r.message=="string"&&r.constructor&&typeof r.constructor.stackTraceLimit=="number"}function g(r){return r instanceof Date?!0:typeof r.toDateString=="function"&&typeof r.getDate=="function"&&typeof r.setDate=="function"}function m(r){return r instanceof RegExp?!0:typeof r.flags=="string"&&typeof r.ignoreCase=="boolean"&&typeof r.multiline=="boolean"&&typeof r.global=="boolean"}function A(r,e){return a(r)==="GeneratorFunction"}function j(r){return typeof r.throw=="function"&&typeof r.return=="function"&&typeof r.next=="function"}function l(r){try{if(typeof r.length=="number"&&typeof r.callee=="function")return!0}catch(e){if(e.message.indexOf("callee")!==-1)return!0}return!1}function O(r){return r.constructor&&typeof r.constructor.isBuffer=="function"?r.constructor.isBuffer(r):!1}/*!
 * shallow-clone <https://github.com/jonschlinkert/shallow-clone>
 *
 * Copyright (c) 2015-present, Jon Schlinkert.
 * Released under the MIT License.
 */const u=Symbol.prototype.valueOf,d=y;function w(r,e){switch(d(r)){case"array":return r.slice();case"object":return Object.assign({},r);case"date":return new r.constructor(Number(r));case"map":return new Map(r);case"set":return new Set(r);case"buffer":return I(r);case"symbol":return k(r);case"arraybuffer":return h(r);case"float32array":case"float64array":case"int16array":case"int32array":case"int8array":case"uint16array":case"uint32array":case"uint8clampedarray":case"uint8array":return x(r);case"regexp":return S(r);case"error":return Object.create(r);default:return r}}function S(r){const e=r.flags!==void 0?r.flags:/\w+$/.exec(r)||void 0,t=new r.constructor(r.source,e);return t.lastIndex=r.lastIndex,t}function h(r){const e=new r.constructor(r.byteLength);return new Uint8Array(e).set(new Uint8Array(r)),e}function x(r,e){return new r.constructor(r.buffer,r.byteOffset,r.length)}function I(r){const e=r.length,t=Buffer.allocUnsafe?Buffer.allocUnsafe(e):Buffer.from(e);return r.copy(t),t}function k(r){return u?Object(u.call(r)):{}}var D=w,$=Object.prototype.toString,U=function(e){if(e===void 0)return"undefined";if(e===null)return"null";var t=typeof e;if(t==="boolean")return"boolean";if(t==="string")return"string";if(t==="number")return"number";if(t==="symbol")return"symbol";if(t==="function")return P(e)?"generatorfunction":"function";if(B(e))return"array";if(R(e))return"buffer";if(L(e))return"arguments";if(E(e))return"date";if(F(e))return"error";if(M(e))return"regexp";switch(i(e)){case"Symbol":return"symbol";case"Promise":return"promise";case"WeakMap":return"weakmap";case"WeakSet":return"weakset";case"Map":return"map";case"Set":return"set";case"Int8Array":return"int8array";case"Uint8Array":return"uint8array";case"Uint8ClampedArray":return"uint8clampedarray";case"Int16Array":return"int16array";case"Uint16Array":return"uint16array";case"Int32Array":return"int32array";case"Uint32Array":return"uint32array";case"Float32Array":return"float32array";case"Float64Array":return"float64array"}if(G(e))return"generator";switch(t=$.call(e),t){case"[object Object]":return"object";case"[object Map Iterator]":return"mapiterator";case"[object Set Iterator]":return"setiterator";case"[object String Iterator]":return"stringiterator";case"[object Array Iterator]":return"arrayiterator"}return t.slice(8,-1).toLowerCase().replace(/\s/g,"")};function i(r){return typeof r.constructor=="function"?r.constructor.name:null}function B(r){return Array.isArray?Array.isArray(r):r instanceof Array}function F(r){return r instanceof Error||typeof r.message=="string"&&r.constructor&&typeof r.constructor.stackTraceLimit=="number"}function E(r){return r instanceof Date?!0:typeof r.toDateString=="function"&&typeof r.getDate=="function"&&typeof r.setDate=="function"}function M(r){return r instanceof RegExp?!0:typeof r.flags=="string"&&typeof r.ignoreCase=="boolean"&&typeof r.multiline=="boolean"&&typeof r.global=="boolean"}function P(r,e){return i(r)==="GeneratorFunction"}function G(r){return typeof r.throw=="function"&&typeof r.return=="function"&&typeof r.next=="function"}function L(r){try{if(typeof r.length=="number"&&typeof r.callee=="function")return!0}catch(e){if(e.message.indexOf("callee")!==-1)return!0}return!1}function R(r){return r.constructor&&typeof r.constructor.isBuffer=="function"?r.constructor.isBuffer(r):!1}/*!
 * isobject <https://github.com/jonschlinkert/isobject>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */var C=function(e){return e!=null&&typeof e=="object"&&Array.isArray(e)===!1};/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */var W=C;function c(r){return W(r)===!0&&Object.prototype.toString.call(r)==="[object Object]"}var N=function(e){var t,n;return!(c(e)===!1||(t=e.constructor,typeof t!="function")||(n=t.prototype,c(n)===!1)||n.hasOwnProperty("isPrototypeOf")===!1)};const T=D,_=U,q=N;function o(r,e){switch(_(r)){case"object":return z(r,e);case"array":return H(r,e);default:return T(r)}}function z(r,e){if(typeof e=="function")return e(r);if(e||q(r)){const t=new r.constructor;for(let n in r)t[n]=o(r[n],e);return t}return r}function H(r,e){const t=new r.constructor(r.length);for(let n=0;n<r.length;n++)t[n]=o(r[n],e);return t}var J=o;const Q=f(J);export{Q as c};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
