import{n as B,t as Rt,e as Ft,d as Lt}from"./app.js";import{P as Nt}from"./ProTag.js";import{O as It}from"./OpenForm.js";import{C as mt}from"./Collapse.js";import"./PricingTable.js";import"./vform.es.js";import"./index2.js";const Ut={name:"CopyContent",props:{content:{type:String,required:!0},isDraft:{type:Boolean,default:!1}},data(){return{}},computed:{},watch:{},mounted(){},methods:{copyToClipboard(r){const t=document.createElement("textarea");t.value=r,document.body.appendChild(t),t.select(),document.execCommand("copy"),document.body.removeChild(t),this.isDraft?this.alertWarning("Copied! But other people won't be able to see the form since it's currently in draft mode"):this.alertSuccess("Copied!")}}};var Dt=function(){var t=this,e=t._self._c;return e("div",{staticClass:"flex flex-wrap sm:flex-nowrap my-4 w-full"},[e("div",{staticClass:"w-full sm:w-auto border border-gray-300 rounded-md p-2 flex-grow select-all bg-gray-100"},[e("p",{staticClass:"select-all text-gray-900"},[t._v(" "+t._s(t.content)+" ")])]),e("div",{staticClass:"w-full sm:w-40 sm:ml-2 mt-2 sm:mt-0 shrink-0"},[e("v-button",{staticClass:"w-full",attrs:{color:"light-gray"},on:{click:function(n){return t.copyToClipboard(t.content)}}},[t._t("icon",function(){return[e("svg",{staticClass:"h-4 w-4 -mt-1 text-blue-600 inline mr-1",attrs:{viewBox:"0 0 20 20",fill:"none",xmlns:"http://www.w3.org/2000/svg"}},[e("path",{attrs:{d:"M4.16667 12.4998C3.3901 12.4998 3.00182 12.4998 2.69553 12.373C2.28715 12.2038 1.9627 11.8794 1.79354 11.471C1.66667 11.1647 1.66667 10.7764 1.66667 9.99984V4.33317C1.66667 3.39975 1.66667 2.93304 1.84833 2.57652C2.00812 2.26292 2.26308 2.00795 2.57669 1.84816C2.93321 1.6665 3.39992 1.6665 4.33334 1.6665H10C10.7766 1.6665 11.1649 1.6665 11.4711 1.79337C11.8795 1.96253 12.204 2.28698 12.3731 2.69536C12.5 3.00165 12.5 3.38993 12.5 4.1665M10.1667 18.3332H15.6667C16.6001 18.3332 17.0668 18.3332 17.4233 18.1515C17.7369 17.9917 17.9919 17.7368 18.1517 17.4232C18.3333 17.0666 18.3333 16.5999 18.3333 15.6665V10.1665C18.3333 9.23308 18.3333 8.76637 18.1517 8.40985C17.9919 8.09625 17.7369 7.84128 17.4233 7.68149C17.0668 7.49984 16.6001 7.49984 15.6667 7.49984H10.1667C9.23325 7.49984 8.76654 7.49984 8.41002 7.68149C8.09642 7.84128 7.84145 8.09625 7.68166 8.40985C7.50001 8.76637 7.50001 9.23308 7.50001 10.1665V15.6665C7.50001 16.5999 7.50001 17.0666 7.68166 17.4232C7.84145 17.7368 8.09642 17.9917 8.41002 18.1515C8.76654 18.3332 9.23325 18.3332 10.1667 18.3332Z",stroke:"currentColor","stroke-width":"1.66667","stroke-linecap":"round","stroke-linejoin":"round"}})])]}),t._t("default")],2)],1)])},$t=[],Ht=B(Ut,Dt,$t,!1,null,null,null,null);const gt=Ht.exports,Ot={name:"ShareLink",components:{CopyContent:gt},props:{form:{type:Object,required:!0},extraQueryParam:{type:String,default:""}},data:()=>({}),computed:{share_url(){return this.extraQueryParam?this.form.share_url+"?"+this.extraQueryParam:this.form.share_url+this.extraQueryParam}},methods:{}};var jt=function(){var t=this,e=t._self._c;return e("div",[e("h3",{staticClass:"font-semibold text-xl"},[t._v("Share Link")]),e("p",[t._v("Your form is now published and ready to be shared with the world! Copy this link to share your form on social media, messaging apps or via email.")]),e("copy-content",{attrs:{content:t.share_url,"is-draft":t.form.visibility=="draft"},scopedSlots:t._u([{key:"icon",fn:function(){return[e("svg",{staticClass:"h-4 w-4 -mt-1 text-blue-600 inline mr-1",attrs:{viewBox:"0 0 20 10",fill:"none",xmlns:"http://www.w3.org/2000/svg"}},[e("path",{attrs:{d:"M7.49984 9.16634H5.83317C3.53198 9.16634 1.6665 7.30086 1.6665 4.99967C1.6665 2.69849 3.53198 0.833008 5.83317 0.833008H7.49984M12.4998 9.16634H14.1665C16.4677 9.16634 18.3332 7.30086 18.3332 4.99967C18.3332 2.69849 16.4677 0.833008 14.1665 0.833008H12.4998M5.83317 4.99967L14.1665 4.99968",stroke:"currentColor","stroke-width":"1.66667","stroke-linecap":"round","stroke-linejoin":"round"}})])]},proxy:!0}])},[t._v(" Copy Link ")])],1)},Qt=[],Vt=B(Ot,jt,Qt,!1,null,null,null,null);const zt=Vt.exports,qt={name:"EmbedCode",components:{CopyContent:gt},props:{form:{type:Object,required:!0},extraQueryParam:{type:String,default:""}},data:()=>({}),computed:{embedCode(){const r=this.extraQueryParam?this.form.share_url+"?"+this.extraQueryParam:this.form.share_url+this.extraQueryParam;return'<iframe style="border:none;width:100%;" height="'+this.formHeight+'px" src="'+r+'"></iframe>'},formHeight(){let r=200;return!this.form.hide_title&&!this.extraQueryParam&&(r+=60),r+=this.form.properties.filter(t=>!t.hidden).length*70,r}},methods:{}};var Jt=function(){var t=this,e=t._self._c;return e("div",[e("h3",{staticClass:"font-semibold text-xl"},[t._v("Embed")]),e("p",[t._v("Embed your form on your website by copying the HTML code below.")]),e("copy-content",{attrs:{content:t.embedCode,buttonText:"Copy Code"},scopedSlots:t._u([{key:"icon",fn:function(){return[e("svg",{staticClass:"h-4 w-4 -mt-1 text-blue-600 inline mr-1",attrs:{viewBox:"0 0 18 18",fill:"none",xmlns:"http://www.w3.org/2000/svg"}},[e("path",{attrs:{d:"M11.0833 11.5L13.5833 9L11.0833 6.5M6.91667 6.5L4.41667 9L6.91667 11.5M5.5 16.5H12.5C13.9001 16.5 14.6002 16.5 15.135 16.2275C15.6054 15.9878 15.9878 15.6054 16.2275 15.135C16.5 14.6002 16.5 13.9001 16.5 12.5V5.5C16.5 4.09987 16.5 3.3998 16.2275 2.86502C15.9878 2.39462 15.6054 2.01217 15.135 1.77248C14.6002 1.5 13.9001 1.5 12.5 1.5H5.5C4.09987 1.5 3.3998 1.5 2.86502 1.77248C2.39462 2.01217 2.01217 2.39462 1.77248 2.86502C1.5 3.3998 1.5 4.09987 1.5 5.5V12.5C1.5 13.9001 1.5 14.6002 1.77248 15.135C2.01217 15.6054 2.39462 15.9878 2.86502 16.2275C3.3998 16.5 4.09987 16.5 5.5 16.5Z",stroke:"currentColor","stroke-width":"1.66667","stroke-linecap":"round","stroke-linejoin":"round"}})])]},proxy:!0}])},[t._v(" Copy Code ")])],1)},Kt=[],Yt=B(qt,Jt,Kt,!1,null,null,null,null);const Gt=Yt.exports;var H={},Zt=function(){return typeof Promise=="function"&&Promise.prototype&&Promise.prototype.then},pt={},k={};let it;const Wt=[0,26,44,70,100,134,172,196,242,292,346,404,466,532,581,655,733,815,901,991,1085,1156,1258,1364,1474,1588,1706,1828,1921,2051,2185,2323,2465,2611,2761,2876,3034,3196,3362,3532,3706];k.getSymbolSize=function(t){if(!t)throw new Error('"version" cannot be null or undefined');if(t<1||t>40)throw new Error('"version" should be in range from 1 to 40');return t*4+17};k.getSymbolTotalCodewords=function(t){return Wt[t]};k.getBCHDigit=function(r){let t=0;for(;r!==0;)t++,r>>>=1;return t};k.setToSJISFunction=function(t){if(typeof t!="function")throw new Error('"toSJISFunc" is not a valid function.');it=t};k.isKanjiModeEnabled=function(){return typeof it!="undefined"};k.toSJIS=function(t){return it(t)};var q={};(function(r){r.L={bit:1},r.M={bit:0},r.Q={bit:3},r.H={bit:2};function t(e){if(typeof e!="string")throw new Error("Param is not a string");switch(e.toLowerCase()){case"l":case"low":return r.L;case"m":case"medium":return r.M;case"q":case"quartile":return r.Q;case"h":case"high":return r.H;default:throw new Error("Unknown EC Level: "+e)}}r.isValid=function(n){return n&&typeof n.bit!="undefined"&&n.bit>=0&&n.bit<4},r.from=function(n,s){if(r.isValid(n))return n;try{return t(n)}catch(o){return s}}})(q);function wt(){this.buffer=[],this.length=0}wt.prototype={get:function(r){const t=Math.floor(r/8);return(this.buffer[t]>>>7-r%8&1)===1},put:function(r,t){for(let e=0;e<t;e++)this.putBit((r>>>t-e-1&1)===1)},getLengthInBits:function(){return this.length},putBit:function(r){const t=Math.floor(this.length/8);this.buffer.length<=t&&this.buffer.push(0),r&&(this.buffer[t]|=128>>>this.length%8),this.length++}};var Xt=wt;function O(r){if(!r||r<1)throw new Error("BitMatrix size must be defined and greater than 0");this.size=r,this.data=new Uint8Array(r*r),this.reservedBit=new Uint8Array(r*r)}O.prototype.set=function(r,t,e,n){const s=r*this.size+t;this.data[s]=e,n&&(this.reservedBit[s]=!0)};O.prototype.get=function(r,t){return this.data[r*this.size+t]};O.prototype.xor=function(r,t,e){this.data[r*this.size+t]^=e};O.prototype.isReserved=function(r,t){return this.reservedBit[r*this.size+t]};var te=O,Ct={};(function(r){const t=k.getSymbolSize;r.getRowColCoords=function(n){if(n===1)return[];const s=Math.floor(n/7)+2,o=t(n),i=o===145?26:Math.ceil((o-13)/(2*s-2))*2,l=[o-7];for(let a=1;a<s-1;a++)l[a]=l[a-1]-i;return l.push(6),l.reverse()},r.getPositions=function(n){const s=[],o=r.getRowColCoords(n),i=o.length;for(let l=0;l<i;l++)for(let a=0;a<i;a++)l===0&&a===0||l===0&&a===i-1||l===i-1&&a===0||s.push([o[l],o[a]]);return s}})(Ct);var _t={};const ee=k.getSymbolSize,dt=7;_t.getPositions=function(t){const e=ee(t);return[[0,0],[e-dt,0],[0,e-dt]]};var yt={};(function(r){r.Patterns={PATTERN000:0,PATTERN001:1,PATTERN010:2,PATTERN011:3,PATTERN100:4,PATTERN101:5,PATTERN110:6,PATTERN111:7};const t={N1:3,N2:3,N3:40,N4:10};r.isValid=function(s){return s!=null&&s!==""&&!isNaN(s)&&s>=0&&s<=7},r.from=function(s){return r.isValid(s)?parseInt(s,10):void 0},r.getPenaltyN1=function(s){const o=s.size;let i=0,l=0,a=0,u=null,c=null;for(let y=0;y<o;y++){l=a=0,u=c=null;for(let g=0;g<o;g++){let d=s.get(y,g);d===u?l++:(l>=5&&(i+=t.N1+(l-5)),u=d,l=1),d=s.get(g,y),d===c?a++:(a>=5&&(i+=t.N1+(a-5)),c=d,a=1)}l>=5&&(i+=t.N1+(l-5)),a>=5&&(i+=t.N1+(a-5))}return i},r.getPenaltyN2=function(s){const o=s.size;let i=0;for(let l=0;l<o-1;l++)for(let a=0;a<o-1;a++){const u=s.get(l,a)+s.get(l,a+1)+s.get(l+1,a)+s.get(l+1,a+1);(u===4||u===0)&&i++}return i*t.N2},r.getPenaltyN3=function(s){const o=s.size;let i=0,l=0,a=0;for(let u=0;u<o;u++){l=a=0;for(let c=0;c<o;c++)l=l<<1&2047|s.get(u,c),c>=10&&(l===1488||l===93)&&i++,a=a<<1&2047|s.get(c,u),c>=10&&(a===1488||a===93)&&i++}return i*t.N3},r.getPenaltyN4=function(s){let o=0;const i=s.data.length;for(let a=0;a<i;a++)o+=s.data[a];return Math.abs(Math.ceil(o*100/i/5)-10)*t.N4};function e(n,s,o){switch(n){case r.Patterns.PATTERN000:return(s+o)%2===0;case r.Patterns.PATTERN001:return s%2===0;case r.Patterns.PATTERN010:return o%3===0;case r.Patterns.PATTERN011:return(s+o)%3===0;case r.Patterns.PATTERN100:return(Math.floor(s/2)+Math.floor(o/3))%2===0;case r.Patterns.PATTERN101:return s*o%2+s*o%3===0;case r.Patterns.PATTERN110:return(s*o%2+s*o%3)%2===0;case r.Patterns.PATTERN111:return(s*o%3+(s+o)%2)%2===0;default:throw new Error("bad maskPattern:"+n)}}r.applyMask=function(s,o){const i=o.size;for(let l=0;l<i;l++)for(let a=0;a<i;a++)o.isReserved(a,l)||o.xor(a,l,e(s,a,l))},r.getBestMask=function(s,o){const i=Object.keys(r.Patterns).length;let l=0,a=1/0;for(let u=0;u<i;u++){o(u),r.applyMask(u,s);const c=r.getPenaltyN1(s)+r.getPenaltyN2(s)+r.getPenaltyN3(s)+r.getPenaltyN4(s);r.applyMask(u,s),c<a&&(a=c,l=u)}return l}})(yt);var J={};const T=q,j=[1,1,1,1,1,1,1,1,1,1,2,2,1,2,2,4,1,2,4,4,2,4,4,4,2,4,6,5,2,4,6,6,2,5,8,8,4,5,8,8,4,5,8,11,4,8,10,11,4,9,12,16,4,9,16,16,6,10,12,18,6,10,17,16,6,11,16,19,6,13,18,21,7,14,21,25,8,16,20,25,8,17,23,25,9,17,23,34,9,18,25,30,10,20,27,32,12,21,29,35,12,23,34,37,12,25,34,40,13,26,35,42,14,28,38,45,15,29,40,48,16,31,43,51,17,33,45,54,18,35,48,57,19,37,51,60,19,38,53,63,20,40,56,66,21,43,59,70,22,45,62,74,24,47,65,77,25,49,68,81],Q=[7,10,13,17,10,16,22,28,15,26,36,44,20,36,52,64,26,48,72,88,36,64,96,112,40,72,108,130,48,88,132,156,60,110,160,192,72,130,192,224,80,150,224,264,96,176,260,308,104,198,288,352,120,216,320,384,132,240,360,432,144,280,408,480,168,308,448,532,180,338,504,588,196,364,546,650,224,416,600,700,224,442,644,750,252,476,690,816,270,504,750,900,300,560,810,960,312,588,870,1050,336,644,952,1110,360,700,1020,1200,390,728,1050,1260,420,784,1140,1350,450,812,1200,1440,480,868,1290,1530,510,924,1350,1620,540,980,1440,1710,570,1036,1530,1800,570,1064,1590,1890,600,1120,1680,1980,630,1204,1770,2100,660,1260,1860,2220,720,1316,1950,2310,750,1372,2040,2430];J.getBlocksCount=function(t,e){switch(e){case T.L:return j[(t-1)*4+0];case T.M:return j[(t-1)*4+1];case T.Q:return j[(t-1)*4+2];case T.H:return j[(t-1)*4+3];default:return}};J.getTotalCodewordsCount=function(t,e){switch(e){case T.L:return Q[(t-1)*4+0];case T.M:return Q[(t-1)*4+1];case T.Q:return Q[(t-1)*4+2];case T.H:return Q[(t-1)*4+3];default:return}};var vt={},K={};const D=new Uint8Array(512),V=new Uint8Array(256);(function(){let t=1;for(let e=0;e<255;e++)D[e]=t,V[t]=e,t<<=1,t&256&&(t^=285);for(let e=255;e<512;e++)D[e]=D[e-255]})();K.log=function(t){if(t<1)throw new Error("log("+t+")");return V[t]};K.exp=function(t){return D[t]};K.mul=function(t,e){return t===0||e===0?0:D[V[t]+V[e]]};(function(r){const t=K;r.mul=function(n,s){const o=new Uint8Array(n.length+s.length-1);for(let i=0;i<n.length;i++)for(let l=0;l<s.length;l++)o[i+l]^=t.mul(n[i],s[l]);return o},r.mod=function(n,s){let o=new Uint8Array(n);for(;o.length-s.length>=0;){const i=o[0];for(let a=0;a<s.length;a++)o[a]^=t.mul(s[a],i);let l=0;for(;l<o.length&&o[l]===0;)l++;o=o.slice(l)}return o},r.generateECPolynomial=function(n){let s=new Uint8Array([1]);for(let o=0;o<n;o++)s=r.mul(s,new Uint8Array([1,t.exp(o)]));return s}})(vt);const bt=vt;function at(r){this.genPoly=void 0,this.degree=r,this.degree&&this.initialize(this.degree)}at.prototype.initialize=function(t){this.degree=t,this.genPoly=bt.generateECPolynomial(this.degree)};at.prototype.encode=function(t){if(!this.genPoly)throw new Error("Encoder not initialized");const e=new Uint8Array(t.length+this.degree);e.set(t);const n=bt.mod(e,this.genPoly),s=this.degree-n.length;if(s>0){const o=new Uint8Array(this.degree);return o.set(n,s),o}return n};var re=at,Et={},R={},lt={};lt.isValid=function(t){return!isNaN(t)&&t>=1&&t<=40};var M={};const kt="[0-9]+",ne="[A-Z $%*+\\-./:]+";let $="(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+";$=$.replace(/u/g,"\\u");const oe="(?:(?![A-Z0-9 $%*+\\-./:]|"+$+`)(?:.|[\r
]))+`;M.KANJI=new RegExp($,"g");M.BYTE_KANJI=new RegExp("[^A-Z0-9 $%*+\\-./:]+","g");M.BYTE=new RegExp(oe,"g");M.NUMERIC=new RegExp(kt,"g");M.ALPHANUMERIC=new RegExp(ne,"g");const se=new RegExp("^"+$+"$"),ie=new RegExp("^"+kt+"$"),ae=new RegExp("^[A-Z0-9 $%*+\\-./:]+$");M.testKanji=function(t){return se.test(t)};M.testNumeric=function(t){return ie.test(t)};M.testAlphanumeric=function(t){return ae.test(t)};(function(r){const t=lt,e=M;r.NUMERIC={id:"Numeric",bit:1,ccBits:[10,12,14]},r.ALPHANUMERIC={id:"Alphanumeric",bit:2,ccBits:[9,11,13]},r.BYTE={id:"Byte",bit:4,ccBits:[8,16,16]},r.KANJI={id:"Kanji",bit:8,ccBits:[8,10,12]},r.MIXED={bit:-1},r.getCharCountIndicator=function(o,i){if(!o.ccBits)throw new Error("Invalid mode: "+o);if(!t.isValid(i))throw new Error("Invalid version: "+i);return i>=1&&i<10?o.ccBits[0]:i<27?o.ccBits[1]:o.ccBits[2]},r.getBestModeForData=function(o){return e.testNumeric(o)?r.NUMERIC:e.testAlphanumeric(o)?r.ALPHANUMERIC:e.testKanji(o)?r.KANJI:r.BYTE},r.toString=function(o){if(o&&o.id)return o.id;throw new Error("Invalid mode")},r.isValid=function(o){return o&&o.bit&&o.ccBits};function n(s){if(typeof s!="string")throw new Error("Param is not a string");switch(s.toLowerCase()){case"numeric":return r.NUMERIC;case"alphanumeric":return r.ALPHANUMERIC;case"kanji":return r.KANJI;case"byte":return r.BYTE;default:throw new Error("Unknown mode: "+s)}}r.from=function(o,i){if(r.isValid(o))return o;try{return n(o)}catch(l){return i}}})(R);(function(r){const t=k,e=J,n=q,s=R,o=lt,i=7973,l=t.getBCHDigit(i);function a(g,d,p){for(let w=1;w<=40;w++)if(d<=r.getCapacity(w,p,g))return w}function u(g,d){return s.getCharCountIndicator(g,d)+4}function c(g,d){let p=0;return g.forEach(function(w){const E=u(w.mode,d);p+=E+w.getBitsLength()}),p}function y(g,d){for(let p=1;p<=40;p++)if(c(g,p)<=r.getCapacity(p,d,s.MIXED))return p}r.from=function(d,p){return o.isValid(d)?parseInt(d,10):p},r.getCapacity=function(d,p,w){if(!o.isValid(d))throw new Error("Invalid QR Code version");typeof w=="undefined"&&(w=s.BYTE);const E=t.getSymbolTotalCodewords(d),m=e.getTotalCodewordsCount(d,p),C=(E-m)*8;if(w===s.MIXED)return C;const h=C-u(w,d);switch(w){case s.NUMERIC:return Math.floor(h/10*3);case s.ALPHANUMERIC:return Math.floor(h/11*2);case s.KANJI:return Math.floor(h/13);case s.BYTE:default:return Math.floor(h/8)}},r.getBestVersionForData=function(d,p){let w;const E=n.from(p,n.M);if(Array.isArray(d)){if(d.length>1)return y(d,E);if(d.length===0)return 1;w=d[0]}else w=d;return a(w.mode,w.getLength(),E)},r.getEncodedBits=function(d){if(!o.isValid(d)||d<7)throw new Error("Invalid QR Code version");let p=d<<12;for(;t.getBCHDigit(p)-l>=0;)p^=i<<t.getBCHDigit(p)-l;return d<<12|p}})(Et);var Pt={};const rt=k,xt=1335,le=21522,ft=rt.getBCHDigit(xt);Pt.getEncodedBits=function(t,e){const n=t.bit<<3|e;let s=n<<10;for(;rt.getBCHDigit(s)-ft>=0;)s^=xt<<rt.getBCHDigit(s)-ft;return(n<<10|s)^le};var Bt={};const ue=R;function F(r){this.mode=ue.NUMERIC,this.data=r.toString()}F.getBitsLength=function(t){return 10*Math.floor(t/3)+(t%3?t%3*3+1:0)};F.prototype.getLength=function(){return this.data.length};F.prototype.getBitsLength=function(){return F.getBitsLength(this.data.length)};F.prototype.write=function(t){let e,n,s;for(e=0;e+3<=this.data.length;e+=3)n=this.data.substr(e,3),s=parseInt(n,10),t.put(s,10);const o=this.data.length-e;o>0&&(n=this.data.substr(e),s=parseInt(n,10),t.put(s,o*3+1))};var ce=F;const de=R,Z=["0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"," ","$","%","*","+","-",".","/",":"];function L(r){this.mode=de.ALPHANUMERIC,this.data=r}L.getBitsLength=function(t){return 11*Math.floor(t/2)+6*(t%2)};L.prototype.getLength=function(){return this.data.length};L.prototype.getBitsLength=function(){return L.getBitsLength(this.data.length)};L.prototype.write=function(t){let e;for(e=0;e+2<=this.data.length;e+=2){let n=Z.indexOf(this.data[e])*45;n+=Z.indexOf(this.data[e+1]),t.put(n,11)}this.data.length%2&&t.put(Z.indexOf(this.data[e]),6)};var fe=L,he=function(t){for(var e=[],n=t.length,s=0;s<n;s++){var o=t.charCodeAt(s);if(o>=55296&&o<=56319&&n>s+1){var i=t.charCodeAt(s+1);i>=56320&&i<=57343&&(o=(o-55296)*1024+i-56320+65536,s+=1)}if(o<128){e.push(o);continue}if(o<2048){e.push(o>>6|192),e.push(o&63|128);continue}if(o<55296||o>=57344&&o<65536){e.push(o>>12|224),e.push(o>>6&63|128),e.push(o&63|128);continue}if(o>=65536&&o<=1114111){e.push(o>>18|240),e.push(o>>12&63|128),e.push(o>>6&63|128),e.push(o&63|128);continue}e.push(239,191,189)}return new Uint8Array(e).buffer};const me=he,ge=R;function N(r){this.mode=ge.BYTE,typeof r=="string"&&(r=me(r)),this.data=new Uint8Array(r)}N.getBitsLength=function(t){return t*8};N.prototype.getLength=function(){return this.data.length};N.prototype.getBitsLength=function(){return N.getBitsLength(this.data.length)};N.prototype.write=function(r){for(let t=0,e=this.data.length;t<e;t++)r.put(this.data[t],8)};var pe=N;const we=R,Ce=k;function I(r){this.mode=we.KANJI,this.data=r}I.getBitsLength=function(t){return t*13};I.prototype.getLength=function(){return this.data.length};I.prototype.getBitsLength=function(){return I.getBitsLength(this.data.length)};I.prototype.write=function(r){let t;for(t=0;t<this.data.length;t++){let e=Ce.toSJIS(this.data[t]);if(e>=33088&&e<=40956)e-=33088;else if(e>=57408&&e<=60351)e-=49472;else throw new Error("Invalid SJIS character: "+this.data[t]+`
Make sure your charset is UTF-8`);e=(e>>>8&255)*192+(e&255),r.put(e,13)}};var _e=I,Mt={exports:{}};(function(r){var t={single_source_shortest_paths:function(e,n,s){var o={},i={};i[n]=0;var l=t.PriorityQueue.make();l.push(n,0);for(var a,u,c,y,g,d,p,w,E;!l.empty();){a=l.pop(),u=a.value,y=a.cost,g=e[u]||{};for(c in g)g.hasOwnProperty(c)&&(d=g[c],p=y+d,w=i[c],E=typeof i[c]=="undefined",(E||w>p)&&(i[c]=p,l.push(c,p),o[c]=u))}if(typeof s!="undefined"&&typeof i[s]=="undefined"){var m=["Could not find a path from ",n," to ",s,"."].join("");throw new Error(m)}return o},extract_shortest_path_from_predecessor_list:function(e,n){for(var s=[],o=n;o;)s.push(o),e[o],o=e[o];return s.reverse(),s},find_path:function(e,n,s){var o=t.single_source_shortest_paths(e,n,s);return t.extract_shortest_path_from_predecessor_list(o,s)},PriorityQueue:{make:function(e){var n=t.PriorityQueue,s={},o;e=e||{};for(o in n)n.hasOwnProperty(o)&&(s[o]=n[o]);return s.queue=[],s.sorter=e.sorter||n.default_sorter,s},default_sorter:function(e,n){return e.cost-n.cost},push:function(e,n){var s={value:e,cost:n};this.queue.push(s),this.queue.sort(this.sorter)},pop:function(){return this.queue.shift()},empty:function(){return this.queue.length===0}}};r.exports=t})(Mt);var ye=Mt.exports;(function(r){const t=R,e=ce,n=fe,s=pe,o=_e,i=M,l=k,a=ye;function u(m){return unescape(encodeURIComponent(m)).length}function c(m,C,h){const f=[];let _;for(;(_=m.exec(h))!==null;)f.push({data:_[0],index:_.index,mode:C,length:_[0].length});return f}function y(m){const C=c(i.NUMERIC,t.NUMERIC,m),h=c(i.ALPHANUMERIC,t.ALPHANUMERIC,m);let f,_;return l.isKanjiModeEnabled()?(f=c(i.BYTE,t.BYTE,m),_=c(i.KANJI,t.KANJI,m)):(f=c(i.BYTE_KANJI,t.BYTE,m),_=[]),C.concat(h,f,_).sort(function(b,P){return b.index-P.index}).map(function(b){return{data:b.data,mode:b.mode,length:b.length}})}function g(m,C){switch(C){case t.NUMERIC:return e.getBitsLength(m);case t.ALPHANUMERIC:return n.getBitsLength(m);case t.KANJI:return o.getBitsLength(m);case t.BYTE:return s.getBitsLength(m)}}function d(m){return m.reduce(function(C,h){const f=C.length-1>=0?C[C.length-1]:null;return f&&f.mode===h.mode?(C[C.length-1].data+=h.data,C):(C.push(h),C)},[])}function p(m){const C=[];for(let h=0;h<m.length;h++){const f=m[h];switch(f.mode){case t.NUMERIC:C.push([f,{data:f.data,mode:t.ALPHANUMERIC,length:f.length},{data:f.data,mode:t.BYTE,length:f.length}]);break;case t.ALPHANUMERIC:C.push([f,{data:f.data,mode:t.BYTE,length:f.length}]);break;case t.KANJI:C.push([f,{data:f.data,mode:t.BYTE,length:u(f.data)}]);break;case t.BYTE:C.push([{data:f.data,mode:t.BYTE,length:u(f.data)}])}}return C}function w(m,C){const h={},f={start:{}};let _=["start"];for(let v=0;v<m.length;v++){const b=m[v],P=[];for(let S=0;S<b.length;S++){const x=b[S],U=""+v+S;P.push(U),h[U]={node:x,lastCount:0},f[U]={};for(let G=0;G<_.length;G++){const A=_[G];h[A]&&h[A].node.mode===x.mode?(f[A][U]=g(h[A].lastCount+x.length,x.mode)-g(h[A].lastCount,x.mode),h[A].lastCount+=x.length):(h[A]&&(h[A].lastCount=x.length),f[A][U]=g(x.length,x.mode)+4+t.getCharCountIndicator(x.mode,C))}}_=P}for(let v=0;v<_.length;v++)f[_[v]].end=0;return{map:f,table:h}}function E(m,C){let h;const f=t.getBestModeForData(m);if(h=t.from(C,f),h!==t.BYTE&&h.bit<f.bit)throw new Error('"'+m+'" cannot be encoded with mode '+t.toString(h)+`.
 Suggested mode is: `+t.toString(f));switch(h===t.KANJI&&!l.isKanjiModeEnabled()&&(h=t.BYTE),h){case t.NUMERIC:return new e(m);case t.ALPHANUMERIC:return new n(m);case t.KANJI:return new o(m);case t.BYTE:return new s(m)}}r.fromArray=function(C){return C.reduce(function(h,f){return typeof f=="string"?h.push(E(f,null)):f.data&&h.push(E(f.data,f.mode)),h},[])},r.fromString=function(C,h){const f=y(C,l.isKanjiModeEnabled()),_=p(f),v=w(_,h),b=a.find_path(v.map,"start","end"),P=[];for(let S=1;S<b.length-1;S++)P.push(v.table[b[S]].node);return r.fromArray(d(P))},r.rawSplit=function(C){return r.fromArray(y(C,l.isKanjiModeEnabled()))}})(Bt);const Y=k,W=q,ve=Xt,be=te,Ee=Ct,ke=_t,nt=yt,ot=J,Pe=re,z=Et,xe=Pt,Be=R,X=Bt;function Me(r,t){const e=r.size,n=ke.getPositions(t);for(let s=0;s<n.length;s++){const o=n[s][0],i=n[s][1];for(let l=-1;l<=7;l++)if(!(o+l<=-1||e<=o+l))for(let a=-1;a<=7;a++)i+a<=-1||e<=i+a||(l>=0&&l<=6&&(a===0||a===6)||a>=0&&a<=6&&(l===0||l===6)||l>=2&&l<=4&&a>=2&&a<=4?r.set(o+l,i+a,!0,!0):r.set(o+l,i+a,!1,!0))}}function Ae(r){const t=r.size;for(let e=8;e<t-8;e++){const n=e%2===0;r.set(e,6,n,!0),r.set(6,e,n,!0)}}function Se(r,t){const e=Ee.getPositions(t);for(let n=0;n<e.length;n++){const s=e[n][0],o=e[n][1];for(let i=-2;i<=2;i++)for(let l=-2;l<=2;l++)i===-2||i===2||l===-2||l===2||i===0&&l===0?r.set(s+i,o+l,!0,!0):r.set(s+i,o+l,!1,!0)}}function Te(r,t){const e=r.size,n=z.getEncodedBits(t);let s,o,i;for(let l=0;l<18;l++)s=Math.floor(l/3),o=l%3+e-8-3,i=(n>>l&1)===1,r.set(s,o,i,!0),r.set(o,s,i,!0)}function tt(r,t,e){const n=r.size,s=xe.getEncodedBits(t,e);let o,i;for(o=0;o<15;o++)i=(s>>o&1)===1,o<6?r.set(o,8,i,!0):o<8?r.set(o+1,8,i,!0):r.set(n-15+o,8,i,!0),o<8?r.set(8,n-o-1,i,!0):o<9?r.set(8,15-o-1+1,i,!0):r.set(8,15-o-1,i,!0);r.set(n-8,8,1,!0)}function Re(r,t){const e=r.size;let n=-1,s=e-1,o=7,i=0;for(let l=e-1;l>0;l-=2)for(l===6&&l--;;){for(let a=0;a<2;a++)if(!r.isReserved(s,l-a)){let u=!1;i<t.length&&(u=(t[i]>>>o&1)===1),r.set(s,l-a,u),o--,o===-1&&(i++,o=7)}if(s+=n,s<0||e<=s){s-=n,n=-n;break}}}function Fe(r,t,e){const n=new ve;e.forEach(function(a){n.put(a.mode.bit,4),n.put(a.getLength(),Be.getCharCountIndicator(a.mode,r)),a.write(n)});const s=Y.getSymbolTotalCodewords(r),o=ot.getTotalCodewordsCount(r,t),i=(s-o)*8;for(n.getLengthInBits()+4<=i&&n.put(0,4);n.getLengthInBits()%8!==0;)n.putBit(0);const l=(i-n.getLengthInBits())/8;for(let a=0;a<l;a++)n.put(a%2?17:236,8);return Le(n,r,t)}function Le(r,t,e){const n=Y.getSymbolTotalCodewords(t),s=ot.getTotalCodewordsCount(t,e),o=n-s,i=ot.getBlocksCount(t,e),l=n%i,a=i-l,u=Math.floor(n/i),c=Math.floor(o/i),y=c+1,g=u-c,d=new Pe(g);let p=0;const w=new Array(i),E=new Array(i);let m=0;const C=new Uint8Array(r.buffer);for(let b=0;b<i;b++){const P=b<a?c:y;w[b]=C.slice(p,p+P),E[b]=d.encode(w[b]),p+=P,m=Math.max(m,P)}const h=new Uint8Array(n);let f=0,_,v;for(_=0;_<m;_++)for(v=0;v<i;v++)_<w[v].length&&(h[f++]=w[v][_]);for(_=0;_<g;_++)for(v=0;v<i;v++)h[f++]=E[v][_];return h}function Ne(r,t,e,n){let s;if(Array.isArray(r))s=X.fromArray(r);else if(typeof r=="string"){let u=t;if(!u){const c=X.rawSplit(r);u=z.getBestVersionForData(c,e)}s=X.fromString(r,u||40)}else throw new Error("Invalid data");const o=z.getBestVersionForData(s,e);if(!o)throw new Error("The amount of data is too big to be stored in a QR Code");if(!t)t=o;else if(t<o)throw new Error(`
The chosen QR Code version cannot contain this amount of data.
Minimum version required to store current data is: `+o+`.
`);const i=Fe(t,e,s),l=Y.getSymbolSize(t),a=new be(l);return Me(a,t),Ae(a),Se(a,t),tt(a,e,0),t>=7&&Te(a,t),Re(a,i),isNaN(n)&&(n=nt.getBestMask(a,tt.bind(null,a,e))),nt.applyMask(n,a),tt(a,e,n),{modules:a,version:t,errorCorrectionLevel:e,maskPattern:n,segments:s}}pt.create=function(t,e){if(typeof t=="undefined"||t==="")throw new Error("No input text");let n=W.M,s,o;return typeof e!="undefined"&&(n=W.from(e.errorCorrectionLevel,W.M),s=z.from(e.version),o=nt.from(e.maskPattern),e.toSJISFunc&&Y.setToSJISFunction(e.toSJISFunc)),Ne(t,s,n,o)};var At={},ut={};(function(r){function t(e){if(typeof e=="number"&&(e=e.toString()),typeof e!="string")throw new Error("Color should be defined as hex string");let n=e.slice().replace("#","").split("");if(n.length<3||n.length===5||n.length>8)throw new Error("Invalid hex color: "+e);(n.length===3||n.length===4)&&(n=Array.prototype.concat.apply([],n.map(function(o){return[o,o]}))),n.length===6&&n.push("F","F");const s=parseInt(n.join(""),16);return{r:s>>24&255,g:s>>16&255,b:s>>8&255,a:s&255,hex:"#"+n.slice(0,6).join("")}}r.getOptions=function(n){n||(n={}),n.color||(n.color={});const s=typeof n.margin=="undefined"||n.margin===null||n.margin<0?4:n.margin,o=n.width&&n.width>=21?n.width:void 0,i=n.scale||4;return{width:o,scale:o?4:i,margin:s,color:{dark:t(n.color.dark||"#000000ff"),light:t(n.color.light||"#ffffffff")},type:n.type,rendererOpts:n.rendererOpts||{}}},r.getScale=function(n,s){return s.width&&s.width>=n+s.margin*2?s.width/(n+s.margin*2):s.scale},r.getImageWidth=function(n,s){const o=r.getScale(n,s);return Math.floor((n+s.margin*2)*o)},r.qrToImageData=function(n,s,o){const i=s.modules.size,l=s.modules.data,a=r.getScale(i,o),u=Math.floor((i+o.margin*2)*a),c=o.margin*a,y=[o.color.light,o.color.dark];for(let g=0;g<u;g++)for(let d=0;d<u;d++){let p=(g*u+d)*4,w=o.color.light;if(g>=c&&d>=c&&g<u-c&&d<u-c){const E=Math.floor((g-c)/a),m=Math.floor((d-c)/a);w=y[l[E*i+m]?1:0]}n[p++]=w.r,n[p++]=w.g,n[p++]=w.b,n[p]=w.a}}})(ut);(function(r){const t=ut;function e(s,o,i){s.clearRect(0,0,o.width,o.height),o.style||(o.style={}),o.height=i,o.width=i,o.style.height=i+"px",o.style.width=i+"px"}function n(){try{return document.createElement("canvas")}catch(s){throw new Error("You need to specify a canvas element")}}r.render=function(o,i,l){let a=l,u=i;typeof a=="undefined"&&(!i||!i.getContext)&&(a=i,i=void 0),i||(u=n()),a=t.getOptions(a);const c=t.getImageWidth(o.modules.size,a),y=u.getContext("2d"),g=y.createImageData(c,c);return t.qrToImageData(g.data,o,a),e(y,u,c),y.putImageData(g,0,0),u},r.renderToDataURL=function(o,i,l){let a=l;typeof a=="undefined"&&(!i||!i.getContext)&&(a=i,i=void 0),a||(a={});const u=r.render(o,i,a),c=a.type||"image/png",y=a.rendererOpts||{};return u.toDataURL(c,y.quality)}})(At);var St={};const Ie=ut;function ht(r,t){const e=r.a/255,n=t+'="'+r.hex+'"';return e<1?n+" "+t+'-opacity="'+e.toFixed(2).slice(1)+'"':n}function et(r,t,e){let n=r+t;return typeof e!="undefined"&&(n+=" "+e),n}function Ue(r,t,e){let n="",s=0,o=!1,i=0;for(let l=0;l<r.length;l++){const a=Math.floor(l%t),u=Math.floor(l/t);!a&&!o&&(o=!0),r[l]?(i++,l>0&&a>0&&r[l-1]||(n+=o?et("M",a+e,.5+u+e):et("m",s,0),s=0,o=!1),a+1<t&&r[l+1]||(n+=et("h",i),i=0)):s++}return n}St.render=function(t,e,n){const s=Ie.getOptions(e),o=t.modules.size,i=t.modules.data,l=o+s.margin*2,a=s.color.light.a?"<path "+ht(s.color.light,"fill")+' d="M0 0h'+l+"v"+l+'H0z"/>':"",u="<path "+ht(s.color.dark,"stroke")+' d="'+Ue(i,o,s.margin)+'"/>',c='viewBox="0 0 '+l+" "+l+'"',g='<svg xmlns="http://www.w3.org/2000/svg" '+(s.width?'width="'+s.width+'" height="'+s.width+'" ':"")+c+' shape-rendering="crispEdges">'+a+u+`</svg>
`;return typeof n=="function"&&n(null,g),g};const De=Zt,st=pt,Tt=At,$e=St;function ct(r,t,e,n,s){const o=[].slice.call(arguments,1),i=o.length,l=typeof o[i-1]=="function";if(!l&&!De())throw new Error("Callback required as last argument");if(l){if(i<2)throw new Error("Too few arguments provided");i===2?(s=e,e=t,t=n=void 0):i===3&&(t.getContext&&typeof s=="undefined"?(s=n,n=void 0):(s=n,n=e,e=t,t=void 0))}else{if(i<1)throw new Error("Too few arguments provided");return i===1?(e=t,t=n=void 0):i===2&&!t.getContext&&(n=e,e=t,t=void 0),new Promise(function(a,u){try{const c=st.create(e,n);a(r(c,t,n))}catch(c){u(c)}})}try{const a=st.create(e,n);s(null,r(a,t,n))}catch(a){s(a)}}H.create=st.create;H.toCanvas=ct.bind(null,Tt.render);H.toDataURL=ct.bind(null,Tt.renderToDataURL);H.toString=ct.bind(null,function(r,t,e){return $e.render(r,e)});const He={name:"FormQrCode",props:{form:{type:Object,required:!0},extraQueryParam:{type:String,default:""}},data(){return{QrUrl:null}},computed:{shareUrl(){return this.extraQueryParam?this.form.share_url+"?"+this.extraQueryParam:this.form.share_url+this.extraQueryParam}},watch:{shareUrl(){this.generateQR()}},mounted(){this.generateQR()},methods:{generateQR(){H.toDataURL(this.shareUrl).then(r=>{this.QrUrl=r})}}};var Oe=function(){var t=this,e=t._self._c;return e("div",[e("h3",{staticClass:"font-semibold text-xl"},[t._v("QR Code")]),e("p",[t._v("Scan the QR code to open the form (Right click to copy the image)")]),e("div",{staticClass:"flex items-center"},[t.QrUrl?e("img",{staticClass:"m-auto",attrs:{src:t.QrUrl}}):t._e()])])},je=[],Qe=B(He,Oe,je,!1,null,null,null,null);const Ve=Qe.exports,ze={name:"FormUrlPrefill",props:{form:{type:Object,required:!0},formData:{type:Object,required:!0},extraQueryParam:{type:String,default:""}},data(){return{}},computed:{preFillUrl(){const r=this.form.share_url,t=new URLSearchParams;return this.form.properties.filter(e=>this.formData.hasOwnProperty(e.id)&&this.formData[e.id]!==null).forEach(e=>{Array.isArray(this.formData[e.id])?this.formData[e.id].forEach(n=>{t.append(e.id+"[]",n)}):t.append(e.id,this.formData[e.id])}),t.toString()!==""?this.extraQueryParam?r+"?"+t+"&"+this.extraQueryParam:r+"?"+t:this.extraQueryParam?r+"?"+this.extraQueryParam:r}},watch:{},mounted(){},methods:{getPropertyUriComponent(r){const t=encodeURIComponent(this.formData[r.id]);return encodeURIComponent(r.id)+"="+t},copyToClipboard(){const r=this.preFillUrl,t=document.createElement("textarea");t.value=r,document.body.appendChild(t),t.select(),document.execCommand("copy"),document.body.removeChild(t)}}};var qe=function(){var t=this,e=t._self._c;return e("div",{staticClass:"border border-nt-blue-light bg-blue-50 dark:bg-notion-dark-light shadow rounded-md p-4 mb-5 w-full mx-auto mt-4 select-all"},[e("div",{staticClass:"flex items-center"},[e("p",{staticClass:"select-all flex-grow break-all",domProps:{innerHTML:t._s(t.preFillUrl)}}),e("div",{staticClass:"hover:bg-nt-blue-lighter rounded transition-colors cursor-pointer",on:{click:t.copyToClipboard}},[e("svg",{staticClass:"h-6 w-6 text-nt-blue",attrs:{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor"}},[e("path",{attrs:{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3"}})])])])])},Je=[],Ke=B(ze,qe,Je,!1,null,null,null,null);const Ye=Ke.exports,Ge={name:"UrlFormPrefill",components:{FormUrlPrefill:Ye,ProTag:Nt,OpenForm:It},props:{form:{type:Object,required:!0},extraQueryParam:{type:String,default:""}},data:()=>({prefillFormData:null,theme:Rt.default,showUrlFormPrefillModal:!1}),computed:{},methods:{generateUrl(r,t){this.prefillFormData=r,this.$nextTick().then(()=>{this.$refs.content&&(this.$refs.content.parentElement.parentElement.parentElement.scrollTop=this.$refs.content.offsetHeight)})}}};var Ze=function(){var t=this,e=t._self._c;return e("div",{staticClass:"flex"},[e("v-button",{directives:[{name:"track",rawName:"v-track.url_form_prefill_click",value:{form_id:t.form.id,form_slug:t.form.slug},expression:"{form_id:form.id, form_slug:form.slug}",modifiers:{url_form_prefill_click:!0}}],staticClass:"w-full",attrs:{color:"light-gray"},on:{click:function(n){t.showUrlFormPrefillModal=!0}}},[e("svg",{staticClass:"h-6 w-6 mr-4 text-blue-600 inline",attrs:{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor"}},[e("path",{attrs:{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M17 16v2a2 2 0 01-2 2H5a2 2 0 01-2-2v-7a2 2 0 012-2h2m3-4H9a2 2 0 00-2 2v7a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-1m-1 4l-3 3m0 0l-3-3m3 3V3"}})]),t._v(" Url form pre-fill ")]),e("modal",{attrs:{show:t.showUrlFormPrefillModal},on:{close:function(n){t.showUrlFormPrefillModal=!1}},scopedSlots:t._u([{key:"icon",fn:function(){return[e("svg",{staticClass:"w-10 h-10 text-blue",attrs:{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor"}},[e("path",{attrs:{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M17 16v2a2 2 0 01-2 2H5a2 2 0 01-2-2v-7a2 2 0 012-2h2m3-4H9a2 2 0 00-2 2v7a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-1m-1 4l-3 3m0 0l-3-3m3 3V3"}})])]},proxy:!0},{key:"title",fn:function(){return[e("span",[t._v("Url Form Prefill")])]},proxy:!0}])},[e("div",{ref:"content",staticClass:"p-4"},[e("p",[t._v(" Create dynamic links when sharing your form (whether it's embedded or not), that allows you to prefill your form fields. You can use this to personalize the form when sending it to multiple contacts for instance. ")]),e("h3",{staticClass:"mt-6 border-t text-xl font-semibold mb-4 pt-6"},[t._v(" How does it work? ")]),e("p",[t._v(" Complete your form below and fill only the fields you want to prefill. You can even leave the required fields empty. ")]),e("div",{staticClass:"rounded-lg p-5 bg-gray-100 dark:bg-gray-900 mt-4"},[t.form?e("open-form",{attrs:{theme:t.theme,loading:!1,"show-hidden":!0,form:t.form,fields:t.form.properties},on:{submit:t.generateUrl},scopedSlots:t._u([{key:"submit-btn",fn:function({submitForm:n}){return[e("v-button",{staticClass:"mt-2 px-8 mx-1",on:{click:function(s){return s.preventDefault(),n.apply(null,arguments)}}},[t._v(" Generate Pre-filled URL ")])]}}],null,!1,2112750635)}):t._e()],1),t.prefillFormData?[e("h3",{staticClass:"mt-6 text-xl font-semibold mb-4 pt-6"},[t._v(" Your Prefill url ")]),e("form-url-prefill",{attrs:{form:t.form,"form-data":t.prefillFormData,"extra-query-param":t.extraQueryParam}})]:t._e()],2)])],1)},We=[],Xe=B(Ge,Ze,We,!1,null,null,null,null);const tr=Xe.exports,er={name:"RegenerateFormLink",components:{},props:{form:{type:Object,required:!0}},data:()=>({loadingNewLink:!1,showGenerateFormLinkModal:!1}),computed:{formEndpoint:()=>"/api/open/forms/{id}"},methods:{regenerateLink(r){this.loadingNewLink||(this.loadingNewLink=!0,Ft.put(this.formEndpoint.replace("{id}",this.form.id)+"/regenerate-link/"+r).then(t=>{this.$store.commit("open/forms/addOrUpdate",t.data.form),this.$router.push({name:"forms.show",params:{slug:t.data.form.slug}}),this.alertSuccess(t.data.message),this.loadingNewLink=!1}).finally(()=>{this.showGenerateFormLinkModal=!1}))}}};var rr=function(){var t=this,e=t._self._c;return e("div",[e("v-button",{directives:[{name:"track",rawName:"v-track.regenerate_form_link_click",value:{form_id:t.form.id,form_slug:t.form.slug},expression:"{form_id:form.id, form_slug:form.slug}",modifiers:{regenerate_form_link_click:!0}}],staticClass:"w-full",attrs:{color:"light-gray"},on:{click:function(n){t.showGenerateFormLinkModal=!0}}},[e("svg",{staticClass:"h-6 w-6 mr-4 text-blue-600 inline",attrs:{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor"}},[e("path",{attrs:{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"}})]),t._v(" Regenerate form link ")]),e("modal",{attrs:{show:t.showGenerateFormLinkModal},on:{close:function(n){t.showGenerateFormLinkModal=!1}},scopedSlots:t._u([{key:"icon",fn:function(){return[e("svg",{staticClass:"w-10 h-10 text-blue-600",attrs:{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor"}},[e("path",{attrs:{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"}})])]},proxy:!0},{key:"title",fn:function(){return[t._v(" Generate new form link ")]},proxy:!0}])},[e("div",{staticClass:"p-4"},[e("p",[t._v(" You can choose between two different URL formats for your form. "),e("span",{staticClass:"font-semibold"},[t._v("Be careful, changing your form URL is not a reversible operation")]),t._v(". Make sure to udpate your form URL everywhere where it's used. ")]),e("div",{staticClass:"border-t py-4 mt-4"},[e("h3",{staticClass:"text-xl text-gray-700 font-semibold"},[t._v(" Human Readable URL ")]),e("p",[t._v("If your users are going to see this url, you might want to make nice and readable. Example:")]),e("p",{staticClass:"text-gray-600 border p-4 bg-gray-50 rounded-md mt-4"},[t._v(" https://opnform.com/forms/contact ")]),e("div",{staticClass:"text-center mt-4"},[e("v-button",{attrs:{loading:t.loadingNewLink,color:"outline-blue"},on:{click:function(n){return t.regenerateLink("slug")}}},[t._v(" Generate a Human Readable URL ")])],1)]),e("div",{staticClass:"border-t pt-4 mt-4"},[e("h3",{staticClass:"text-xl text-gray-700 font-semibold"},[t._v(" Random ID URL ")]),e("p",[t._v(" If your user are not going to see your form url (if it's embedded), and if you prefer to have a random non-guessable URL. Example: ")]),e("p",{staticClass:"text-gray-600 p-4 border bg-gray-50 rounded-md mt-4"},[t._v(" https://opnform.com/forms/b4417f9c-34ae-4421-8006-832ee47786e7 ")]),e("div",{staticClass:"text-center mt-4"},[e("v-button",{attrs:{loading:t.loadingNewLink,color:"outline-blue"},on:{click:function(n){return t.regenerateLink("uuid")}}},[t._v(" Generate a Random ID URL ")])],1)])])])],1)},nr=[],or=B(er,rr,nr,!1,null,null,null,null);const sr=or.exports,ir={name:"AdvancedFormUrlSettings",components:{Collapse:mt},props:{form:{type:Object,required:!0},value:{type:Object,required:!0}},data(){return{}},computed:{hideTitleHelp(){return this.form.hide_title?"This option is disabled because the form title is already hidden":null}},watch:{},mounted(){},methods:{onChangeHideTitle(r){this.value.hide_title=r},onChangeAutoSubmit(r){this.value.auto_submit=r}}};var ar=function(){var t=this,e=t._self._c;return e("collapse",{staticClass:"py-5 w-full",attrs:{"default-value":!1},scopedSlots:t._u([{key:"title",fn:function(){return[e("div",{staticClass:"flex"},[e("h3",{staticClass:"font-semibold block text-lg"},[e("svg",{staticClass:"h-5 w-5 inline text-gray-500 mr-2 -mt-1",attrs:{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor"}},[e("path",{attrs:{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M4 6h16M4 12h16M4 18h16"}})]),t._v(" Show advanced options ")])])]},proxy:!0}])},[e("toggle-switch-input",{staticClass:"mt-4",attrs:{value:t.value.hide_title,name:"hide_title",label:"Hide Form Title",disabled:t.form.hide_title===!0,help:t.hideTitleHelp},on:{input:t.onChangeHideTitle}}),e("toggle-switch-input",{staticClass:"mt-4",attrs:{value:t.value.auto_submit,name:"auto_submit",label:"Auto Submit Form",help:"Form will auto submit immediate after open URL"},on:{input:t.onChangeAutoSubmit}})],1)},lr=[],ur=B(ir,ar,lr,!1,null,null,null,null);const cr=ur.exports,dr={name:"EmbedFormAsPopupModal",components:{Collapse:mt},props:{form:{type:Object,required:!0}},data:()=>({showEmbedFormAsPopupModal:!1,embedScriptUrl:"widgets/embed-min.js",advancedOptions:{hide_title:!1,emoji:"💬",position:"right",bgcolor:"#3B82F6",width:"500"}}),computed:{hideTitleHelp(){return this.form.hide_title?"This option is disabled because the form title is already hidden":null},shareUrl(){return this.advancedOptions.hide_title?this.form.share_url+"?hide_title=true":this.form.share_url},embedPopupCode(){const r={formurl:this.shareUrl,emoji:this.advancedOptions.emoji,position:this.advancedOptions.position,bgcolor:this.advancedOptions.bgcolor,width:this.advancedOptions.width};return this.previewPopup(r),"<script async data-nf='"+JSON.stringify(r)+"' src='"+this.asset(this.embedScriptUrl)+"'><\/script>"}},mounted(){this.advancedOptions.bgcolor=this.form.color},methods:{onClose(){this.removePreview(),this.$crisp.push(["do","chat:show"]),this.showEmbedFormAsPopupModal=!1},copyToClipboard(){const r=this.embedPopupCode,t=document.createElement("textarea");t.value=r,document.body.appendChild(t),t.select(),document.execCommand("copy"),document.body.removeChild(t)},removePreview(){const r=document.head.querySelector("#nf-popup-preview");r&&r.remove();const t=document.body.querySelector(".nf-main");t&&t.remove()},previewPopup(r){if(!this.showEmbedFormAsPopupModal)return;this.removePreview(),this.$crisp.push(["do","chat:hide"]);const t=document.createElement("script");t.id="nf-popup-preview",t.async=!0,t.src=this.asset(this.embedScriptUrl),t.setAttribute("data-nf",JSON.stringify(r)),document.head.appendChild(t)}}};var fr=function(){var t=this,e=t._self._c;return e("div",[e("v-button",{directives:[{name:"track",rawName:"v-track.share_embed_form_popup_click",value:{form_id:t.form.id,form_slug:t.form.slug},expression:"{form_id:form.id, form_slug:form.slug}",modifiers:{share_embed_form_popup_click:!0}}],staticClass:"w-full",attrs:{color:"light-gray"},on:{click:function(n){t.showEmbedFormAsPopupModal=!0}}},[e("svg",{staticClass:"h-6 w-6 mr-4 text-blue-600 inline",attrs:{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",stroke:"currentColor"}},[e("path",{attrs:{"stroke-linecap":"round","stroke-linejoin":"round",d:"M2.25 12.76c0 1.6 1.123 2.994 2.707 3.227 1.068.157 2.148.279 3.238.364.466.037.893.281 1.153.671L12 21l2.652-3.978c.26-.39.687-.634 1.153-.67 1.09-.086 2.17-.208 3.238-.365 1.584-.233 2.707-1.626 2.707-3.228V6.741c0-1.602-1.123-2.995-2.707-3.228A48.394 48.394 0 0012 3c-2.392 0-4.744.175-7.043.513C3.373 3.746 2.25 5.14 2.25 6.741v6.018z"}})]),t._v(" Embed form as popup ")]),e("modal",{attrs:{show:t.showEmbedFormAsPopupModal},on:{close:t.onClose},scopedSlots:t._u([{key:"icon",fn:function(){return[e("svg",{staticClass:"w-10 h-10 text-blue",attrs:{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor"}},[e("path",{attrs:{"stroke-linecap":"round","stroke-linejoin":"round",d:"M2.25 12.76c0 1.6 1.123 2.994 2.707 3.227 1.068.157 2.148.279 3.238.364.466.037.893.281 1.153.671L12 21l2.652-3.978c.26-.39.687-.634 1.153-.67 1.09-.086 2.17-.208 3.238-.365 1.584-.233 2.707-1.626 2.707-3.228V6.741c0-1.602-1.123-2.995-2.707-3.228A48.394 48.394 0 0012 3c-2.392 0-4.744.175-7.043.513C3.373 3.746 2.25 5.14 2.25 6.741v6.018z"}})])]},proxy:!0},{key:"title",fn:function(){return[e("span",[t._v("Add the popup to your website")])]},proxy:!0}])},[e("div",{staticClass:"p-4"},[e("h3",{staticClass:"border-t text-xl font-semibold mb-2 pt-6"},[t._v(" Demo ")]),e("p",{staticClass:"pb-6"},[t._v(" A live preview of your form popup was just added to this page. "),e("span",{staticClass:"font-semibold text-blue-800"},[t._v("Click on the button on the bottom "+t._s(t.advancedOptions.position)+" corner to try it")]),t._v(". ")]),e("h3",{staticClass:"border-t text-xl font-semibold mb-2 pt-6"},[t._v(" How does it work? ")]),e("p",[t._v("Paste the following code snippet in the "),e("b",[t._v("<head>")]),t._v(" section of your website.")]),e("div",{staticClass:"border border-nt-blue-light bg-blue-50 dark:bg-notion-dark-light rounded-md p-4 mb-5 w-full mx-auto mt-4 select-all"},[e("div",{staticClass:"flex items-center"},[e("p",{staticClass:"select-all text-nt-blue flex-grow break-all"},[t._v(" "+t._s(t.embedPopupCode)+" ")]),e("div",{staticClass:"hover:bg-nt-blue-lighter rounded transition-colors cursor-pointer",on:{click:t.copyToClipboard}},[e("svg",{staticClass:"h-6 w-6 text-nt-blue",attrs:{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor"}},[e("path",{attrs:{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3"}})])])])]),e("collapse",{staticClass:"py-5 w-full border rounded-md px-4",attrs:{"default-value":!1},scopedSlots:t._u([{key:"title",fn:function(){return[e("div",{staticClass:"flex"},[e("h3",{staticClass:"font-semibold block text-lg"},[t._v(" Advanced options ")])])]},proxy:!0}])},[e("div",{staticClass:"border-t mt-4 -mx-4"}),e("toggle-switch-input",{staticClass:"mt-4",attrs:{name:"hide_title",label:"Hide Form Title",disabled:t.form.hide_title===!0,help:t.hideTitleHelp},model:{value:t.advancedOptions.hide_title,callback:function(n){t.$set(t.advancedOptions,"hide_title",n)},expression:"advancedOptions.hide_title"}}),e("color-input",{staticClass:"mt-4",attrs:{name:"bgcolor",label:"Circle Background Color"},model:{value:t.advancedOptions.bgcolor,callback:function(n){t.$set(t.advancedOptions,"bgcolor",n)},expression:"advancedOptions.bgcolor"}}),e("text-input",{staticClass:"mt-4",attrs:{name:"emoji",label:"Emoji","max-char-limit":2},model:{value:t.advancedOptions.emoji,callback:function(n){t.$set(t.advancedOptions,"emoji",n)},expression:"advancedOptions.emoji"}}),e("flat-select-input",{staticClass:"mt-4",attrs:{name:"position",label:"Position",options:[{name:"Bottom Right",value:"right"},{name:"Bottom Left",value:"left"}]},model:{value:t.advancedOptions.position,callback:function(n){t.$set(t.advancedOptions,"position",n)},expression:"advancedOptions.position"}}),e("text-input",{staticClass:"mt-4",attrs:{name:"width",label:"Form pop max width (px)","native-type":"number"},model:{value:t.advancedOptions.width,callback:function(n){t.$set(t.advancedOptions,"width",n)},expression:"advancedOptions.width"}})],1),e("div",{staticClass:"flex justify-end mt-4"},[e("v-button",{attrs:{color:"gray",shade:"light"},on:{click:t.onClose}},[t._v(" Close ")])],1)],1)])],1)},hr=[],mr=B(dr,fr,hr,!1,null,null,null,null);const gr=mr.exports,pr={components:{ShareLink:zt,EmbedCode:Gt,FormQrCode:Ve,UrlFormPrefill:tr,RegenerateFormLink:sr,AdvancedFormUrlSettings:cr,EmbedFormAsPopupModal:gr},props:{form:{type:Object,required:!0}},mixins:[Lt],data:()=>({shareFormConfig:{hide_title:!1,auto_submit:!1}}),mounted(){},computed:{metaTitle(){return this.form?"Form Share - "+this.form.title:"Form Share"},shareUrlForQueryParams(){let r="";for(const[t,e]of Object.entries(this.shareFormConfig))e&&e!=="false"&&e!==!1&&(r+="&"+encodeURIComponent(t)+"="+encodeURIComponent(e));return r.slice(1)}}};var wr=function(){var t=this,e=t._self._c;return e("div",[e("share-link",{staticClass:"mt-4",attrs:{form:t.form,"extra-query-param":t.shareUrlForQueryParams}}),e("embed-code",{staticClass:"mt-6",attrs:{form:t.form,"extra-query-param":t.shareUrlForQueryParams}}),e("form-qr-code",{staticClass:"mt-6",attrs:{form:t.form,"extra-query-param":t.shareUrlForQueryParams}}),e("advanced-form-url-settings",{attrs:{form:t.form},model:{value:t.shareFormConfig,callback:function(n){t.shareFormConfig=n},expression:"shareFormConfig"}}),e("div",{staticClass:"mt-6 pt-6 border-t w-full flex"},[e("regenerate-form-link",{staticClass:"sm:w-1/2 mr-4",attrs:{form:t.form}}),e("url-form-prefill",{staticClass:"sm:w-1/2 mr-4",attrs:{form:t.form,"extra-query-param":t.shareUrlForQueryParams}}),e("embed-form-as-popup-modal",{staticClass:"sm:w-1/2",attrs:{form:t.form}})],1)],1)},Cr=[],_r=B(pr,wr,Cr,!1,null,null,null,null);const Br=_r.exports;export{Br as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
